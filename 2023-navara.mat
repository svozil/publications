
v=Table[i,{i,1,36}];

v[[1]] = {-0.5477225576, -0.3162277659, 0.7745966690};
v[[2]] = {0.8164965809, 0., 0.5773502693};
v[[3]] = {-0.1825741858, 0.9486832982, 0.2581988897};
v[[4]] = {0.3094653717, -0.1938156780, 0.9309493362};
v[[5]] = {-0.9332190794, -0.2498709319, 0.2581988899};
v[[6]] = {-0.05832118379, 0.8144110180, 0.5773502694};
v[[7]] = {0.3545430705, -0.5237358221, 0.7745966687};
v[[8]] = {-0.7344612226, 0.3566978824, 0.5773502696};
v[[9]] = {0.5786760096, 0.7736067538, 0.2581988897};
v[[10]] = {-0.3630437211, -0.03914830500, 0.9309493364};
v[[11]] = {0.7302967432, -0.6324555321, 0.2581988897};
v[[12]] = {0.4082482906, 0.7071067813, 0.5773502693};
v[[13]] = {0.5477225575, -0.3162277657, 0.7745966693};
v[[14]] = {-0.4082482906, 0.7071067810, 0.5773502693};
v[[15]] = {-0.7302967429, -0.6324555321, 0.2581988898};
v[[16]] = {0.01311661530, 0.3649127123, 0.9309493361};
v[[17]] = {0.6830041146, -0.6832559644, 0.2581988897};
v[[18]] = {-0.6761400387, -0.4577131357, 0.5773502694};
v[[19]] = {0.2762969916, 0.5689112167, 0.7745966690};
v[[20]] = {0.0583211839, -0.8144110179, 0.5773502696};
v[[21]] = {-0.9593011060, 0.1143447478, 0.2581988899};
v[[22]] = {0.2154252875, -0.2948309322, 0.9309493362};
v[[23]] = {0.1825741856, 0.9486832980, 0.2581988894};
v[[24]] = {-0.8164965807, 0., 0.5773502693};
v[[25]] = {0, 0.6324555321, 0.7745966691};
v[[26]] = {-0.4082482906, -0.7071067810, 0.5773502693};
v[[27]] = {0.9128709291, -0.3162277663, 0.2581988896};
v[[28]] = {-0.3225819866, -0.1710970342, 0.9309493361};
v[[29]] = {0.2502149650, 0.9331268961, 0.2581988897};
v[[30]] = {0.7344612225, -0.3566978823, 0.5773502694};
v[[31]] = {-0.6308400619, -0.04517539475, 0.7745966688};
v[[32]] = {0.6761400389, 0.4577131355, 0.5773502696};
v[[33]] = {0.3806250964, -0.8879515016, 0.2581988897};
v[[34]] = {0.1476184340, 0.3339792377, 0.9309493362};
v[[35]] = {-0.9128709294, -0.3162277654, 0.2581988898};
v[[36]] = {0.4082482901, -0.7071067812, 0.5773502693};

vn=Table[i,{i,1,36}];

vn[[1]] =    v[[1]]    /     Length[ v[[1]]   ]               ;
vn[[2]] =    v[[2]]    /     Length[ v[[2]]   ]               ;
vn[[3]] =    v[[3]]    /     Length[ v[[3]]   ]               ;
vn[[4]] =    v[[4]]    /     Length[ v[[4]]   ]               ;
vn[[5]] =    v[[5]]    /     Length[ v[[5]]   ]               ;
vn[[6]] =    v[[6]]    /     Length[ v[[6]]   ]               ;
vn[[7]] =    v[[7]]    /     Length[ v[[7]]   ]               ;
vn[[8]] =    v[[8]]    /     Length[ v[[8]]   ]               ;
vn[[9]] =    v[[9]]    /     Length[ v[[9]]   ]               ;
vn[[10]] =   v[[10]]   /     Length[ v[[10]]  ]               ;
vn[[11]] =   v[[11]]   /     Length[ v[[11]]  ]               ;
vn[[12]] =   v[[12]]   /     Length[ v[[12]]  ]               ;
vn[[13]] =   v[[13]]   /     Length[ v[[13]]  ]               ;
vn[[14]] =   v[[14]]   /     Length[ v[[14]]  ]               ;
vn[[15]] =   v[[15]]   /     Length[ v[[15]]  ]               ;
vn[[16]] =   v[[16]]   /     Length[ v[[16]]  ]               ;
vn[[17]] =   v[[17]]   /     Length[ v[[17]]  ]               ;
vn[[18]] =   v[[18]]   /     Length[ v[[18]]  ]               ;
vn[[19]] =   v[[19]]   /     Length[ v[[19]]  ]               ;
vn[[20]] =   v[[20]]   /     Length[ v[[20]]  ]               ;
vn[[21]] =   v[[21]]   /     Length[ v[[21]]  ]               ;
vn[[22]] =   v[[22]]   /     Length[ v[[22]]  ]               ;
vn[[23]] =   v[[23]]   /     Length[ v[[23]]  ]               ;
vn[[24]] =   v[[24]]   /     Length[ v[[24]]  ]               ;
vn[[25]] =   v[[25]]   /     Length[ v[[25]]  ]               ;
vn[[26]] =   v[[26]]   /     Length[ v[[26]]  ]               ;
vn[[27]] =   v[[27]]   /     Length[ v[[27]]  ]               ;
vn[[28]] =   v[[28]]   /     Length[ v[[28]]  ]               ;
vn[[29]] =   v[[29]]   /     Length[ v[[29]]  ]               ;
vn[[30]] =   v[[30]]   /     Length[ v[[30]]  ]               ;
vn[[31]] =   v[[31]]   /     Length[ v[[31]]  ]               ;
vn[[32]] =   v[[32]]   /     Length[ v[[32]]  ]               ;
vn[[33]] =   v[[33]]   /     Length[ v[[33]]  ]               ;
vn[[34]] =   v[[34]]   /     Length[ v[[34]]  ]               ;
vn[[35]] =   v[[35]]   /     Length[ v[[35]]  ]               ;
vn[[36]] =   v[[36]]   /     Length[ v[[36]]  ]               ;


(* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ *)
(* ~~~~~~~~~~~~~~~~~~Start Mathematica Code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ *)
(* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ *)

(*<<Algebra`ReIm`*)(*Definition of the Tensor Product*)
TensorProduct1[a_, b_] :=
  Table[(*a,b are nxn and mxm-matrices*)
   a[[Ceiling[s/Length[b]], Ceiling[t/Length[b]]]]*
    b[[s - Floor[(s - 1)/Length[b]]*Length[b],
      t - Floor[(t - 1)/Length[b]]*Length[b]]], {s, 1,
    Length[a]*Length[b]}, {t, 1, Length[a]*Length[b]}];


(*Definition of the Tensor Product between two vectors*)

TensorProductVec[x_, y_] :=
  Flatten[Table[
    x[[i]] y[[j]], {i, 1, Length[x]}, {j, 1, Length[y]}]];


(*Definition of the Dyadic Product*)

DyadicProductVec[x_] :=
  Table[x[[i]] Conjugate[x[[j]]], {i, 1, Length[x]}, {j, 1,
    Length[x]}];

DyadicProductVec[ vn[[4 ]] ]+
DyadicProductVec[ vn[[16 ]] ]+
DyadicProductVec[ vn[[28 ]] ]-
DyadicProductVec[ vn[[34 ]] ]-
DyadicProductVec[ vn[[22 ]] ]-
DyadicProductVec[ vn[[10 ]] ]


vn[[4 ]]. vn[[16 ]]
vn[[4 ]]. vn[[28 ]]
vn[[28 ]].  vn[[16 ]]


a1=DyadicProductVec[ vn[[4 ]] ]+
DyadicProductVec[ vn[[16 ]] ]+
DyadicProductVec[ vn[[28 ]] ]

vn[[34 ]].vn[[22 ]]
vn[[34 ]].vn[[10 ]]
vn[[10 ]].vn[[22 ]]

a2=DyadicProductVec[ vn[[34 ]] ]+
DyadicProductVec[ vn[[22 ]] ]+
DyadicProductVec[ vn[[10 ]] ]

data = {vn[[4 ]], vn[[16 ]], vn[[28 ]], vn[[10]] , vn[[22]] ,vn[[34]],-vn[[4 ]], -vn[[16 ]], -vn[[28 ]], -vn[[10]] , -vn[[22]] ,-vn[[34]] };
Graphics3D[Arrow[{{0, 0, 0}, #}] & /@ data, Axes -> True, AxesLabel -> {x, y, z}, AspectRatio -> 1]


(*********************************************************************)

a1n = Table[    Table[If[Abs[a1[[i, j]]] < 0.001, 0, a1[[i, j]]], {j, 1, 3}], {i, 1,     3}];


(*********************************************************************)
Eigensystem[a1n]


(*********************************************************************)
(*********************************************************************)
(*
xn= {x1,x2,x3}/Sqrt[x1^2+x2^2+x3^2];
yn= {y1,y2,y3}/Sqrt[y1^2+y2^2+y3^2];
zn= {z1,z2,z3}/Sqrt[z1^2+z2^2+z3^2];

Reduce[ DyadicProductVec[ xn  ] + DyadicProductVec[ yn  ]  + DyadicProductVec[ zn  ] == 1/9 IdentityMatrix[3],{x1,x2,x3,y1,y2,y3,z1,z2,z3},Reals]
*)

(*********************************************************************)
(*********************************************************************)

c2p3= Cos[2 * Pi/3];
c4p3= Cos[4 * Pi/3];
s2p3= Sin[2 * Pi/3];
s4p3= Sin[4 * Pi/3];

xn[t_] := { Sin[t] , 0 , Cos[t] };
yn[t_] := { Sin[t] * c2p3 , Sin[t] * s2p3 , Cos[t] };
zn[t_] := { Sin[t] * c4p3 , Sin[t] * s4p3 , Cos[t] };

Reduce[ DyadicProductVec[ xn[t]  ] + DyadicProductVec[ yn[t]  ]  + DyadicProductVec[ zn[t]  ] == k IdentityMatrix[3],{t,k},Reals]


(*
c2p3[p_] := Cos[p/3];
c4p3[p_] := Cos[2*p/3];
s2p3[p_] := Sin[p/3];
s4p3[p_] := Sin[2*p/3];

xn[t_,p_] := { Sin[t] , 0 , Cos[t] };
yn[t_,p_] := { Sin[t] * c2p3[p] , Sin[t] * s2p3[p] , Cos[t] };
zn[t_,p_] := { Sin[t] * c4p3[p] , Sin[t] * s4p3[p] , Cos[t] };

Reduce[ DyadicProductVec[ xn[t,p]  ] + DyadicProductVec[ yn[t,p]  ]  + DyadicProductVec[ zn[t,p]  ] == 1/9 IdentityMatrix[3],{t,p},Reals]

Reduce[ DyadicProductVec[ xn[t1,p]  ] + DyadicProductVec[ yn[t2,p]  ]  + DyadicProductVec[ zn[t2,p]  ] == 1/9 IdentityMatrix[3],{t1,t2,p},Reals]

*)
