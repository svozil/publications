%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: 2012-incomput-proofs_PRA-external_Figures.dvi
%%CreationDate: Fri Nov 30 12:19:06 2012
%%Pages: 31
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR10 CMBX12 CMR12 CMSY8 CMTI12 CMTI10 CMSY7 CMBX10
%%+ MSBM10 CMMI8 CMSY10 CMMI12 CMR8 CMEX10 CMMI10 CMR7 CMR6 CMSS12 CMSY6
%%+ CMMI6 CMSS10 CMTT10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips 2012-incomput-proofs_PRA-external_Figures
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2012.11.30:1219
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore}bind
def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave
pgfsoa .setopacityalpha stroke grestore}bind def}bind def /pgffoa 1
def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 47 /slash put
dup 58 /colon put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB28702831270DBD25D666FBB0AD7B96E
A44E891EA1EAF0F87013AFC982E33D67A28E96E0C9CB99B9E4192536830D9901
931A8CAFA41289633B20BA3BD7AA3414B6DA8D57CCF2FBE39920CC06361F075B
CC40335DB9A0071CFF77F6B7BB47F3100DBDC9C4A58C2B81EC99E8E966AF3390
E3FBCC28BA1D79961C8A1584266454DF772FBA99664D74D4A89FC82FFEDFCFE1
4C9E4A04291E803D142E37E7ACA66AB279378F2F192FFB2B5BBAD18B95F03136
2CB594A3D6D3F8576B90A6C4DAD6D6C8EE07AF682F925F01D0B26CBA347C03BE
F3B0585CF4539FDC66915E22117078CC94D621F31DCB3E021998A5D6EE94CA4B
E214D07517283D56973D8E4367392BF6C1150DEBF459D141AE0941C1C8C5CFBE
E735D796E365A1B0F60BB4CF2801EAFE4889EE5F338D3C4885368281B3C95CCE
251C28A90D318A8A0384439B38D63B94757252062EA44E88509FDD2E75FAAB71
7329622828B2785C1A8B26351BC7448C1719C88FE99BCB73F7DEA427FBFCDF4F
00EE079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D54BC1DF3171135278BED55
DA1CF0E696B12935EB59B606AA3C0CC50C7A259AF32F4C81D9B39470D9993CBC
8644403D2833B34AF40511654F96BCE0064860F39849DC65622EDFA8E6EDE9A4
7DA62658B43CBCBC5E8F53D4FAE6BD0253C0C81E6C53CF5C3A9E3FCCD9AE773C
FFEB7E81904730359D72FB1F64E3B041A69B2440F63606F42819D52B47DCCCE8
D129A4C05778EA6E4945DA28411430C42A3D1366F57F0124EE7C8370B7AE6C36
2D739A53C137AF4C79060AFDAFA10DAAB8ED7D0BA6781213329980CFCFB18CF7
CBE6C7FA3C27329935F378698BB17CB6118EFDFA622B219121677E28A7F1D775
51B8EFD72B485F950B8B4C0F5E25DA3D226FEC96545945C5EBA0E4FD6B949B54
6AD49D1BB161EDE033C4CB22B633B70F38D563819330DD52912F3D10E9E2D516
B08001738F1EC4FC0B848E039F7297787377D75C8A0D05AD493E6BAB4100D265
D42EBDD432F204616D034B3F80AD2AD5D4E1DAE678029CC028DB4D2D9EC04E63
E90381E3A52638877B18EC6582059C02BE39FD0EFD694DC5204A247B081D9AF5
108E518512572179FE6218E090422F74FD548341A957DDD557CFE2A3E9479F0C
48140B475573873B2FA48758B7E84B69D339F11D64C36E7FC9BF482DA1E2466E
092F00F71E2D78BDBB3E0FA63BD205AF3D9EAC39935DA37F4B3EEB5B4ECC92C7
B904D64166FF0A0CC9448CC7ADD4250E9D61BFE92B989A3ED30A272E65FD7E58
2F3777E1EEFEC31ACCADED6F1559AC779E0392D91D3A0A44AC9125D50A70E977
953666FD9E6ED5A705B1433D9B178EDCECFB52BEA5A8612ECF952341E499800C
F85B08E39D308C94E0A416475D75EEB83818EC7774BF2A9C982F8681A21D3026
3F47B70177C599672AC5FD5FB3C7FE122E994198FB57134BD4E481D05021A342
328F8EB3703ED17805DB6FED2B0D6F63770EEE3797CD8814C38102BFD0E48771
D4C7102E50ECFD9B5EB79BC15B4B830993FB73790CF101C3BB9BFDF16CE49818
4BD4BB397CE3745FE9FA4FBF7F4C84BC7A67A3D9E53BB392EADEAF1617B1585B
0041C332096ED8144EB7247CA9A891145C34BA23B61993B2E3E8AAE9B9ABFA9F
B486CE19BA1252C232E26F75B5CBB4EBAAC89F21F2DC4906B1A90BE35AE2399C
1C27F8915CCBA6A328B50838E442DB294FDB221CC0766B7A81047021DF46F69A
D35424043E7B7FE30D31721BFA1C5413433906C6F653B00F017F7ACA708397BE
C0E53C35191D4ADF9BA49D9D26DC2FFAFC4387012FF7455004899DFA709F79C8
76AD1CDECC020CFEB1BD7D3C06D3AFABBF86B72A84FD3468925310567A38E881
90FF668D3CB2F8AE6F7BD680BBAA1AE7C5E903A875CE4A11679BD1AB8488A778
7CD10ABB9A367CBA8CED2BADB20B5542779D50CD9F54798AC016FEBAA4BD6A93
3BBEACF4CAED69D045E949E25F10F2F48C6D08A7F95F6BFF0EBAAB0F671B02BA
487CF6B588EBECD26F9BB7E8DE0863B4F04A9709A6476CBF11C9F8819BB1E6D9
ADC9BCDB75E680DF8BBBE34BE213E7DDC526F6D7DE785CE175B921697F9D1F62
43662D16CA63A107968EC1F128B1D2E211B7812E89AD5B2179A27B3855826396
F410BA2B0A82508619507C76902FDB66E60D27C6591783F252E49C55747682AD
E4DC810796E92F1FFB719716F130BB26EDE6CDFCCD5ECBF87C038EDE44B3CD1F
01A0271DA6698C60F7E5C28522DAAFFFC84BBAF5BCDC9D4B1D1D4C85B33B2CBD
D9F45282A7375B3C445C604FFD14BC3ECD51D99F300E8909DEFB91737841CCC5
76074E077652C0278023E56BEEA38DB4A093641021120E490E3CD9760DF3F2D7
B590D5B0093878A25D89AF01F5B23CE1ED3A79FDFB5FB81D4F0DC10D39E07178
02F017E4631C0DA17824B0A97182F9B9EB8974B328F06518AECF873B75A76C52
EC37CB7F63EF2BB221F7709B3D1615263EF21D8594A7EC882C325561DD342566
F5A5083378153907EC0FC642DD13BB98AF214DC3E7C4AB235722E6CD85C35C06
88AF8CEF2A277D9F0F8229E041D85DFF60479439BCE14D3A61F54B46D1DE5D40
D1815DEDA70A37F7C837A84787D485E1D0E5068ED5F483E13F628FFFB10EC567
BDD998F746FAE3930B9B7C8D09C15B0506D1F8055552921CEA0311218D122678
7A015F524CA3600C93EA855302FA63E31AB205A3F2922E0E0E424A2B1E463A6E
B02F750C19673F73EC7222EF28D20B17530AE596A31AD4D9ADB9FC1A3F2A4495
BBFDE53B3B31226325A27C50FC50685C434D4EF1B2EDA7C2C61AFE1C7FD58404
CCF6E173D56F8D3D3CCD193B1F883CD2C15E43BF7EC95C16EA2341D5A1054BCC
C519680EC02B042F79E7683BC5C652A7796339BC750D0A626CF6B29E8170309A
E057CC7D70AF81374E4CEBEF131686C2A7016C96E6F3F4459BE17E1AFA49C52C
2C9852BB96017BC0B37AF716A6EF842C08FCBA076D96A7999112354AFED37CD2
8F96281195D73C2472EF57C6C653A50715CC8172264F76A5963F0D971C22DB8B
C1E7AE1E5F292801A915D2B1B1A626BF4F0B058C29318C1EB44B8761C27630D8
562319CE3ED1EBA015E22227F1972E909AFFF08035C8D12489A3705DA60AF3BE
F721A80FB9F6933232A64F23FA435252E56EBFE676567633505F1C9ECCE4BC49
234F2EA542EBF903E44798146D56DB53470ECF5DE1745E800BCA9F213CDBEEAF
65C8B57D64F96C30CE764D2DA86CF894276E102F34936542C6D244662C6641B0
A3089F6716F847845EFF4DEB668EC7289E5FAD1610D71FA93718A29F2893C635
BEE6601CBB2E17365721010C513C4A8F64AC44B2329A54CFAE0E98BBC8529B5E
F33DBE133B7AB798E68EA299DA2457CA3F29CEDDF262CC2D8CA852B5BED57A0B
3D0D543F66716B57DC1BDEB339FBF420A3DC65B0F2C1BDD5563BB65A323B26FC
3A73EA839A9236DAFAA5EBD83BB3AF33AC8B6F506739BE0911E5BEFF761F9C18
4DD939E957505BC3CA6EDFAE120084FC48B0526FB005782AB153526ACA990B55
D3FE599829046769EADFC0C9D1B86BA91DE0879717D7B5CE89BC42673093C4FC
6337F255ABA3E1CCE5CADD8804E8D22A8AEC2A199BC43CD200DFA8752FE7F343
4F413F121650CAD27930357A2A7E37A158C8001B18068D117CE4592C4702779F
2FCBE836E73B388AEED3E82EE355DE75C5F4723088218CF6FC9C947AB74FEC06
658ACC2951AE2C0C2A05B1203D06129B13DA51734FE3204D2230AC638E8EA86D
0D8B416DD36D773489C3A76CC686DB06DA14B38A00629D7BD782CC6592B8F9F2
00057EFE159DA30096B5024A52294C2FC4EEA5DF6567673EC57D0C6DFD4307B4
1B9D55504FA63684972F7624D3534780F0AB7721D5D2DA075A6FBA474B3A872B
3D85E1936E2769E9D8E24FC22F6E1E3AE7EC02AE4B0E97E8579FDA169CA0675E
57864CCB714E515F4F3F4CC5FF783D1B2F5E0B8220F9FBA59FCEC982E34B0D7B
2DC4D110A54F8EBE2F669AF4224597D8A4DE40692D0B5FD7FDBBFF16B1D4EE84
E9960584FEBB10B9EF46046959C0B49CA0F614638B7672326115B7851D38C564
A412F1A94382530D77E22CCFCE27FED6A2EFFFCE5E9FF779D2F84924B838AE79
C6A103D1838B1B46031FF828385DF5F247212BC841D40A0AFA08EE81E6C848A8
F5253B24F785B7A8EC48F23F4AFF397950F48EB888F8C152105A6D7932B25B16
6998E4E13657918901C9A14C9672B4EB8F630C01DC0949FD422EA9D4FB52E1B3
7A79B13C2673053CF1EBB6788BBB44A8013C4B8DC150E294DA02F9F2C2248F9B
4AF4A30CA3CFA808DD59F2948DA00D79DA83C946A0AC89BB29BEC35CCB8B2217
A2131A89765B00C7D04A4E1CF33A365C83AE4C976DD128713E6B05F887877CB7
0D0853249B86829274C6F25A8FF0D05ACB782EAC87E7CAB52A562328807E5471
E2C33A3B0EC17A429B462CF9104C739ED753E170BAB61E5939B1FB3503BA96B7
9E33298B33A09E8191FB702C4A6D6A32309EF16BB7F79508F39CD868BC0594C3
229E3EFDB47A227FEC85E4824F31A26C762271A27AF31B7730FB2A2B25B6FCDE
D73B3566870A594A0FE728213F471112C218406839E0EF0C43C6FF26AA324DED
56EA1B6EB3B9A5998D6BF359194758AAD7370EF6B7A3287BA8F402CB14C56270
29405E8B850767321645CD4BEDE24AF1DECEA6825B9ABFB6E3A8C33E875ADED6
AFBF1A1A1A02E8A449D7B02152C0AED073B5D3AE06FA462472063E8A70F8C6F3
88AC8AC7E2CD7D2EEDA2D58FC8E87E97C0E2D21B93CECA2BB360BF21B1228F9F
C5BD52231C1097B2C740A32B4D27F2BB9B390EBC4FE7FBCBD0CD0DD2AEABC52E
9DB146BAA37ADB34617007B91EF77FA87788738A0FD259A9E3E149DA78DB3AA2
055B7178917B4F435F098D3463604EC74414FBA1A4FFCCF5B073C6E418150B32
C72F45FE8A5F3F04A6FFC165E8BBC3FECB7207FDDF0464A31836D3314F690FF0
4D21F3F75D2E8279D534DB4C973577F1E026111D88223916978A1206508CFB3E
622D20CB70398B8A94E493BA5C0BA5BEEFA7C6E820A9265EC741CFEDA8872ED5
5317099E248F455983EE658E107C0DAE823544EC6D4007DC96A66E8520A47523
A95AA38265A6E5EF2869BF0E896DDC0E3C5182D761FCB5A0B09C939FA0D6E1BE
48E27240488F442E70931511C7E6ACFA47836A3B1BD3872BD2744FE946322DFD
8124DBF278954BBEB652E63B908A64C52E5956D3C75C4B57C8448937EE5BED05
87029A1883BECB33C2597BFA691D2D16AD7DFF63DE10A2D593D64F4E0C2AA49D
9034382EF6B34FF3A71B3F6C59F572D7012102C9E4D300053A524093C795EE33
2003A36E6E14715C14622BF10AE8B5FBF23D5175CFBBA5BF7BBF23BEEEC72525
9C9A42C01235E460FCC49A91F565C1044BB51B76088E16B09A3751A9587BB89D
127E5DB62C862901A5BC8A25345C81A7B50D3B473AFE4D1B0CD17B28511E7C53
B6C3C1EE9A4898D9C0412E245F1C3F28775DC1C9E5D9CC1DA872467C70C1B71F
686D9ECF06EE4C5B9F5DED19B15AE9CD69E96F5398CEAD72464FE123E36B87AE
48A33DD04E47919CBA85C6B5B8C820BB8A3FF55D6B48193286A3DC7361AA9B07
06AD0EFD923446FF7B29D6B8C4BB6EFA642D3A6C6F22E3E7C5D02B7BC11DD7A4
DC410423C14BB0EBBDCC9E2700FD9826C221745571494326D1B38FD2B738C4DE
BB142F66E457AF8C5A676A10FA32555B842D996E923B3FCB667F3AA63554C0C8
DD1CC441649AFED168BFFF80C0D8CCA50379572A8091432E868F65DFEDA76E5B
DF1529F5431782DB3739FD1EE8AB9B8875E26C35423CBA0BEE56777833232476
80A50D11E6329A79FC5ED4D6A5110D15D48FA7E2675E9F6F01613205EE255535
28DC33763775CF307390F56A83B4531D90F98AA9BF07E00C98539FA519DC3D8A
C72659C7CC2C745EBEAE88ECA59D14B184785833FA9C1FE938E8C34AB08A19FE
2422F3C1504CC415D0768D1144E93D038A081A8CB9BC55FE47A31C405E8CBE8A
35E2F802DA7C064A9717D5240716EC9EC38E32B95D7903231B2A37DD3F785CC2
41A3BB6E635668E811AB35B7D3C387392CB8CA083AA5F08B8BA4250F6C3262D9
F409A43492D24673094C50A3382C4C8D6F9CBDCF33385017AF770004824A72EE
C33DA2869B4BAF152EE1124CEA6B145A03207F2D07E6FE627EDDE929DF26241A
02A71BE9554C161B72889FB007338AC40665A7A04E67EE46CCF7FC4D2B58D30E
D20BA770A18E39F328FD5D5CE571E5F3736B3B318CAE7B855C5AFAB7DC6C5625
82B69846E0876690152FB582805E81B1061B53328DDED9107DA114EFE6A7A44E
65D3A94586FC39A468E4BD4363D6CA754B13060846BFAD6043536E4642ACE3D2
28B5C45F92158015731F7C7A2ABA8EF387E94FBF05AEFD8BC63DF0197C40A0B7
1717BBCD7713EFB582CBBD25DFE9DE46B3F32D31A06DCD53FB6EA851A9591F58
347C9A8066B5243A48BBA63DCDFDEA93DB4CD40E7FDEA30DF7AAAE785E4346DA
72DB08BD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS10
%!PS-AdobeFont-1.0: CMSS10 003.002
%%Title: CMSS10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS10 known{/CMSS10 findfont dup/UniqueID known{dup
/UniqueID get 5000803 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS10 def
/FontBBox {-61 -250 999 759 }readonly def
/UniqueID 5000803 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS10.) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 83 /S put
dup 85 /U put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C4488BB4EB864B48
63941B9739638D2E6F3CC778582B46AEB4E466D89D1C211225274356A4BC90F3
274C6AA56E200249B7D0949A3FD4185DCB3E5286910EFD7CA72D5D8E8052C96F
388D12094B87D3705CE64459558CF024667C0FE96CBB32B0BC9E51037D7BD62B
E4B05FF99384E71D78441A79B0B1DBA1CAE02434A9FAE46596FB86B873B1670D
AE0BAF516445A0DDC127F8FF3ADA0B10EC30A9CC1F7E9248828B5E8AB46C3FE4
154B80A54128A08777F5F9B8C519C7E3B632B3476F007FA156E9F39FBE57638B
4214CD2BA79BA9DDA0F4C073AED814ABCCC2F7906C57A872C00E67FF03AC1200
29DAB92376422FA21C67CA98BCEB8C431CA2D3EDDC16972F84BF6DB2F705BAB5
CAB39C82D139FB1304B9E7BF1F6FF447596081D5690B1519E468D6BE49C329C5
C9C809023EDEB9DCE4A6D52A8049E0CC134E8B41BFC6558CFCAD3D9D2773EA16
131567AE6231B3235869767A1E7C1FA6C8D6FC1B276CBB1CAD14D376188C9682
302836A9290E587D4225EB8BB1DBA2C4580A81FACFDA197174FE948CE757C575
F23070FD84DE121955D7D9307BF986C5E739FFFB6CB76822C341FBD9FC2E3378
AC9332B40C07D5B8745D74E30F1D719EAFAEDBF5FBC40D0546F69A66072D8A49
28D2CC2E76B9B1EFD191E0BC7510C2C8761BD92EFCFDAC263342A01398A56D18
121A591FF5CD4AD8B25699A7897E60BA940336BC17B9EC9F97C2464D031F958A
A3548D0C97C50C580B6EEFD0FE8330EE2BB0D2E7FD1DAE33448953544A4B1C5D
8EB57798D0ED4B22909FEA78ECDBC4D8A124DA05B9999242D68681017285A0C7
69041C1F79442279FBE328733EA0A6694D68BA89739FDB9297BE0CF1808C07F7
BBF6F1538DFE084EC8C0EC24D883F6CC08A51DFEA23EE920F44BA55FFF58E960
C7BEE551FCD2D5814DE7E3F835608073C2CB80EC57100CFD484C837881674E92
B217F4D11165427DACCC29C129005874C05CDE5FBB2D912368EA2B98C45AEDD8
8A0D2493F60EF36809C8C6EBBC7856F6656E8D398BCB29DAACD4F7D4300A0B01
161CEF51195D2C58DDFBCAFC1C03F49304ADF02789889826F1E20BCC14827565
F2A45CA57DCC61B52E33638A0C6C5A59B145E82B82571DF1806EC40FC0E8634E
A34A791B1325571E19F3AC2EF6FE68A14B0ABEF7EBE0EDA3942E85E5AE967A14
0C5AEBFF2A36DCA8866700CB7082D2ABE470864C44AEE1F6D180D511304C8674
D02FAB12A7079ABF96E1CA3CDF9D75532123E87663B1D524265AEF63EB5C2169
B67A651A101E1C7EDB008D3DB06DB1FC1A81B41B291D6C4A58FB57989FFCA434
DA84B3914D1D80B17AA3A55A70BBC06C49DD5F7DDD03FEB0055088558FA192A5
261477899857CF598DB740E82D035E84CF17B33048CFED2DCBEBC2B75CCAEBEA
B6C5AA1C6978FBB36ED98D9047028360ED430A0AA69AC85A8F83825EA649E1B2
64B260197B06A24A1DD969CEEEE136FB046D713D0630B246BD41CA285F076038
F7F8431913BB9A3E70311844D4C22AA446E3CA217A9DFD75A898997130269B29
AD4AB7D9662856E677FB2DAED7078639CF31C6E6637C74DE2B5D0ACB88BD61F3
CE3C5D56D3D4B3EC1ACB33EACBE05E53A133EBFE93CE6A0CBC8F24BDC5B31BBF
5B3E55D6B40B1CED389076014667E28BBBD60145A06BDECEE8011A2C6F06D091
73767A8045CEF2A110B614149FEE783A2351FB2938A9F73CA406538EAD82ACC5
A3DFD3DE00221E1B4EA977AF8C89661357FF7D2F1FCEAD6CFC9D6AD81F95100D
EA1F328249AD84AE849220E6593D45015B4D7C9527F3063E9F6DB6E572092A1F
1F460696227D5F0FA5A5484B1F0D8B4A35066451663BE448D924DBBFD388B6D6
D7CFC87C9E75B7CF79A4C9207E29E0BAAAD7FDF529B860F7731EA978E335334C
13CB2F0A4250F5957B44CAA0674AE8356F586A24FD137103973B9A1FC31090C7
C84DC5D380404BCDF3FE20C6F74FFDD8BD1DE845E99DC6FE09931F003834ECC8
08C5D962070B6C44F901A787CCEF048A2C584A2285506B4D4E82B1BF130E2220
B6C8B3240A4CBBCE16AD3676B23A50B75F82CD88D1B8F21D30A12716426112B3
23DFDE5A348DC9DCCCE5BB5DB5433A5AC125DE1229FFAAE0D8319B2929986EEA
56A93BA1FBDBE617F30852A3DC8C712DF674169C6D656F75E252187A085B2788
2467CC4DB08D48EE6A98C61BC55E6EFB1938FAA718802B7587B94C8F1477E9BB
DCF6E02B5E67FE3AD9D87C321CD9BC0CCD36B9C4BC601E6BD552EAB8E1C940CE
3A22F3C2501C3C939CB4F17CE97566F0A04602D2A22A05CECDF4A49CAFD6332D
5870E1F31AAA5F86867F71610CDB83E473B9D20BA00D8986D7148E0EED03865D
9622864B52B09D12E0C5FCDD023D29D5AB1CACFA92B6FC14FC84E95F407861D5
2BEE3301AF399FD7ED04DFDE6679A345A282E7FC08D47E3FC8969D3B00ACD7B7
F8769647D6D4F4106340EF739583374D023C2702C48FAC1B643B5897D2D7DBCB
73257712A0FDEEEB98A021D218CDDEBBA34687E23C4828D7F96D1ADDFAED7EA5
B279322E6D55FB486AD8F3A8E7B2C67915564FE56F0C9277A06B29C47FB7D007
11AFDDB3FC1B173B4E449CC6B198041CCA0624D81B4840FE5B63BE72157AC6E7
03E5E95D2E2CE2E40BCE8044A8F2AA45F855484A891B9F0F8F70188AC66A8DEE
F4D656CBE216E6D9AC33BA8DD0685D480833E1226784469A221D9FA3CA600AC7
5574B5226649A9C48CCB43339942FC9010F86BAA2D181AEB487A92A96BF2EDF1
60F3B93FDFF4137A25A8AEC5ADF8613019CDB103DC4367EF3D8AEB4FED0E6BF7
622AE0CD3CAA0321D26CA4280CFB60D08D9560AB8AA5698231171B881BE9A27F
BDCF3162134126212C523738D221AA05E31CEE73D9D40F73C450B6AE2C1E70D5
C37162BDF55943069923A290A6C720042566E55A21CD81C460818883AB016C16
8FCCD1255A66977DC1C110261D7642199D466DD3D2493A2D47694F842241C474
1752B00DA03E69CD16A8A14BEB8A431A315D19A39BA978E46EB1189089FEF647
F9DBB58AAE6B3FBD475E4DCAD241A051DD100ABE81D40ADF18A4C50F53BF749F
D6F7C8E02A5665B4AD18DDAE79096DD447F8BD32C68F9F97F05E0071D9E9AFEE
257B96D48ABD9920418E17C8F027E9E975E4A08DFB1988E7104CBBC1CAF356EA
7750AA7110BE116AF1BA69A94776E4356573B38472A8A1292C63701543B0F315
611A0E0595B30424A1137478BA6F990AC7C3AB4DB69E75C222B617F373C521D4
246E954E9857AF59D1E6C36412B643733CF5E1C90389EF0E5E0DA55D3AD12E97
E7630C315F72A03CAF22E0ACE3AAAFC1D496CF4E5ABC49C2DD5E264BE7EB2698
AFF36089B5DD2C53DB1C1FCFBE1E89D41A95DDD278CEB29DC85FD1DB8B83CAB1
EB37C531E9BB8466ED6B8B60258D3C355626CDA43A32834DC89DFB11E5FC6D68
0F78CFA871113DB81A1690250A6F842ADA15734CB6DF7C6ACED6D8D586BC4E1A
94EF3052FB0F8B9454390B882CBB6E135AF1F9C777AC362C2A758C3A98117120
73C6E2FAFB580716D4B2889A4331CC658AAE996245685B973D9C184541385680
AEC2956107DAB00230FB39BE98D3CA898D917E5F2088F26CBA4F8B5B115B6443
8753331233B10852702FC26D9DD4C990C13CE4D0DCEA23D62A826A4B4FD16070
5F3638C0A50A3373A33FCAA6F3644975AFD0560EE5F2D1CDF08820373468E4FE
6679A229D6955CFDF7ACAA92A87E6D8571AD18CF59F84F88A674B2946FF20A28
B9798EAA22442415EB46B9498DDC0F4BA6ADD347AB43E9293CAABEAE80127378
129D5DC69F6DFFBDAFA5D65580239E8EDF6833D0DE6DF75F0FD090A83CE0974B
AC947BABBD1B1C7194DDAEA37B0CAB477ABF9433FCE0243C8D308409427D1DCB
8EE4FC36C7E5CEE104904B520B3F6E677A5B92F694BDBC2C799991667E0EC14C
B95EAE7DE1854BF4542F05B4AF401CF67FC3E46EA5A0DC362F3CF177B1796DA6
753AA803E724D1721DDD1BCB0C12CE0859E172D2A370C3697286F80D9E138AFD
A0EE016805F847BD30D11D8B891E54C77AB51A7CABF76BB14B06153C7F811FE4
93FC4B7CF161051A458EDF767DF94F487DB939A2740B4242BFEE234F75084DDE
207E84533004B933D43C712F0C71DA4A00FFD6D721EBC93AFDC4200E3B8DE433
3ED3E1DB799BAA27548ADC853AFF5D9D6BD92D644E3CF394789C99D9DC054A26
7770AF5DC5BD6563929AE11BE341F036584DD573D3F43D9D975201EF77BEEF80
D1EEDD1D4AD5D4D4DAF6D5B9D4C1736CB111D6FC74C236779C0ADA430323A825
09EA8D0CB1772220AF28B93098BDB36913159208D1B2D7ED45808BF7B686419C
5C0E3DAB5BC9830FDF3B494D624EE8068BF6F5212BD69EF466B9A213047BD105
B848F056DC544A8CE66C546B1A4DCB4BA29CF0EB4DCD9C2452F22172AFF33B29
E97E12D8F0D312B03BD9E5377BF0C81D884F1E79DB66E8144F106DFD2579AD26
C693C5B68F3AC46BF0D6281032D4D4BAEB2243151AB1AC0BDA2ACDDD4D590C90
F29B335DF8F57DC593DCC081FB56924028E3161AC4865B49D1B0F63F5EE866D9
7A71171C09B09A44B0E32F03494D9EA63F3C89F5E772BE25A6557F119299E989
99BA041694ED805AA4F3BBDF00D88171C9D43A9085A287A36A1F0F9386F2A98A
96815CA51F06E1CDF20B757983C5FDF4003F5438232159F325C6335B734FD982
1423BA77D0EFD044381AFBD0704E3DE95D23A70E2428E9AA355A9A8A25C6C74B
48488C14DEC93A766E112D74C83576ED355F17A809E8D3F9C65C4E3E14EF484F
4658DFB57597E2A4461D8044E95844391C1275D63F282B37888C842A5151937A
45007547263D70195ACC018A373D498B88C5A028BC66ED96A343EEE74D61EEB3
D9472B6A549CEB8699F4B35154A0E2ED22867E4F9E4A76311EB2C9F9078FBA81
838EA49C2966BA64C165434DA3093206B70186BE80600B891D9979F730FDC794
5DD6D8B2090CC67A634B719F441092A10C447A86ADB78DAE45823ECED5FCEADA
ECA52E363D913D9EFC0ED98A5A1F823DDA3350EE27F09C14E4C7298CC0FB6200
DEBC640C68C82D70AFB7A7BA668F1D7948686206884736CD03D9F6E6CF9702BF
E3C932CEF3CE07FBBFCEC0476EA6E8D5D4C5C6450C8FB236B89BB82D51886240
5BA7462F50A88F69228DCBDF26B7250E90B3DF8E94ACA1CADD9EFB5C73EF9DD5
46052314D445CC92512BA231F79A09A2F0D91976B160B8C9BA055DA4AAC1300D
491193EC66A6DE12BE01EEEDBC3A2291DA1F27AB76596A236B75E19FC5F1FB6A
DA1AD835CA08B6CD03B97B4CA1BFCBDD2500BB09F1A1B0438E4A759370EFA318
F062BA9F3D352572CE232E6FBADDAA5363807D0DC5320B807FE5485C8CB09B6B
0BED9F5B1300FF370252DEBAC9DB25CE2EC494E8EEA45FC6604B3C104E81B287
EDD49F3D7430EC9176A16B4FCEC5DF68DCC11ADF90BD5337E2E4B59BEFAC8298
E5ED2C7FC5928635420FB1955251932713236DCE28012C86F63D12AF1DB634D0
0B8CB8992B8723548177BD6822A808FF221A9E38B0DCCBC1F3430A9BAEDA89CD
ACEBBDD8CCA5E17F1CC37E35A01E058BAAAB6BE7124314DA19962BADB74EE73D
8FB13FF6AFB6FFF97926CA045B62B98BAA753AB0FC78B881D3FAFF9EE2FE918C
8EDBEF87637F1530E3E13AC090FF81F4136E08D5F3734327E643CDF621278741
A17AEBC56E21217888A6C8B5ED4269731910E7E25693CFBDD4EB4A32698F2447
4C45D73E810B627D8719E4E34D8FF378F9B68BFB149AC67B3B1E55F20D097FC1
AF74D46F5A3923C63DFEBFCA210F6B257F5FF3F2AC34CE41C15C9977634E473C
2235295C05C3DF6B3009C7854BF11CC87471CBE085793AF9C5D05C5479B9E780
14A5A6F3F6DDE5A18243DA15732CCF26ADE40C566DBC3C62B71D46DE87A12C6A
647CAC923254E2E74AF882DBD5C9E108A9160393C5CD12566AF7C824EFEAC56E
6F05B92C73A76824C5ED1735BCBAC61B98D509250C854CF1500C212F574D18D6
4426B8510FE9785B814A70E75C9234D42483E736D0689D3561E8EE5650F33A36
D50127589401D267BA6442E8616E2CDB1F6691D3FC4A2A377E5E154972E890DD
60CB463E9EA9A6EA61087DF452FA5646F69BE879337EAA0F5DA4438FF0365627
4E3B16851C2F08E976FDA27AF451CCEFED00376FC3D6E0C160F0BC19544DE289
BECEEF9A067FD71D54DA3A4F73F06E2F522BA07551296214DDA47B1BBB1212E0
1100ACB5F65FD30C655A3402C83058F8ECFE48FA60B6A3DC86C4996414130194
6676EC7F37454023AB53E9D9EE60249ABF6953E76DCE3123DD268BBD492412BE
65D7C3E5A5E483C381182A8F19B506F0AF6DCD55532B89852D1D96021B22E9DF
D9D072BD7DD4450577E658B433A84F92752B260AFA2EC4A118747CBFE36AB7D7
6D5DD96A119AA1BDD0FDCBC3AFDAE5FF72713EB46759A06CD09B5CFABCDAB0E9
85599506AC07AA525978AB157496163AAB387F079EC9FA1F9E91B9C2FBCDC9EC
7027D77016760539AC03F1C1DB242D28D6EE946C42DD2262D82ED48C3A839853
BA977046F0EF373AFF884AC3112D2FB319421C3165DFA5710BFB9AB9595A10F4
9D05704B9E22137CF27F4B2DA9CEF6D8801D5F792969B2E58FB539B8038DF440
6DE20C0313A7BCD16F279290AD6859B0E657CC3041C7928CAE35B9D3A681F2A3
2D40F8EDAF1127E754276556C95E1282514B6EB6E43FF4F0FAFF28C715E3F39A
374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F77336
39CAC45329A372205FD551B9E9EA5082411207473D9D90E76136AA70180172E6
AF6EF3EF6B38B1906B904BE9BD5251EF067738840C28877659B649C6C4CA328F
1BEF8A9CEC2CB062702F58CC0B8D2D097FBC278F9FD894E10ACE1DEC4530CBF8
E4E467B6DB9C596DF0C3D43E6AD70F30B733EEE692C2EBD68756D0C16E1F00B6
AD011B5DA073A769B53C2DA2E7C9B7ADC6F551BF4DF4C39C66443692C3DC62CD
B1E094013F364D04BE2FBFCD1C7B2836180E9022E0434421FFA4317A50096684
CF0B8740EF680F27F4A84AAF2AA92C64883BAF57BDC60C6467A8D4E09E6316FF
9BE73053045E5F3586DA3BD1298DC15D751913FB1E72EF80047F6B33591B97D3
DFAD34EB224D64EF60F5B4ACC6EB42E1BE0CB2812FF2F3C264AD2E44F5EBA441
670CA0A60E73176ACDC4E42E74F8F489C73481EB5D46A61FDA1C0FF9F8844DBD
99CECAFE2A72833E4522981FA13713AAFAF8F121E60FAA6F379B2C8874CFF23B
8FECE70654E5855E525A403700A96CF7F8111BF2B58386E29640D82F1DD86900
E0E203F3ED554209CBDA2A61A5641D4B39D98C5C43D4575648D06BB82B6C4D4A
F043EC61B17C208CE8B4F43A7BCBBE588A3D13A183D79A47404223037FCFA4F1
DD237344E589F161BB9BBF3FAD2E28749350DB9A74C09E894BBCA85B82E704E2
99788B24642A7D0F0FD96601CF1AE4819EBECAB89824A0DC1C03BA4B546ED36E
DABC8D49CFAA53D2A9A5DD6B3431E364C99ED0323513476CDCEE49BC413E50BF
51EB93563DC03B62F84C5F96ED713F288D109C79179AEC41424822772032035A
40E84014F5BF40948F05E8562C9CA9DDD71F89021BE238E74781A92D64E5F9E5
AD6C0D954C6686C714BF189E78EE47F1530CDB8376E52631A1A26E3021FAB977
DBF01167266AD68A779C0180E034A90CB77B86747395BE885E484BE4028B4093
8BE191D58D0BF85308C72E6384292A2E1CD06130A091F8AF9DC6C3E12B1E4BA2
BB2C37AB4AAFC0CCC7964C06B9EC1C7E3BDCB6BA265288D9C8625EBA35BD2A49
BC50472D7AE262237FF1EA8D9DEA3C0DBCF7C3B2DF5AFB1F31E46B48E0B50FB3
D9D784A77AC0ADBE695F8A8E0FE2136576DB6C17BD56DCFB7AA7767651D74B93
6F56A2C9D3C3BB19CF3E8B2B02D8D37EC033A53A14F1438AB2AE485368C89D10
32698DBCFE8CBF8F6CC75B6E393CDB1C85774C071E710D6770BA8272C49109A4
F57A9C9AC821A661312E46A7A40016C1C21A48D9A612D33F4FDACFC8C822FFC8
58F4FD66173F221783BC5DCDE31A842EC554DA5F0B0937102275C16BE5309CF9
1E7B76B2CCAF04794E6ACC66E10D4ABEFE0C545AFA8FEFEB21A9F916107F9815
F32A0A52CCEB60E2A0ABF7F89C062872F97D76DA7E6E98717DDBBDD96BDF20E0
EF3408D691653557885286865812FC569805CBA674FC8A461F532C27239C7CD3
969360B29C99F8899F7E4EA58773AAD50D20F4E3E37D00D3C35C5C2D6E1B473F
CD6997F699112E25D4DA8D842F59BFBF4488D571A2297648CDD14145D58FCFE7
E5AD7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 2 /multiply put
dup 6 /plusminus put
dup 15 /bullet put
dup 17 /equivalence put
dup 18 /reflexsubset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 33 /arrowright put
dup 50 /element put
dup 54 /negationslash put
dup 67 /C put
dup 79 /O put
dup 91 /union put
dup 102 /braceleft put
dup 103 /braceright put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 106 /bar put
dup 110 /backslash put
dup 112 /radical put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B1058
93FAF9435086F4932783C7D4837170DB0EA31A11EE76B1B9DFA42BD7AC6B7A02
60798C30DA069C1E3F3211861EA327F5E48E1F440F6ACFCD1FA8A7E239B78825
56FED1C49BCEC941D4BBFED805E0AFCFBC77850BD291FA4F8FE707CB4E8CBD1B
1EF055DBB7929E9666F539079840B5A6B6E1AF4FB0AB0CE7F517E28F67D1FC76
2965CD2C4EB718886E4FF6A9F8F6EFAF9552AD1D7CE47CC42473F8BBFD598652
5AF9535A2078DD3E501DF0241EEAC306DB1C2695D6DAFCD4F28DF3EEA1AF6EFF
5490E5C45D2E2FF381528AE3E23D323472F9DC58552418F93AE4F1EF66EB99A9
D76D684A1AACC206A614C6A6B3B2A1F189446E9ACCBF41F9D9F03F1466758C19
293B55B8EC83AEDE8A775B2634B281C7127FD818271FDE529A96FDBC5AB0B8EF
AD74FC70A687B89F31BF69838AEF1CF8DB5AA29D60B224C9B8872CD9E55B2E3A
E02EA7860F21318E697822FFF91E5E66C912B6E181015AEC25E2CDAB7E3E2BD2
9D6E460691CBD49F4CA39FBFE3D2ABEF937632E8E3836465F77F858C6857B5F0
A4047584A54103BF65647E491266EFDCBDB26964F23A8B1F8F17FB692DC64F3F
8027332EA7C97A55A758AAB207EC7234E3E37EEBE7A9AD06173AD0E0E39E2579
5D529FFC754B37A68E3A9C5CA75A0B2C8751B662AD9ACF4D8F3579D044532D10
D369A3246A24365D1FF583036DF950234D4F632EF2991878E11F387F280F6093
AB8C341893ECA33A7DFB911145F115492C8F03055C57E6F094F55379B7D24388
0A85343F9901877AA28192CFEB3F25554837895A6BC1B5DF4B041F231AF87896
3441AE05477C783452478BD4F24141C2EDC0189E41179F7225B6871B57E42BCC
C0462F5B4ECF69FB0362B257771D23B537F59E619FB5481C30E7137EFE140080
271F8577D565C69B324E98C6184D40417C8DB97EE28268FA3F21015323D745C6
BCCB1720DDEA093CAF127BC2403379ACD768FDB8F280800555CCAFBF5FFE2152
1B0398A267494A8B3A2E594E2DD65BDBBADC6DD443C506D2CB9428EE216CF6EE
75AA0C4923B161EC5A9F27BA2F3C6212B1E2C4035D0EC9E8064EC1C2AB1E63AC
10B10DFADBD04CEF46CCC56CF88F138A6253AF8A88D0C90A888BDA7C6FB91038
07D13769C0E028914A9B3EAEA185FA04CDB2B4E0DE09EE353E0133FF0843AC1C
BBA7BDD35F63B430380D36CCBBD6B01682316F929CC2DC351118FC881D1C804C
8CED9D9B51060BAF19E0354591EDFDF2D9BB58E31F6FF762D879F9DCC0635C45
83D17D1A4D8C854FE0231A331AA6DB54FBEA9FEC37256DDB111851823F46BF89
EA805E24B0535D3154E13A6EDA2B8CB045DB9FC20205DF87EDCF7858059E03B2
2996536F25323B8067743EFF482252A0FD00BB173D377DF3CDF26E228ADEFA3A
A6C9FE26C89D9F6D3997349C8017CAF736FDFF5F9C602EB47FDCD2614F7D8365
7B1B6B6B4B3852B03A548CBBD02CB0AFB278538B6339CD998260ECDDD372EA17
269C3D3A9559390204D853FB96501E9C281E69A0FC69EA6199A3AFD60446F58C
1A63EBBCF890DDE1181121565707C8911BBBF90CC138BEED80C01E3553CCFF6B
8490AF584100AF9C83759EDE3044AC71BCAD055EB13DEF6CBE4EBCAE4B083210
438F1E35D3B4AE21942C63B706AEDC4D8F10A0FA4D3EFBC9186056D7E0290AAB
EAE14C9CBEEB47E346D513C2705E2F06EC34C5822C621F219B2454BE1EAAD1CB
4B37902E6536CD83C5A6B700838048BC619A793A8A7F92E937989DACADA48CF8
FD02EE155C2D6F0D9E15F58F12EB09A85E16408643B5B5157FC703FA57D9D093
22940779625041F7FA38451B2B5A1C0E215FC8C4FBE81485249700F42E6325A2
7C9478BD2659BEBBD3C118AF60EF80F32A3BCD5668B952A74F2826244AA2D515
294DA3ADA235C10BDC0DA19F4DEEC58AC5FD84789019F6405D8AC87343352824
943A1ECCE57A0AF41DB7A1AA5CA1CBC2059E478F5744A674356721954D77CA17
3F81BE7F88B46716A36ABB9BDEA30FE67FB4F1019A569E341A585E58556A2581
C30454CACB9E1151247BC074466CB6AA76C808CA80EDF3D751B7925B89AAB67B
DF33AED5F0E2269F3F6577F69440CB74D3F1FD067CFF90B74FB87F294BB5B5C7
E8C593B6BEA10692B115C179A78F2C83D64E20C72C76EACD4AEED7F5C55A5CF0
E8B2ADB0232DE59E27E7727547825EFBCAE87F4A8361B5E9E467EFE9B59663FD
03F6D6940BD759D67BE871B096F2CAD8C895E46B9C8081B3182D04E5CBF8EB94
3B72CF43245AEE911F7775943E4081B357E99F9609919E3D00C3103D000ADF60
1454126400EC3D91D737C327A37DFA3274D36211DFF2D82BDA7AA57AB9E2F8E3
2A4998F7FEA3FAC9D2C021A7A5A79C9642C3035943C4A831D03FCB11F12038ED
D9A6D50547D7EB64487A898DFD79DE4100EE345E67469BDB803C40D54DFFF8A8
745081946ACFE9203A68024D078168DF055D66301BFF49A02B66FADF53829EB1
A19A0061C66ECBF941CD4ECB7A8699D6F112A4E787844776F9E2F22A56E4207E
E4D997126A24C66B12B5E6AC490ADEE453595B6EC6B1FD05FDCEAA00BDBC8C8E
2F263490F8F7ECE76C8425DAB73080F50BFDBBA2D33A58877EA74CB2E077810A
D4EDF2576A1BE7EB8BF6F8F6279CAE2207696F15DBEE6212A2B049A102467D4E
0CD6829B0B59E02DDF8AEE3ED63C496069DBD8FA9A0CFC2DBEFFEFBFDC41572D
217D5F518D7FEFC9B26C457399AE368F19BF727D77E985AAECCB76EAF2EC76CC
502FEFC0BA4969915F2452A594DB251CD45F4AE8DB28B24BBEDD4B812C636D16
7AD2F3321C9EB21B0CE88D7AE56803372351212E7B5DCC3E0B4557BE3C275DFD
656E7C76FB3A56E585F34D4A750A6CE06B00C2543C622AD0E6C6131695437087
E31C2377BCBA18FDB024DCB0CF6C8F905185E15515C54A13ECA61A8D261B3ABB
8088B44664266257039632E5D71F3467EFC5D0330314E758535CB82A72E8602D
2241F8781D73C0D727A8CC4B0DC967B4F90748727BA0411117A14C720CF122E3
8904F59A3AE3A0943DF647D9ED4B3D8E2FC6EE86EA2D15B945976CE58A92529F
707698CA42919C5D2C924D2E273E1DB6197E7A7AFB59810F7A54BF47B02BE3C9
CA347C18BC291C58EE6530BA4AF71ED13E1FC3F7CDE5A0F8E97BBF4B691E5224
0704D212B6E7A84CC75E00880C5A3AFFF25067A1E0B818DD9EFC69F269A26AEB
54FB064627298013082AE09FA8D7FA5BA40218539A691ED3689A3E5A0B59478B
29271861AC3039C217E9DF92540F41A60788B952738F1C0815906CB9878F6EA3
5FA30B1AF34EF12F337864336B0228C6D365CAFEC1B77104C8C00525BA765B0A
C79184692070069672A5E56FB8F6C5082164EAE2F05D61262A4455C10B3B1C53
5BE147E423A81477E7B7417803F546EE4E89E6070B6B78AA63F6DD5ACE0BA053
87CD0A22643F4CE9F65AB4B3D167CD2983B3121C99690ACD4101D8A2E4F409B6
2B26FB69C14B570A37D969BD3867221295D90C40EB9AE29FFFC089D72B141593
6408E05E5B9B544199EAC3823B2D7045BDEA1646E39517039BF9342196CA43BF
56DAE2767FBC5E58382984957A0B5AE3F1B8F349A8736F4DD4811CB8D037EEB6
A64A34ECA264A5D8185939E5C206ADAD15EF1EED81907D30321917E03C685E4B
11E83DA91D732090A234302893BE05C4E997CC3B79F16DAB3D93B3697FD5973E
2F7956DFB49DFFAB045CDFCCBDB627D39F7AF8DAB03C35E233D1F8FF18847C57
232C19543195A52EB67D40A10D71A41A7644AA0CAA742882BA6EB9E01100944B
D59BB7A60BB8C3C6BA080A234453136F3676D577F56E64DA1BBB83AC56E51C31
F799BC8C2D58696E570C0353A448199F66E351592B7E39D2F07ADA31A37195E4
AFD734A376F10DBD664E177102E0934214E0DE48C16410470CB7FEEFB2A8D3DA
DD4FBAAC62631F48BFEBA53D8A56B43F5E04D259868C5593AE161C58445CA242
D41F6CABEA4D76257B230C2D966C2B729538660A959AC3A19FA9D030F4B77084
CB4395C43C952B74394BCC1BB48D592421BEFFAD0ED472C5AF32EA92B57D9E83
F50D3A9664E373D898ACA46EBB381D37A483EDD1E575447E89EAEE9BDA2E7869
0B78E204D9904D8E4BAD9AC9D48E9FF3167746350BFE71553A373420E7090C33
DF9B92EFEE5D14B07BA8131EE36B236E2F5A0F86D0CBFAF84E3DBDF4E22D1158
A242CD10719D1CDB50D5671161B61F533BE10CF9971BDB262A16B8954EB25E2B
61EC91F1DEBF1828F85C7E9ED009CEFB9B59693FDFA1FACBD0936EDB36B61DE5
31D3C183E2141CCE4BD29366A9B3D87FB6F706C01F2EDDF325869632759ED8A2
F821911A39273CFF2B0AD2BA98594333CCC35683560D424424DD5BE64D064A1D
05AB5A8534D0565390B1FA1085233F81617CD8D471F78C92B5E97154B9761D4D
84943CC2883C980551B9E8F5EBF977BA06119C20CDDF79010B9B9970D58D4B4C
31EE5BD6BD1129663B3AFBF3A2AFAC72229B945DD2FBD118E7461AE6F2019ED9
12B293B870A7F7561A5934C6145ECEBDD536200488FA76955CE44C96C7B83966
ABDF2A73D45BA625EE66F888398870BD7B2682C9215F3E8ABB15CEC2033C8F12
B7DF47696C36270DD0C7D5CDEC589BC539A48DF982CC123F0FA34998EC08E4C6
71F771B65DD2E920BB04C6A0FA8CF97D55C40D15A8701B3F1B5A5DB0CD6539C3
D6C30FD078B789C1CB6707728B382B93357D63EB9F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.0: CMMI6 003.002
%%Title: CMMI6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI6 known{/CMMI6 findfont dup/UniqueID known{dup
/UniqueID get 5087381 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI6 def
/FontBBox {11 -250 1241 750 }readonly def
/UniqueID 5087381 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI6.) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 30 /phi put
dup 105 /i put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB83E8A2A6085DA11
61B1632328B94B21D3CBF2E7752D441A2C9A03F6681FDAB37C4B67D5857720F7
0C4BCEE266586738012A2237A85FCD0425DA7E8E8632543F5BD5D50F9DBAAE69
9E053AECA6027559DE42F7291EB381D866F1293107553809861D43508C6F2341
5E4FCC431AF4A9B3660386AE63E877DCF5E513D0D5702B98D58B34897FEE163A
75CD6F5A2196F91CE5060CA5E72F9C5F79D18F242EEE58135BFAB02D5CA430B6
D1B9A376849751A45E52577B1810C4F0C7F6C8196071D5B08FDB731C5384CCBF
03B460347E0CAC959E4A12620B6C2ED62E06A241D1637F418B5599A7FF3C1390
7AF66A00F7C31B4EDF249C56C268EC9D546CD0489DA51B734C8292CE7B3D9E30
71448C85ACC64FA99B2DEA91AA4CBCBBB9DE20833700AF96395DEEDA3FEB7D6E
D6E3BE4A62CBFA18BD0471C14F3A2FD025C88E8166A9830C5B5B94624A3D6482
D1A1D83805D0EDAC1C79EA858A523D9FA3356DF42BC01886E77F6AA6B04E4E3F
AD107D861FC626F0A439BC3F125D48649E5101BF79C71507FDACACBBB4C4335B
C41A5C15ADF1DF69E1D68C3EB9BE30BDD5385F81D26EC8F2F206C1C7032B9EB7
0392BBCA23B4693686AF8D2E1ACB2FBEE81D75667CD1DDB906BC5B675660ABA4
E63429F16623F20B6A040E4942107CCA26CF6C1F52DEED9EC7EB15BE4F18F2E3
9ABDEEAAEA9AC41E9F20C37C54B33F609F5835AE5A1EC9D674DC50FAFF6D3511
2198195590F62B3B8A6FC8C3431BB8895A2F910F0361062DE32CDA9A7F41E761
B09BD8545CAA2D7124B5688B54705AA52E4716E36C0303FEAD38E0510B3CB496
6C30B115C37E02043D47B4ED796C671E30360800EC13F0F0FF3E0DBF5A642396
EB0F39A9DAF0974678EA1D041F08BD73867065DA91B044EF2AB15FAA6546031E
189936C1FD302BCFBE55EAF369DBA4895DD0996BF7292762551A86C8A3604E9A
8AD29E38BF6FD40172051EBE7C694249F3378ED0139D37EEA3ADB66F3A80A1D9
9C3655F054CACE93BA4AD42DC78A03F42455ED1BD5C122F234F21ACEB8FEFF9E
3BFE0DB2DA6D368478299ED63912A234ADB1DCCF1E519AD20772B71F8522B5DB
24E9658BDC1333D76F07F63D81F7A51D12C445ABF698092A24E5E5C36A52206C
0C41F7DCA529BB0A4D146DB6B4B341459FC17FFA357CA5F93DBCF30B61374613
4846D619423BCAC59B7EB40C14C70ABD985754A0094C98350D01FE9FA371B0F4
38884690DC7700C49236EF68BD6E806E8937AD8B77648F552C0C907007465A76
1475BDD3FBE1CF69C706E703226471C249A3448F81C240ADBE4B5474216D0235
6B0816BB6935A2704E851E20C002F85B653BB0700915B358DDC168ED3FAE3D91
8280A5CA5C2708D622B03DC47A70E5FFCAD5A7C8D9AD563857BBEF92A3BDB588
8B5B55CC9B960F20CA4AEB598DA8488004DEDBC9671488011E836D9D8B6251BF
256D08E6F1808E9D498449DF1F18E48B310D561D4DD3146C2BA64D960E66447F
6DA8B07194E3BFAF662C00737BB7222B55A5CC206A1C46F252ACF93D2063BABE
2BAB874C01AEC438D3F86AE37C9D7FCE4077F5B5785E12C1E0B685134CE2E8A2
2E4DCDDAED2D53D13014E428FAAE22447763D4693E82600F850CA4A49E1ADC5D
C8DFC16E97B9F6164095CF7F31373B591F815621F45DFF77BFBF89EF60C9F50F
0C2FBBA4EA9602E197B9447FAB6AB57B19B1C801DAB66BF7D263F6572B9EEF88
E06744C1FE197B8EAA71E1EB67716B7CAB30C859A2D1B2DB95ECED02B83FBA32
E62F97EE4403FADEC936CC8DAA161F7B509B2723BA2B735572A80D7D087E6395
6A9D34D5963E3C6E37F307C66D1CE551D2F055BFCC7360FBE93ACAFDE2B1A849
37FD373F62BB23C1A2E3DF61C9452A8C995B03D44D6210A968C6293B4A3BE662
C7B0B59E6EF6D53FD293B2C290436B0C448E7D15A63533DE321643E53C85EF8B
060C434E46A736EA617EA00D185323460E77B95C49070B035194A2E7693C3B15
104ED7F56FCADABE49F27F9A576B354C574B5BAFFFC57FE9AF02FBD87B8874A1
24C53826659BEB1EC50446AC26EF3A95877ED3D81D33A8BC1BF7473FB9C11ABA
0F27B38EEBDF77D3D3EA63AE6022DB0D4F1125DF274B86EF0A4A263E108D6044
7A885F5E87362293A53F457CBA6C911D23653DA7CE4BB7D4FF4481AB97C0DD81
C13515F0E3BF8A7E8DE2CE69B25BA9C185D9BF31A65DD290B0D4FDF40B61E2D9
AF92BC6468B3F5AB5D5B88710C489ACC69198D697055B39AB3DE8B3733825C5E
6E763E2698574381A01352A7042A36EA96D17DD2EEEAFF04ABF7BF7D877B0FC7
B6BA51BA994D431F472B6EC4B4C327399576470A1773BCBAC61CDBF0F95DA6A5
0BE5239B7E9CD39E1E4D27EF6695D1FB56D4CA2C2370509547D6D01273CBE6E0
66A696C35D2D0282CB8C85D7B1C51453A0AD0BC80E1D183D11AA78879643D9D9
A3D0B2BD8EE3EDF29483CC5871426232A20CB058EEBDAAED85378B163425C270
B0F7BB46B7D1B89CF84E6A06791195FB17F11F34A2548FE424DE10E376B39A2F
DD9B0BA2F2FDF3ED4AACBD0D60E67C0749D6DCBDE6E79041398DF3FC8D9B6CFC
693B870683CC425C52705902DFD324E157C9829F25B14A057AA92AFA17F156FB
0BA949698EAA0657B03D9538288D887959EF24A427EE7EDE47F304A1A6A715FA
2966273831B5B3A9C11021C153E67A73FA606FE3233C3DB217404C6AED6A4C59
DD4C2A98B31AF5604D8DE8354448B4CEC66022E756B0056CD32E9B002ADC712C
0545C2C16D9457E271D98A4ED7DDE01BBD1856F5C3DA28794D2C7951FE2FE6D9
18643CEEC41CA4A3464D3D3A102653CD6EAADA59CDD44918523B8811C2ECCABA
AC0D188F5E07B37AFD56006B10B32EDD179F4DA693EEBF4DF5425D996585F21C
8780A4D23D24FB0618C12DE65CAD42A0138E28A100257978EDCAD168C55C6F07
78A067F0299890356C2A184820A554FB07448395ECE36C45211757552E288ED3
7DFE46CB92EB2070442AFC85864A45000C4854D728096AD3D4C552EFC26DB6B9
C340358451B50AF9F1B35C2E32D495DE85B5848D78940270DEFC07A14D960730
878B5B55916FB40FD805116C9C2AC8C6D4645DA67A978F1C6FE705EC188DBF7B
FE7AD6769F2EEC4A9B05306D5BCD6EC3A240D6A29ED07D1D82E697DC8CC391AA
015DB6BCD1DA5C9A5A7BE3C5936681215E859E9837027D108A54F42AB24E38C2
4A7D8CF3264AE049D4B1AF48BBC564BCC88AF19D37DD81CCC431D0C554DF29A6
94ABDF8126EE4FE1DFB78559B9BF36FAFEC9791049C865694F9E2FFB7A308FEB
EF0195FAA6BFE7A081B65C5125623903828372F117EE17E588B2FA26DC9AE37D
9A6F0043C019624D3D87AFDB4B90C46AEA78919CEF5D7ACEE316F30EA0229742
55E02E0E2533CAD78CE9BD6E0260A695D776ABA229D89CF9BEA92CE0397821A8
830A557021B3B90CE0B07A4B34C24337FA3FA4A3728B6E013BA01071CA7FA667
6FFB4BA3A28B5D5614ACD4E80E00938C2589CC6CF885A260AF7589240BF8987B
20A19FDAC73FAEEDD93EBCB3D46F735214164AFAF1A7828FE96E2BF7CE1EA46E
FC1FC4527A0ADF2B81CA51E3D96F3E786511AF00FDDD9764CD3178362CF9DEE5
F05D100EC21A301F40FEFC3EF05AFEC140A9466AE68FCFD6CAC1A143BAF2B7BF
D0DF808F0CF87FE2399CD9D2DD424227CA7D4073ED002CD555FBE8057A797B60
313D18ECDD779FA7289D4E7BF82D95A7535CE3F0F4164AF239AC666653736654
C13E436B526EC5A1DC97E1D85C4EB563C7061AE1E81F0B38BC45B17C15FDB0DA
E5F6332721A925D4DD5A97BFF3E3F11D4F4F43BAE4E73A294D314527397F03CE
AFD12DDF9D07DAD8D6C8EFAFC2F52E20FBF62026810C0C31A1EF71FBD612654D
C68B7A24112F0ABDD20EFF3DADBE447AF9CE568F873ACE72B63283CB26B89BED
4B3315F26084453B1EB0877065A76E7B704B27F93DBEB365574A78E92FDB4B82
D6ED91A1728F571FC9CAB636A6E81D0C1C4F5E3F6F4574B6EED48BB61EFDDC80
1831E2AB9327B37881F0CA5D5265575F210BF4BCD8653B4193F74E3FF65028F9
2968B8127C68CA2919DDF529EC882EE99901146CA629A07B4DC59E7868DBE083
6E546C5769655EF6628FE2EA78AC891D130108192053D5056A7BD06C09592AF9
6310B3586A2609DB94CB0079550358F5547B9FBB2B77917A327EFE3F972C7263
54076627B4DD74638C3105FB25DA246484799D5326EE80503F18672B893289CB
1FFF8D3F662FB33E93025D86803551A8A1DE363D1534BFA3EF968871B19FB189
DAD841C177E2AC98B6B69A78048221C5EBBBB86511939D3A9963B3BF021185AB
0B26CA7D0A779DC2F7693C7E48286BD60EE46615E31B93FB0E6992AE20C792A4
72AD6FFAD6682D0F606807D7AE63A6280B5967FAB889DCDF0F76347CE302FAED
A59E1B1AB785D9D0ED695A0D05DD3DF0EF0B275AFCF9EC7031E1357E99A3DB85
B4D137567875F7580E2BEC96B08C97ECB40876000B610E0BFE81E7884C9BBAE6
6BE9C2C612475396BC10EC7FFBD1118A7971FE1971DFD0CB677ECA65DD837B5E
C7D36FE9F20A15A941F1E77C11093C902DF5B7639580B9C0E4AAD13518E1901C
1162FA095F301848770C6C618E371A0AC3463D0D94221EFCC0884B21300194B5
97E03BCD5C4878CEBF352EDD1D2173B56C9B6A08BF3F33419DF226E1633CC5CA
A88A57AA85E21657569916E9B4B79E51B5535A57B2D6FA3EED1D0AA32DC0165B
12F8F5A681040B456D8DF175AD6053A2954F327F4EB4CD453A056FB1701242C2
59755058640C62632C764E002CE928E6B908BB137C28630A3CDBC7C34CF2B643
FFAFF20E345A86F31756C78A8EE2B9B1C5DAB2C863B29A44190770FD90BC6AED
0C25942BBD6A370C21650947B49AC8EB6825BE65DEFAFDDA32007754DFE0273F
B995B8986E505F95E58A3F8873545DDA6F3FFAADE992F3FF7B2DAB76D663280E
CF2BA18BC8871A7C361AA3600B192948CB918FEB0F2900AF2BCF169576828325
449CBF0C7AEDC299FCBB061F491469B9ED1D56771A03F9F202550E17FDB15B51
4772B2F06E6AABA4027D13E8730999532DB2475630D2F8EB98242E36F5B45A94
2D8083014B63A806BB9A01906143482C614B5CFBE8C5354A3F2438B2160F6DC0
81AFCEB201EC67F66DC5808C907A3C6CB664F444D24095D9A11D4978A7B57037
87C67552FD59F5713D0FE03462F9A1A323BB3EFF0AAD61B1792CB109CA9AE4D4
D7F7FBD3FB91258DCFFB4634669FA13E03C0AF699165311CBF37D24378022787
87D1320ECF878F859149B2F994E700A32CB7253297AC58753E4583A08A1F83D5
CBFF10F2D26D71CDB20E1C69A666E9C4D23BB0E6BF1097FBBB204EB736E61FF0
C3FDE1986938F8099694B9F998B3C735770FF21F73B1A6B750498BFD21184F11
5E6AF0F1FBB08EAD436C4AADE1E6B815F5E58988C113B4B2335A340798BFB201
40586D0BCD6AF5A08CE9AA042910197F47D98CBB4411A6D435A46F46B3964F85
032D7F8D880732276A8FD24DA772F642F06C9F3EB4C9090AE4A3AAE67D8768A1
7B2A57E15B7FC626450372F40E3EE28D8D997CCC8CC89C644461D1110740407E
F6D884A0503E05AF830994AD0CEEA924D935749F6EE9F2DD65A58ECD59229918
A303C90E19E9C411FAF24AD5E9B786178F8182692CDD508A4755123B4A594AF1
A8E7287456C1CE2CA485CF4CF9DEE5238AA7328DA204816F98B7EF49EDB30875
3CF8C48E0465BFFA8F2A1CFB6A8F165B63CC80F54C669D02BFD9A0EA0FDE2B40
D69F0101AE4D2C10185AB10953019FE7D373BF40C2F6D4E36693F118866D1267
12BA7987ED4313E8635DA02A4FC1F7815105F8EDFE8004A8801CC1AFA8D123FD
1768A6C39E838BD489C6BEFFD3BDF650DF48D5F8D99DD5A2E8AD235F2CAE8BC9
C13AE9B214CF3FBFAC7BDFA54CB6E675273330608BD35600775FFB2A96FF648E
DF55A78B43CF54CABC0DA8D574CC5C5C62E9D658EC62035EA5028767749E48D5
658212BD39C7E76ED0C6F3E0A1D138A0DB8BE574987AF1E43070F1F12C560009
F48993FAC935EB56A5793BA13C28293601D268B4880F9BC33D553FF3B6A7900D
37900BD3B4B558C84BBAB09B4BC2B14D32E49596DA090E586E28D560903B9744
7D014EF2A6AC4F711A025DBBC841F1C1C93BA1F8327DFE33C803A0993050D590
C7AE262261DB7D04B9DD91F89927161A69E14BB2A48D29578410E312A4793101
B6CD65B298988AB798F45B76E1F58BE24DB207C7E07014E17525B436D41FDB28
D1072CBEB526E17C72DDA00ECDD06394940DEE8BD02CD3C81BFD12BE0568A459
0F53010A0655942C932905FEE87183CE357887E2ED286DC1E89F2F401CDDDFA9
B418F218D4115043892882C09F2E3749D4671E75AB1AD01C78F59FE3F54276D2
A91512C21C68180CCC0E147E834002D7799FF393842CE88BEA714672E1952C9F
7CEF2FD0115B0E292079909A7775769341A7888CE6063537ACFF225B4F396972
41BF46C599D278906F3BCFF81DF941BF5888DE8A53CB0A2D71610CDCDCC1760A
7844F89FCBB892AEA853CF5D967648995559EFE852C95D2EFDA2CF063500F88D
2C83B615618831267BD8F5438DC53C6433CE7347E9C55E103B450EBED6229219
20E979C00B0B9D86345FC3A8EA2B049B7E148A7AA1C859AFE93381DA74CA578F
8FAAB28175D5B57F6A74F9869B2F530009E953913C6925D0045CB2E817A17742
3C5B7574E9BF3BA7B769C161C2496EA2D346B4E19E434120FE92A0ED3F4A9ACC
A8BFE55F04D17DF035D01FC0B06182D8C27B6D32F36551B9AA56D61FB6A34254
D0DF918C6716D8D05B973C8BAD5AD52C06EF3C6503D4E0F7F791511C79AE74E4
4B707612149D583C5D96E534CB45F1E7CA5B23642B1BDBC881FD8E4F66CCEE96
7CC0509B5CFB0B3596682A81E682DAF6AE58F605FD7A1F414F62572298AD8491
B76D0A23B4AC731FB8E7682F506B5CC02F7029827FFD866EF4DBF56E07E7743A
D42CE65B38EBDEA193CE5B172E87DC88452C3DE192E363EB9DBEC4EC65F53002
BE9E94180F73B53CE1E8EE9333DC86DF5FB2561FA1F9B2511962CBEFACA739CC
38A286651CEFBF451FF6568CFFBA8AA68555181147C1CDBA18C4F5C77BA8548D
2B1BA37E05EAF7F69879C3ECBD02783028CB1A8649842EB71023F89CEB36CEEF
A9B04E9ECB0577536B88ECE7C1D81B0D6D5A478F8E92DF83D194759437088D7B
E93C6AFD0CC6D568E60E2F1265A6613F97A6C4068C8EEBA70F6CC4E88A80F65D
EA7B498395390A74BA57221B86611D3EE5DC4632F139CA8A15E5B9D2DC97088D
7CC65197CD93F4803BE4246394F40EDC2CB4904BC273C597F13C8DC680245A3F
F1AF2D7BCE5D69E9CFC81E5E9F46927C5F55C719AFDB2CB1AF2E4D55B0E3ACA8
6BBBCF253CCFF8F02B8542F296CED0EB8A06A88549DC959E22C3D6C48F310452
22B32C44B046A61A4F7F8AED613DCD3C464DB2280D56E517CFD16DC32C83EACC
D3E936D2F3A883B265444D818393E30EE3AA59E6FA73DDC421F5A0FC8442F89D
CCE98189ECADC080F1973E14012C2B87F6A8289D7E1E24B79433A73BE771A305
ACFE83195EFA1EAC827EDBDDA678979C87FAA5768355728EF195A9456C7098D0
9D501CC27070F27AA426B145218C9315AFEE5B4BB37010E988DF32E2D7CBB3F9
F236403EC9325531A6CF39B45B12328C9EDCC6AF76A0DF223531C12CDEC349D2
325D6FAAC3C41E378245A0E017C3352B9CB7F2A1E4AA3D9A44E39D5BCD4C4FB8
7316BC327ABA5D5F5FF14BFAABD822D9433F0FC61DD06BF1493BFD06A184A94E
7EC0C67DAF6DD7825A6CBD56048BE3943949B1CC8EACE24367EB14A7D28DAC9A
22E2DF55C42D244D9DB407A7FFF1BAD2948665E1E90FC92AF5EFE248BC07056F
5352F11301DBADA209D66E6B7272ADCF9C9C7B4BC22FB3F9E0A93AF57FC08663
6A1604265B534680AB860FF5F2FF702423C0EB6E56E0E7DD0D816C25DC7B7CE0
73E2EBEC74AF763000A262532D1B24CAA8B473CC05A7CD120D9F6B2447A38930
3C84FD6466918B9F72C88E51B17B6D8F69AA1D88240826F6D1D9FA162B912654
16CC2075CE1845D362E4EB7F61687D42BE83211DCAB3501052E2DD2AA5415314
6A9E721428C5CC1E86F68291BE07DF7C29EA789F38CE91D5DEC06E1852FC3FF1
E48BC962C2FA3CFA690C03B298F904A790A066ABBA69A2087DD48DC0EAB3B9AE
DB64380C0D4697C04C84CBE946AE568F6B91A81C89C4000E61B7C40FD203C626
9CE89F5ACAA9013CECEE71B83C8D7E5387EF50F80200C69A7065FD4A7F5F8C56
858CC7BF7C849E4E7F11D5B6F3A0C4553D6898E97F7338833DB53927E11968CB
6F1E05D6263EBC6D99094530DD46C5DCD6F5FF03F5CBA4CCCF987C9ED9C70A65
CB50295F25C7941668645F49160A5EDB3B9754E705F18A2569F67BF88CAF0BBD
CC9D5847BD99235513981E193A59463D15031185489FFBC120CAACAC0DD1C04A
7A8FBB1D98C96B497B458E5CA2D38008C8C88E0B89991B7E14F7B51AF2E4259C
471AA42D3B38857223FE511D0AA35A84B1DFF560CA3F6E7E9AF9EC0C82042111
5F4EFD6A7C70A97973DEFF0DC53324081BF1E62AD9B5EEB2112FB1AF85BAE40A
0958B3116032B879B4C9B379C77B942F2582368BD0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY6
%!PS-AdobeFont-1.0: CMSY6 003.002
%%Title: CMSY6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY6 known{/CMSY6 findfont dup/UniqueID known{dup
/UniqueID get 5096647 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY6 def
/FontBBox {-4 -948 1329 786 }readonly def
/UniqueID 5096647 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY6.) readonly def
/FullName (CMSY6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D6AE353EAB9DBA0D
4335868937E3A2D0F9C8A4FBEAE138AE56EF84665582DDEF7B546714518D224A
F91D19409EC600924626D79F58E272E3657E631C06412F9D42732B6AE0A93D81
E2B13A81C76CC37FCA6DB35A1C6A572EFFEC7E1581C57B1D22EAE9C407771F40
71D002A06A6AC249FCB7605C902A76EB298B05E39D543A63332A91B8A1ACE05B
F902540FEC1024680B8D5857E4931D00781747C87ADCC45430B5462EA480BE50
D07C5C9EA0D8D6447324434CF0D637BB13037B6E1C48F191C52CF2B9511690B5
405280D5C825BD376EF12429837CD44BEA223DC8E199D8F85856C0FD551471CA
B30481FAE99B71FAA56B639F549F449F2CA6F5450AADEAD4C09595A7A8530D12
B23E012978225E112D23BD1D48DB097994A9D5EC707216D2BF5DF8B69E66ADBF
DBDA4737737F51EB7A38A4207BB46456A8117067748659D654B1D14849F14920
E57462ECFF602A181700A346C1E95131C6F1C66132915FFD999FD4105AFFE7D6
7DA46DFCC4FE53265B14D7326F5A44A3E97902CCB106AE99ED6434AA9EEE7E6F
60B8034EF80DF885FC63DFACB0AD1C00BE56F79B1AD41B065C59A35073B450F3
7E6BC7B90C9D9337F9636943ED701398E6886947E126F1E12D74C5E4B5CF06EA
E60F9B121B9B15E6752B127CCB9C26017A84BE6DD918AFE46DBF27BC06E66AD9
830BF2D6CA9E24A0199DD3E732405F3210C97C9BD21545B5E4DC10E17C1A2C71
851ED2B272055831A6F95864137C218E555B054BE3616820FE671E5BC08E7A48
D683ACDB91E05F469C0C8919D71027E179F4911E878F8D13F999C63C4EC2C21D
ADE1A11979B539C4C5746AA157A4EB4A7A153BC5D966197A7FF6A2DA3FDB161A
EF43C2D906C617868617E72163D5B0BC29C36A60867C120A02E08264231FD46C
1D3B62622A05129188D818E2AE83FB2770DF1D466CA38A49D15F9056BB7AB8BF
D7DEB2E3B3A8157B59D138787B21CE3B3A456E230CFEC1374AC66B7DBBE788FD
5182DA23264093CEF60D5BB0073AEDB68A61ECF1C69669244A1FA0CBA44DB83F
352AEE6012082B8A3FD62F4497B1BE0E4FF77FF94BF221212D63BC1E35B9758F
2D7F8FA002751DC0380AB954331E9AABA6C122F8F3D7E69CE8A6B359184F0531
6B158ACF34C64C32F4671D430820B36C9A9397E9C877D734B17C3BBD8A88CE2B
9F96D7AC5B8D55415E942D6C05392D03DAE53449F8FBE2225C91F228704BE9A1
ECC568FB2E90C73F2F7AFA62859C35F0FB26756DE719BEA5A3EB81A6481507F1
813CD1680EBFCF612FD9D3AA4B90688521446FABD5C54CAFE7B879F24B54449D
2B30738B137B5E212B34BC5384BC2216A5D13F761D6E13A043DB2AABC0276705
5C80CA394A8179D60DCA4651CE8B0A477165FF48A31BEC6B7C0852C9D72E11BE
FEC5E4B984DFDE90218C105999E070FC83F1716D13389B5EEAE3F26C82FE9A7D
3C67A98027D15DAD791348A21DD922C71145D287C7EA83B225377744BBB0082C
22FD44E1B0DF60956DB9C4790F4E2F81C477DD4CA9F4BBB4287914EBBB4F6E36
976C9E573496A2311E5C7677FBC4BB755B8BF925F291DE0442FBB8921402A487
ECF23EC556C3FD66158727B10B74C778FA91EC16629F6E949624D265FA6FDF1F
772E965A2C30C80AEEDC4A1867AE3D6D116BCE0F96D1A0C5138F294CC7C2AD72
8BE152B314E26422FA2DDDFA89A054CEFC6607D932FACB035FC9FD9959C4A468
CAC0F4DD41DFB83297EFFE36C352CA0A6B1485BF8433522BBBCCF9C73FB7334D
1CFC92348F91C4D0EAD90B22BAC6B27D21CDF5AE65C056BDE3B30424F76C8EFE
D7CDBC854B13EAEE0485CC348AC52F5345B7545B4FFC60B6E7CEF8D32354B233
8DF503A03F5201EC012AA67157F4A47B902D269A060A5B8E10A37CA7CAAFD417
1A13EED9533BD4A6E8845D7D236CB254D40930C273EA4372E0B13912B2CE9261
275D51D202D461FD69AE352E95F72D61683267D4951BB602A0BACEAFF9516F3A
C30EFFF3ACC08AD374A730287B148FE8E168089D239E1084E0F7D83CB9815031
5428874FA4640E1C216514AA16C74BD2B9A95EFD7B6B0C575A5D5B3AD1086CE7
E8EEE33490CDCF2E3FBAEDC984FE53D033987580E75E74E455E44496E186349A
DE4B5125F69BF79936565986B3D91E6A25CE6E1C4527FE22580A39805A91BF6B
90EFC8AD31FBA71FCC90EA04875B5A7ED05BA2FFD1C04774E1ECE84B4105ABBA
798C339FB61ABF75C6FD3F24BC775A7FDBDD87BACCB9A86B4D928917CA62C0B8
56343CAE0051A1172E7F234001A5FAA947CAF382FBF23E57F1144425713423E4
4FC1AE1D096D10D6FECAA6A9186B0D519F51D06CC976A65A37E9219492E6218A
FE9F99700C0D0D18BC48632268DA0F0CC24BE660E30645E7F63B0AD49CCA26EA
CEDE4DED685DBD38F5C4BB6AD6CDFEBED1B14A456C27C448C91CBF6337FB3632
7B9A565874F9849FC5E22C5A0437AF29E2B7FA405CF6B7AFEF66AE7449E89746
66ED2D4C15A36C45C0F64E6F185B808FC788984C230B4BA63204B38C309F2DE2
2937A92C184077F5252C9D6171EC6378273C32B61CF65E4DC124B321A4049294
BB6CDD064D4E07605DA5FFB7B3B0A55A09D26C8624F03D8C197885BFF0A20B77
257637447F628A4A642F6F92019F9ECA5B2DBCEDA63C05E5258C9DF131EDD1B2
B4B04E7A5441035163BC2769B79C89ECFDF071E3517C59A45C9E97800724E1F5
FDF504E2798FA9074A37B210B1C24DCC0B78263E2297ECA31D5C258BDD92D2DD
8C53DD3B3BC3835E5AF52311EF0AACD6DCD159C45743B1AE7EE5A0111DCC9193
441FB81F945D219DFF26BF50D80606DD3392CE941242CBAEA45077FBE6AD78E3
0DF4FA54CC33CAC27A337FF307F14E60D1FA48FB8368E307441D6811676CFD38
094A558CBF0B92503014BB169E345C27C74543CDA9E8134F85AA0DCE45EAF612
1AB1D86FFB5E13CBDE8E0F68B19E30D0D9F5F0A3EF2A84AEE4D7F1F63A045297
3F5C3080F313B32066E0C209C2708636C33A6531F1A483F3AFDFEA62305EF41E
C55594660133146B24184070B87C22EE5B80D66C409076D733245FD100E936D4
E844D8A15CF45C0CD6AB04F3B5FCB0BC7B1517BAF21CED4D6CCC3F19D21BABC5
FFA9768D77A41BC3F5C4595D868F2FCA88D6E41558FA5A70FB562E4EB22651A3
886F0ED1B46BFFF297A28ED67BAA28A1302BC866AA7A73418BADE0870872CE0A
305A5E46BE0CF6B5794539B8509F1E2DB4E40124D72201589BC4B55ABA2F5C40
E167175C7F7378203C949B8967E8CCC40F44A2D1D555A4273733874265542C0A
3C47FF7144C4DB276320150FD5CF453A505BD3BC1E98738A1CBE175574037D47
8EF9F80622F57DF4DAB8FB13004ED1DBBFB4664F8D7ADCCBD529B22235740EB1
216799B2D8CEC7CC4D16D8273B6AEEA427D480AA6E3C463F46763864856713DB
05307CE674714CAC8351410627B8D1087155F3788E744158F3428A767CDC9769
CFBE28A30D635D7C4FC44E43E7F13128A867389FD66CFAE939AE2745055BE71A
AA7A7817E24D38773771C77328F4A755C872AA977C062A3BF7EBCD6DEBC7746E
70346293A661684D3988A5D0B29860E6789FA8911E0C0749ADCB9A6B053B0E31
3D490B9A2982CFC167001648FDF96D040BEFDB75A4EB90E2974927BF38F10E78
17FFB9DF2A65CF56C1F63544662CEA0E88A5141F990DF6B5DA79CEB5B4744083
C4697EB37422BF120332AB934D292CE8A3624E2C8FE6862C2211254558459BAB
D8F1D8C76C604098701163703FAED0BB298396C86A0427106C007A7CDBB0AC8E
35F39B240F8D9D43C1BCECAB622C02E721A323383973B61DB81115E3552E4260
9F252F18E01C1EA2B0A1DED4BA50A5822D10AC7ABD664C460A4022BA910804E2
2094A3AE0F2AE375FB22CBD35CE9C2542C240A79BC6A79F1135E58985837E1CC
1E5D6666BC5D61FE6EF590316F9D1E80C42B9A7B6106D8B7F575447AACBB2660
2C96D7F024FFE3292611E82CFE62D95646B92CEF6F03EEFCB3F6950A22B0997E
52C38B55B77C2EE7A4D047F27ADEC6BF0BC639589FD0D1E0A47C948AB5BADA43
9846CBB5B1CE53E96622B59133303AA0F559A481E50382A2A38C98C1A56D9AD1
1668FDDBB1FE8068DCE68E5DA13C2D9918D1FEC7F69A6DDD3A29E31A57B7BDDA
EAC616202162DCC7B9DC52AF821A9C1D2D7F860A2F294904A55499432C7098CA
BF79B1B0A1527B99A4C57673AF54297BA822AF200FFBDEC475158AD6ECB55F87
555012ACFBDD0EA527CB5793CA7CACE2FD956F30D7A8AC7F6A98979BE4BD744F
BB84A87668E3DE62A814B92D3139981200D5ADA86C5D733CF5107DF6CB5C999F
F6F63ABEBC9694F0F67EC632BA8C58E715D92FD6BDD056F29753BCC3E54B0A7E
63EC33F7A29740EF0D8351B5897B126FB6C33E9A33CC83DAB91691690B8B9598
FD3F397FAD45555CF5FB9CD80879A0CAC1CD8E8D536F05134B21FA4065452DE4
BC8F63C82A3C34A01D00F4BB254F2AD7F6171EFFF6D7BE1213C9456AB383C568
BEC17694C545B98E8AD734D0522FEC92EB3182DDDAC54740AD352E7645D08B4D
CB4DA9B381D36C920C77869619855B4CF730E590B0405CD25884D6DB4D49F1E3
D79EC4D0489514359CABED492BD751104091A661A510F268EC681F818780F304
D960A15E583F354DD574767B860C57CC9CCA991E710576C626EA909C6677057A
C409AEE846B4D5C0535F849F33470FA395CCF5C05CBB9A1FB62CF656F7A2AA42
34730F786153A9856C337112F6A555A70EFA76404E2B88DA2DB91E8A2BC5A05C
CC339DCA364A87738B60497CB790EF16875CBC506695DC7D70C6ACCDB2A00555
3877A013482D55281C83BB630CB3EFB0657E5490176CF23420B97265B22B4CFE
1DF9E0B294F064F5160540EF3A452641C82E347A96514E4063A7FF16832736A8
6F21F6881E269CA09FB66DF37CAE7FF46D6B9AE42B6396EBF9A7A06453A81EBD
808B047421B0F88F62B3FF217542FBDA872D03A476FBC7C0D658C03AF70ABB40
03F1A3027E0FE186A22AD461835877ECF843C0E8B8340306092FBC5E91783A48
E010EBD29F114BC273BDC53D2C94275F8956A74561813AA6C2D896CB3F6E13E3
30F6C230C00917A40EC6F4689B65BEE32F5722BB1D1147585AB3B3D2D5EB8273
CBE30D1C6CA1BCC4BEA9B87A014E7ED3CE53D13ACC8D426267CD3BFB8497E1DC
C51CEB14F9CFB4D4BC9D6EA5A49DC3871DE59C89F855F079299F45D363F78634
493829329E3F370D117DEAA18E7A6989C515667C2229779B9A5494DF0B4109E7
71D79D379FA7B408A4675FA3DE17ED0ED632F9A443527CDA8E960411AD4070EE
173ABBFAF9101BE92BE59707F98419503A85AC58B949E8595D66D7B13B8FD4EF
11B28FCB5955C5F147BD7FA141AE0CA2ABCB1CAF82FE22D3281852205087CF45
549F4D5B47F52AF50E8F6FA0AEC0F95FD0B1EBDCF965BC8A924CE0F4598AC546
C15CEE4EDE7E6DD0E5FEC3A531B944CEA406DBEE21C4CF3384A79D0D5CD51BD8
AA5B8B1FC987AEB57E86D3C6FDFADF998A6D6043449FA5B88BB2DCBF2945A513
AD7ECD01B39BE46A577437E1774C3FEA176287C51ACCA15909E987B5AC2CA664
709AA5605EA89A8DCE6B4014CFA781E822E8B05F377BD0187D5EAA0585A98E2D
6726C471578295D824D1FBFE89F04A67F1A360D799CDF92C1218F29C24DE22CB
C6B625D044404C22C89C433715BD77D0BF171030BA84E292B7A81E2FD99D4E67
BA702C2EFA11D4461D833E74E97C9E295C6D170DB6BD73D615D03E678B0296C0
F8BF99321767684127625942B4C3241BD0608460C81D97FA658BC179917B5065
74A4D1F729CEB1D51C82F9C90F0C712917AC482D413ED7CAAFD545508652DACC
1A03842E354F734C5FCEC8C7BEA4C69B066DBC83BFAA473D0A632DA2CEDF20B7
6C7C83B4AE2AF7E05AA2C081BB6870AE38848F3870DD62C7D56EF1CCDD4BA3B0
32C61ABE629BBC464BBAB06AA0202772C16D82427ABAB4830ACEA267B0109A81
BA5D832731D1E9C9F0552BEF7A9B7AAA73760C6A09B910009BA9D93F1A56298B
A43A32D43CAA3988643DE373FF47C176CE92D7931601F0034E6CC303876498AC
026BB32D2F656A3541815697CBA2B6D527B69816161B2E13171E073D7CD85435
3D32708391F63D592B71D98805CD19978C2BAF780CB124372EEA0A3DAB537683
DC74F9E9EF98843F170FB086AEFD526CB81A7CC88046C52E1E56EB40F6F5C75A
FE9D5ADE49E82078858072F68BCD02487EBAF4E3F7F309628C1FDCD4B01F7D00
E1AE0A7CD3455953FFC77EEDCC5B5ECB1FA583064EC17132A3C12C0153C4B87D
AA57FF73AD33C22C81C545F0593DC7EF438FF7A5F76A04E52848E00CF2C8CB06
F295B1CD3BDB1D9E4EDD765D3753EA8DB76DAACAD75CEAC866FC4CA41501200F
F12998E8DA573786AA9A7232287A6D19A12536026BA4423EF0B6D81D38BDCD9D
2BEF15BCF32824F8EE802B461F52BD926A5BEB2E6CB31AF83E98E849D4339FFF
95419941B12D2F3B76CCD34D6B78B91BDFA5DB4D4879501DF3E514A5EA8F1713
E96330C5B4F1B7BA42D42F05E229FC303AE00E954A81F9BD43016F5930A0C490
6C753157E4355F6ED3C5D1963779EB27402522B5E9D459206B3A06E594DF198B
785F96B96E13045594EB42EF4A8BFE0DFCB4C5A2DA9594431FBE72A5AE18991A
36FEB5FD9E8B238B3A095939B6ECAF5644BCE7DFFD8EA3E723F66B305F142B71
B26F34E0538E4B58C4B5984883C6B08F3D1F596B56578FFB0EDFFE3F95E3B6AB
63CEFA183A5A49F07F0F7559994F56D7305139D06AC8DF9466E715D90AECB1E2
C35E3CD3F387579B3C9CA6F5BD741A7A5D7B63FC0130AF374124DC8C6AFA4FAC
E40BD5923FE889E87126FB22C1AC4FFBD351F884D70803BBE1BD0D40D3CDA0DA
F6984C373D3174358BC41C8DD4A215283ECCBC24F345FE65E316F24940198A6C
3B5483129706AEB60D6C0CCE0DF9C130593475C72A92662A323EA5B689E5AD0F
C949536875C37AA2517281A36A1C1D5650AC96E0CC00C03266E279B54232A1E6
E6697196A4270E1DC794D8DBDF0690372AE19121B85FFD357E965228C66BBE6B
D2E55533F7A1BF30B2EABBAC98CE35C619556CF9F0A522E8EFE4BE3EC61FDFE4
E364608963C928AA8B302B1636DE15C83711C8FA060C5BBB1BCB8E02215A4F4D
560DBC4A235F6F07EFD20ABAFEDE0795AA3932556D6AE3F6EB8FD0C1C509FAA2
55CCC2703661C9F48233B429F020E01C1F3B8090D331C3B925DD5D1CF9D19F95
6B192C593225B5186109D3E6636E87BA6F24EFEACD1F06A29DB1D1F4DE0D0253
87641AA4A1113755D0DDA6EE4234CD9AF550DF63A46FC6F698E623BBF6F05278
858904B415033C1A33B7770D99247815E2A8F1216EB42EF9742EEB4E1D90EC3E
F2C0661DFDD996CE1FD66F946B9D4FFADF86861CF8EDCD570CB400D181697747
83F38B92B1803874C24AF99C66E5F966B0E72B725FFBC6172341596D8AE51C3C
4676A65E4D32F499FB1ED170554DA7AFD79DE5953988516A8B2B123FA207BC49
D80645DFB16A79549BD5E41606D80424DBFD6F5BA1DF0EC271C596EBB4FD0B84
DC5EEC45C3FF598241368442A3FB06B460C7D46678069011FFAA3072402D4DD2
3DA6139A548FA99A68AC61134087071ED8B4A37A0A8A1A3B48A2A8CCAA351D75
1828BA7DD5B7758A43F98F4D449ECB58B20B26C40B35AC82623961CD892B5DE3
777908625E1A91DDE62DEBB2EE5EA3CAD7E089F421DF613D976660D547CCB02B
3C6B01F009299124A78E46BDFFC3F2497C435678B4DFF0E94094B0DD3B930E62
909CED0E31BE64C98755D78874558FFBF20A9CB007FABA7E405259E681AFEEE6
3B5ED57F935F48031D298898D63C57EC31E30AD0B03C9AE6A26D54A9CEE0F8D1
9D3EC2644F19740405E4C7E164BCB18F952A2932521B06D2A75B5C88156681D3
FBF2E56BE19DB289A417ABC9EF5F2C2F51CE4E7F82B0A5DC8A9DFD546548836B
7245060B35EC39027174090A2E19DFA781D1DCCF39FD8B88955157A9223EBB48
C0DD363200C1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS12
%!PS-AdobeFont-1.0: CMSS12 003.002
%%Title: CMSS12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS12 known{/CMSS12 findfont dup/UniqueID known{dup
/UniqueID get 5000804 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS12 def
/FontBBox {-62 -251 978 758 }readonly def
/UniqueID 5000804 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS12.) readonly def
/FullName (CMSS12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 83 /S put
dup 85 /U put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C3B9175168F5F1A9
C0DF3159598E2D7266342CEF20B1D7A2FE16E14791B4E287FF321F9B1FFA3BC3
63E7D638862C1C1FB094496395B6EBB00CF22CFC36F7A6BB2F48002F91371910
3547AC863B33E91359F073CFC9B2D475549B52D89F5E3931E2D26A834FB89F85
35B24D1CE098ACA855B0AF248C1E878F3648CA2CFA03712F69DF578ED9C1C8EA
69D46462BCA02370D9A2FD09D7F14FD5FE961EA2094DD46CF91193B32ACF647D
B12977B832AAC3C53F013E784682EB12261ADFEC0872E9CD5923866508337457
7F0CE15A46C9A92F0DAE6EFE3B93DFCEDC0CA1ACE8FC02DC646CD01A01F7DA6D
608F5CE76754CA4A4AB5231D232D50DFE662E538640F30ADFC2BBB3588E8C300
142C0A0008B34677CE1F880293D9800792867FFE1B4FA14EF495824417015378
F78191FF7D7AA7994EF153BAD5F3A07D851131A6998B1895529999F8125CDD7D
86B59EB003502D90EC7BDCE68D373DE9612D22D3B03A8803283D487733F00E00
28C35981040157C74863047AB1775DCD295AC53B633FF93C7256F60DA7F5F567
7AF3482EEF84356410460D34C3CD5EC59C2D878C3A9E48F9FD786A5F9D047357
3E7B22C9647F670ACF812EE3EA6C7620B6D35219200B0CFB45E63B318CCB7FF2
BD2A6372C24011729B9C64DF6EC33A04A4F6F5F981F3847056146AD8560A7EA9
82475197C0B977EEDD88FD8921B65D2C8A23CFB6B36BAC2716CB80063296FD68
5BD495B4F63C787C3201C713016ADADA1E479693C2F427BF0F10BB6AB2F6E1BB
B758CDE41BEA76EBB0636C01692F6DDD77DA1C6F4362F139ADDFF0837C37B00F
FBFEDCDB767A8CABAA776469D9BD6E6D9762ECF34D1C3C275D1D148FEC3D88FE
36EB6C6A620B8E2BA67A0AE80B9715F544D14CF026EF95CB413C0B539C557C55
E7277455B7AC440ED2C77C1B42568D1C5B6D0D2F0B8404EC9AFBE717B4CEC6FE
079CE0BE7030CBFBF8D73E55C766FDBC69D3FE7F4FE9340263AD6F8FBA1147C4
0A97878FD14E3DFCACC3DB0681C548295037E1D768F7EFF9E6084DB71CD4720C
1D75C5B96C38532A3BC26D0928134D100453D84F6241290CBC6CB5075E5F66AA
F03ED8DE63A07BB97330A3B3CB8DAF1E9B32E924F639EBBBC592CA23D5351DA0
032D7BD972EEA75DF2D8E15430511DAA16A7654D9247093183A43E562B99A799
DDD5D1CB197FBF5DB330367A3C52530EA66791325668F653518443D2A9C78E8A
544FC9A34389DED4C616DAFF685A99D29934784297FD22290D57FEA0758C203A
B43CFECC5D2180452F21540BDAF90C304BF1DE08651933B7C10BCA90C8F829CB
8DF6FD10A29FE4EDE6D20852E7E43C0F5D5DDB7AEB1BF29D30CD07BA36A74931
469B2ECE710B676E99271435C01D0BC32B0A72BEC454982BBEC7BCA26396DC3B
2ACA96F836CB6E45AC527C48AF37E1EC4CEB184F7DC0670BE4BF97B56A99D239
5B20763658DB829C336E369A77617A0A34AFD550CE09C91B7CF82B3A5B652D64
C0961DB302FC8E79C00F02695379E94FAF494A8FCADCCF156BECEFB40D3D9415
540A53C6720A67B49BF087BE80C380B95D32277D8A775312160945A2119011DB
FAD703BC869E2861D622507A65719243E283B88D5CB5C3AAAF8FDF0C7C72367C
A325ADD8D891B7EB7FBE1E903C371BEF3836C7AA53E3C3802D9A9EA2797D8E05
2CD51A48E76330D188B409E0A2365916CF833CB86FC4DAEC9B51672DA0C3D789
07CCD0EC3BFF4DCE1A3769E69AD8D597D87917324FC4DA960801350C839C37F8
8D3C8CA488A7D0106E11078AC6D3B694E8A44E5F36E2D7C90685BF19447DC151
4E0252426DD02E7E08501C3EB0D9C864BF32BE2DFB7175D0210BECE87FD50B9D
F0819710B485A3674BE91FFA670166C6938D20E52C66E1190CFAEF126D225205
A728002F9DEDF1DFE02131F245BCD9C2AAA82381AE1577FF689D54388A98EED9
5897DCC7EF560F75C2845FBBF08996A6C4734138E2BB4C565554A02538F32CAC
A0E1BAA22DA9E9CF73EC32E76581309D4659BFDAE4DF5750459F7D9C28BACD23
326299A75134A4EC7FFBC92108DD63AAFBCEB31050DC5657B02A4A9DC8BCEB11
30A800757B3964FBB3B1B354F7AE8FD9F87EFFED5AAABAE605B0662DA3E34E6A
3FF1DFD75D62F061B0E436B14D85E26CE841B868AAE5197FD4BF93C134EE8FD6
6DFC807EB3C63E7E09B5E2AE41DCE803B518626015F56CC3B6BF31461B5CD0FB
5048765834CE4AC08BC587B078EAE39F280591AF10C91113F2F0595F08A7AF0A
6AFED5036805F8569070A02A4E88E810DCCBE7086AB9E774D7757B9140B6A487
05D2652D69F45809242A1841D7B8209B04EE3B98E53BBEC660927D79241B67A1
7561DE46262CD2EA631CC6D586C83C51EFB7AABAB87EFBB4C5DAB2DEAC9603D3
585C41B6EBEC35B1E04FF553CC386174A76FFD4392F500682A350D65766F2A6E
B22B54F7CEDA49B214675AE4661C80763B57BDDFA0DDE948A8907F930F7AF362
01E9C3E09E2AA1FDD6B938E71FCF8BC71F76021275F1E327752BB0792F3A3E82
7C89E1CABAEE06A91E649D6D4264DE433ADEF3A4FDAAF8467F429CC800B0FDCB
B33122260B211EEB89B4A9A0B41EFA9D0E9E3845186C09D81C379334E83F3E38
016EEEFF5AE32BE14C7FBFC371BE767E9F41A4B79532CB791324523B88F9C986
E68478711DC711ED277B25D231047ED775F7F2DF7A1720BE57BC79F4D4B53E25
ED3A78235CECA6593D63C067388DF67367D743C8BCC6BF28A6FFD04F75055CDD
9E643BDB7DB63C41035883C800FE4C90D1D6A5B7022E57D745820555DF933B8B
7352610F757EBDEFF020D89DA275040B9FADDE7544C1FC5A3BE04BFA9174A6B2
C2CE4C529E441CD1C89F3E35AE14599B277882F35DD5D4F734D23503DA669A97
57C456950EFA1EB1B8F0E11D47AB5E3AA5EEB3F4E2532C704A22660A4EF8A6E9
5EE48E35A7DD8E9D6EED1B650739ADDC22422DA7D5F095F4D2EC83307B18E93C
46FA4A7E38EEE0E410CAB30FBF589E9108A2C75ADD6B92634ADA85EB42910E54
556CD86413C0EEEAFAA23ED4313A92D89AA13ED415D3FD0A4C70B506D1EB3945
60DE98A614B9FD5B708F5998D9E9FAEAA2BFCDBC9379A7529393718912646230
1501C1BF3114ABB02AF2EB0F0BA1FFFF101B4F168E6126933CBA71F3A52841EC
19C6319F8ABEC016582DB65B189D69F8B18576DADE57D5007ACD9F48FC6C46B2
E7788082500CD75CCD0FF4F663025051AFFEE5A63BD8428922BA16D33D2DB733
4FC629A418D07EA5AB9E8F2928C2B3CE2E7728425829F059BF4E4D9E44019345
4F93C5C2847AF331E1589A9F6889425C7F81C07B953844C2DE59110D4EF8FB7D
37CAEE30ECEBB89A6D46423D324D261123D8D8E9EC9BB8C5A08E8348504B8553
71ED224595A61A30AE73973C3C0959708B0AA187548FF1DDE756D8CA8E35B409
B56FE1F4DB6497E5D2749177C766A2145A38F89DB483B6A744763D009FE79B7D
F873BE94A07584DADF0BA63361A01C9679110ABCEF756BF7650CDEE1AE068B9C
A35DB06F48A851DD67F8A2641B467D2A7DCE760D2A52A57BB022B6C686B5029D
EA65466EA3887B29E88B221748FDCE289A5D3D1F7D1648EE5275D9D3BEF0F841
815DB5820EDEAB2CF692BB12E0E06CF6E77850D82127BB182CB2B22A712B0A7B
2DADD3ACB6EFE7633BEDEF90DAFCF305E1A662BF4E797C1430173040B91EC63C
54DEA656B6E6C5513590AC60FA6DA144976890940A527A8CC210528E66431438
6D1DB2EB164DFADFDA0DF6792349726002A351CB2333FA0DD7CB17102451C739
9DC8D0F2719303BD23B57150E317E6907925C9052164C182BF22AF1DA3DB68AA
A60DFDA4B48819C41B8F1F63B59CA6A916131EAADDF1C8373AF61EBBF40AE1A3
561A46D7C7C188D792F8CA53A6731E31D6A437E8ED46916D32ADFEC279B3D6F2
C4098D3ADBB17993C5EC68B75686546BDF2197CBDF85F6D98895647EFA676EEE
B4F034F1A5B2E02FB6F500547FD3F619F04EA866305D2E9DB95116EFE6E99BCF
D090D3EB8405B60FA3CE7819BBEE0EC8FDEB0BA89ED4827F0B816850676B1AA6
518D89A2E240F89123B76A2FA4B0785611BCFB3B3D52A065F31486F8A8DFA02F
D4AE04EEDAA7DAD07EB25EC8F6165ADD9BE3C3EECF7A10735E4863BB85855A44
F356085F624F40553AC10E2CCA29EE9682192635061EB159AC4FDE005CA23170
2730408E744F13922FC8F6E50D3581E2128593031F532D4AF9B83949EA999CF8
DC4F827DA0400CC283BB42DD7B5C3FD1BC9B444EF218893BB35FAB0802ACF9F3
86F39BE308A1FE7E192640CDB41A7C2AD6DF62664E0B65D4D51BAF07EEC928F2
83F6AD45AF73FBD55CD6282ECF58BB428E70A614F7C0514D86A8DCD947E71283
D5E389FCB2F945E93F952A0BF65C6F8C4039D418CAB8AC54B1C4EDEECAF9BF88
67C1B8452629A46E151E04E7A2FA928E5639BBBD37697CF484E77FBDF82B435C
98BFAF001AAA118A7EBD5DC32F7B24B4AB1F7E51BFB64B526D9330007B782963
AB27FFEE5F70AAC1FA5442E2D8168C039E01748A039C3A689131FE94F880B68A
77069A844C61A6C98BB1B4F1590EA2716A1B5C396B50A683341F9E170E3094FE
802BB1182BB2F17BC6B948669D3B147FF32AE01CD8F69EEF73D1445381ED2309
A354EB2E29A9010C7B6397255579818A22523FD624EF673B3EEC48AAEF18D74D
DA99B90E05E5431B6B36F777C5D77BE64B1172B484595562D001A18AE3640DFA
405BC69A63460C0C837064459E1D4B7216CAE709E2B418647D60A2FFABAA8790
0FB7C9B846459C1C68F59203875FEF7BDDFC8204D18CD54C272145FE65C966EA
43B87FFF33225E445EDEAB34FE1869428714992B43E324DFACB816DE195E1773
06321365C446DA650A634DFBA56A7F360C6CF0D7AF37EF7FB16C21FD2819940C
461DE8284C44320C48E9837D1E9FF36098B5D244DF3B7CDA03E81647D62B9619
F20255A91926776DE45DFA051C811D22587AA88822BD9DD7518D2AF2B9BA64C4
DA24D03512408EF8550E28293FFCF9AF98F32E57B475724C9C7E723FFD364834
D5DD514065392F9B2AAE36B4BAF5D017F36EA730DA4FA02D2AAA3704C6715919
0BFF56A8F70F73F63AE796DB52FD7F861E9486ED170B5718A96AE2F50C168F81
277899992A9E8E8B2E30A42B4389CD8A5BE57F5C74CBB0963D99A23E8024D640
EE408A699E8E0C9BF7C5A2D72EB716C5EDFFD75798695F26704E9D5CB4F84FE7
D02407ABB81DB79A8DBF52839D28E4C18EA548C1163F8DEF04E5B400E7E4AD0C
B12195B21898D241A158560DB4DE0652FD1C0189220A15F2D3367EA1340CF29B
CF9B3E1191E4A6FEFB3965DFFA22A1278738B1F84CEDCBCB2BD50D2B2EBD78C0
BF95298BB3A67BAFFA78FE0C53D277665EAA3FF29C2DC7DEE1070C71B9D1F1A1
0D8F784CED8C64C9F7F1353625B8A20D9998967044C40ADDEEC59E604DF34B6E
541B242534176E092AFCCE4376235F5078CBFAE6E780242892FA7CD38F05110C
E18D82329631BDD915D67954C5EF38239289D05BCB5447466554809184CDAAF8
72FF8C9858B15EDDE82FBEEBFE4223EB96731EF7E7E03289A818DB17FF0F7055
0881E02DAAFC64C8C2D90A54238F00F4BBF4220435EB9619AA788CC0F45721A6
D659A1D2F0E4D6565DB68B522CB5DF1876D750F62E1724BE71175CD7E34489CE
26B2D193392BEB23D2F7CC570D53AF94E157A9B9980087A36D35F7B644A04E15
992803A2B7A629DBC863D890C85F4520FFCA5B253333E78DE36D8DC1C1559684
96F1B4ABA8729A7C2992B5FAF2DD6AC96B934A7E2933F902535F5EFF762518BE
68D73EC2C947D47C55CEBD77842D472703A519E08A0CDD731179AE74425AF46E
7B1924C3C418A01A584202D71B6971FA8115353B77FBF830EE8F526166204CFC
467B0678093F1C99361A95F76860E5FA170FFE674314C3EF05549E5B37EC7925
A770392344B531E799A4B3FF2F7CDEE784DD83EE019E72B93D1CFC8E0A22AD9C
EF7683BF07123573E2DD156E38DC7C9E7BD934043A78E6BF8B774F2A41734082
47A9C8CBC6B90CC3849160963575DA80ACE6FF24CE7030F2ABE7D154F0136D25
8A7063FEFCA0536DB608D0D60932BFD670CA642FA6FCDEDC699B264729DF1B09
205547869402464424FF3D9DBED6F0E4300E3E7238ACD91DF0E7D75BE26D9633
A318695FE6F38E564A5550B1D88109954AD4C18DFEF5F1247E51EE10CA1D515D
E7498B7813DE16A1F0C0B7EAC9B12867E736CAF5DD4B0F046C037967A52296B5
A617B3D3F9E2A8B4A3055A56A2822269CC563348D2E3917603E98EA9EADCA4CA
3B25AD1C1383ED759EAF4D36CD00A9FBF59CDA77057576C3B17FCA601CD9907B
6FAF24443FE8EB53B6A73FEA434AA8F6EFEAC96EAF36B67537E7C2BB67870C49
A3D4EFECA0491A8317DB36B809899C713F8D5AB2D4E7E1FC61EC80AB862627CB
783D35F2E9F125909D4C0E2E738DAB7740776FD0686F6EBEA3DF9A2B0C51D010
D1EBA517A0E69619BCDBEB06FBABE70082449BA53C10AA86EA4B7CD697309D9B
D10BA8E876680DA091DE9C9D6DCFFE367D80D14DADEFA67B59D7143888AA8C53
1FFCA518BC95086BCDF146209B4861ABB60465A6D6C78BBB404C3E7C1112DCA4
9305087190550CECE3EA832D0712C0CF0B61192675CD247A2B5701A16E75C857
A4C178A22A1D3DBED9B521B404FBAB9B419A719AE42BDC1379FB0CC4BFC871AD
A4F7E7C05DF29A1DCCE36AC9B4BC32B9920AB925EEC4D356F52090CC4A6936FF
4A3748F709B8F5C398ACAE3751FAD82FE555F958CF43B6F73B16AA7D68BA02FE
9DDB752B3ECE4052A653D84AD8BD66E09AC5FADBFA18CE0F2F1DD4189737FD42
1E32B534DC5E3C6862B1D72AA1318BAC7F9DB1895E6E381FBF2670356182800F
375922CB0B2A22617DAA12804F620541DD272F9A6C139843C84A33D9BF2A486B
013E52CB05D9017161827203DBB820DA90D9A8E6851E95719B2D4F1BA81CB12C
E46D15A6BF84F58C48CBEFC4D3E3C5532EE8CDFFF85AD6343D2ACF82C9087ED9
5461F063D846D9B7F9191441037652147A1FB0E5DE51F07980058DF9F5670809
01F3FD83C1A5D27D298B6E57AFBFDA9576EFDF1F95D82E70548C5FB10AF7EA24
863D19438876D55950F9516D7AA746CF61E60CE24E08E6DC996E9F3C45D51959
49F4510CD259F52BB087AE3539D66ADD238985FC4A770E9CE248BDA4FF5FAB5B
B4B336BA1879CAD2EE6D783F3ABE68AE466F1CEA1F103C20FB7C9CD0FBAB2B12
ABFDCA5081BDF6243568FD63D98230C21EA5D82652AA00322178C0B8F3808B87
D38C4E8EC303DD63864D17622873C25435E8396051D09F767EB0D83096C78D90
C44DACFC188EA312D672CB43CC538CB80F4E155643DA96831B0E420FF2F6227E
DB76DF562284CB2141970D34822E321C25140729BEC5D882E212CA38625B8EDD
68B9B6038BFBA2BCACD038FEDCAA58CC5E3B4A60D7970B7920A77815A98DA5BC
23DDB9FAE35B3F807F0E1E1136486D823D64BE32DE4B92F3E228C78B8866192D
F45563086FBBA428BCBB7CDCC3B0DCD52FB71984263646726EA5AB024774E44B
ADF912F9E30F49D3A8FBD63C501E71FC027F9AD6A13034B8CFF90C1824932C52
7FEC90A076CB6BECA3334781FCF5C0AB013F324BD4B1E3053CFC06BC7C44086B
C9088D041DC0DFB05CC91088FCC49DA6B7EE7433484674C9ED2EE4CDDBB7B62F
0D21A599EF056F9649D4EDBC5DCF39D8E6BB078AA738FB22E0C5F163617B1097
6E4D71D468744155FD454745808EDBCF21047DA5D94817DA7B54BE3C4AE8448F
27BD2AE8A85098D39357FD3E0C1158410D72A2655AFA08F2D94F028AD268F66E
BEFF8C5BA43CCF6B0D2FA5DB0BD254EAA53BDBE676EEB040CFE2576018BE5729
DB776E3C6947281A97808DC69596FC99317D93BFD53433930F18C85B95832B5A
C4987DEC93DD036DB3B1853869489E2A6140307AF94369F421BAB742E9915CA7
DD42D5622F3123945DF2A59C6A59DED6F38EA1D913667F3E5535419EFCB4CA4B
7D7A1A280FB8F07172B9165AEF549F6238370B3AEB0B35DBE8C839C691353609
4753449352F6485ED889CD074185E8570224D8EE7C7D7BB744A62BA4B7B66AC3
839439E271EEF7408DECCF1C2A42C265494EB747D7485C464EAD952574BA4588
A42436867E0B0CFA82DCCDA0A1981B12A7264A83A80948227D775A8D7012446A
869D2C00B9365EBB1322312691A3DC7E5369A7D74A5895CEDF70D77265C14DFC
71733CE25DA793A6023FE2D2CC98BF990E6CB4250C1D07B40804F8A46567F505
A7C5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR6
%!PS-AdobeFont-1.0: CMR6 003.002
%%Title: CMR6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR6 known{/CMR6 findfont dup/UniqueID known{dup
/UniqueID get 5000789 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR6 def
/FontBBox {-20 -250 1193 750 }readonly def
/UniqueID 5000789 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR6.) readonly def
/FullName (CMR6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE339BA29C1C6F656
1DEF13780383DAE38A868377CC7D396B2A05F341AEE0F8BD0A0191F51AD11A4D
2E927B848A1EF2BA15CFBE57A51E3AF07598275195C9613041F71C1AF39E61F9
EFD5F6512FBDA76E29DE6B508F62F5CF9F73F5288DF1C7B0B82C92D3B6358BAD
EC3CA20BDE55DAA7CC58004AA86B6CBF8C410D8287E88BF20588A39309C2B703
CED322F030AA6069869064486CA651DA054FF3F5E56534CA358B0829A6B954D8
9103436E6B06DAD1658BD4A95AB41343B01F5866FC87C4EDFC71F1477C98F8E1
1DCF27EF743FF90BF918AB8C4E5AC35841E2F745480E5EDE1C1DEAFAD8D0018D
2C1F1CFCAD9F6609859DEDFD1648A6CD23D8ABB80747F94899F17C8F3E6CA55A
E176F19CDFDAA0D7C920B3A72051A4745560AC81978C92459EEE5AFE85AB247A
32981139CBE352B248F4BE5F73503A084A3E91F05328EE521D9669E44E202584
5407E7846F9FEE3D54EA18FFB144BF2D6803BF65AE402034B3CDBB40DD24217A
3CE0E95E2717CACD603A958187C42B3558AA38D6B6390EEEDD396F96E6041FCF
6F8888221AFA87EAD79F46E0E32CAED91E6C8500879AB6E580C581E8C8CE9B68
2BB5EFE2604E8DCB2432D39D75EE556969F1B2FBDF6A4BC72D106AA7CF22C268
464027898B311613E06E1584707F262F71D9F49D2149306A88E02BC60BBD6BDB
EF41D90F19197BA9AEF32B5E63D5B9FF41B5602F9F786E76621DA54D574981AB
87A72081EA05D6C6BA940EFEBD0904EA4E77BBCE17E20B42E1722617E0F6EF32
F1ACDE9D758594E9C81049CCC10605A27C2A06872FBA9F159CB155609B496ADA
4886F478E44029B5E620DE8319E257697E93E1CDFD27D560E2E4D34507020E2C
D9FF06BFA14E056D81DF701FAC3ACE4BE6C098AE116E079F0044391EC1661F6E
7A93B9320BD7F91E8FD2E8EB3F5CAE997D5CDD35107A1D35302260D1499B8B65
39625B7925F97D917B66BAFEEA992873F07220714F192839948CEA080BDB9A03
77B9DD032273DDB5629CB28B5D8797EDEFDBC601823E038384C90C79012A7D96
8F27784DA15BACE21501C26E3AFA5DCCE81B52B0ABAF71A35D33103EA86F2415
A39A830D559C5C6CA7423945BD3DFA942B20A06D7A8D8671F9831DBB52907AB4
4E54776D29C6085CD9970B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B8827109
3BDE64DDA024D67F098D6C1998506DDFF7907ABAADA1C39C759C850E0C6F8E89
A392D1C9329ACFFA92D361218D75E115F70A47C53B73B356D703E9C499AAD098
AA9C8119EE9E9708A9EA3049E976FA19AD04210D5F6092C7903FD155113F3A3F
269B746560F70970AC9F8D09956E0E84DACE4112C4E7C7F6B3F0B63D26EFF95E
2B2E9699D16BC8AFC4AD9113AA3A974C9E82E877288CF71E9169D2DCC61AAAA6
C536E5604EF0716F6487292BBB677518504B52C63822BED3BD5FD14EB41EE6A8
AD4B6CF90D39F98E12A765B645CBA3E8552FB9A986390212CE119E7C3DD675AC
17BD006144BEC534DA2A860188619F17589008409C5A309CB83FBA70F6446B6E
2B56991B6A03B1DE10C621591CEE45BECA27C54BC8B4F1754A9E8F660812710E
117850E1BB6FD89BB13F8CE391C43DA89EA67E9C3E7A4697790EA26B0E4E2E80
DCA508873A7AFFC11B8C02EF86C2316E8D8B6BCEA37F81A3A87546705F070C3B
9D4D28C366CEBC1EE485B8E2357DBE46E86C87B9939DADA60888AA9F1B92FECC
CC1C198DDB594BB70A8FE690ECAC21A414BAC89BF019F34D2A130F485EAE35B7
2A10C67EA3A48A4D9734759CC93AD85C6A570500AE5AC9973FC76EFA06BF5DDC
26E20E28D16B50957EE01AF2653F8D860817967AA5A9BF9BF7ABCDA710E9F34F
4F0EBCC32B3C9C2971F6225D2DAA6A451366B83F32B2ACB83E746D365B2DE38D
C1AB7447FE7B37F9630E410E5D8F0ECE74DF46C538947B3A167AD9F3E4A7EB3D
60F5425AE75AC3A27D39311DA35696C3DC7282AF1532E7AECE63D13DDA0296A2
01487185FDF1875AEF55A36C17D6A8DD329279D229259463A2F05CB7A874374B
E2320E1F6CFECB9C1CE62FF468C29751ACD9754AF1EABE8E7696C2888914416E
235B6766F20FFBEFF285277B639A51EA2F2E30D207BC891B00F0436008F980E0
9EEE7FB375BB069B9E0BA11DA951A99D8E60B4F920A0495C247FA7DE904765AB
DB5C3B2D634757E43EDD6FAA4DB3C67F82D6853E1170F0B2D8CE496DD4E72B0D
28277BEF172F1402959F64527F9B640619F04416DDB9D05FB2ACD019CB9C119E
E544D24EA6DAC5C69785394EA50E6EC9AAA9E14B904EAF29A733C6D7942B63F4
85729686742F26DEF78DF0DA1CA7CEFBB684F4CAD99021A3B3D1FE03B9C5A4B1
BD04CAC89BB91B11952A2B17A61789BEE0C54B46C03FE9A1AE73D17CF94BA30A
237C29D414C3BCE8E3E2DDF83C0BD59DCB66C4D2C3DE73DA8378F3C6C8035D28
7464399857E57651A53E9C4AA68DFCA91B2376CF98AC5290FDB9BDAD9EF1604E
9B0A70EDDA1E564B6D2456E7BC722454ACA8C4950FDD44B6EB9AD01169A9F845
B06A0DDB7897C847A5B1F42258AECF3807AE936C8F52C3A7A0A85D68160AE442
FE81543DA6702D76AB6E8701F80DFC1D87C961E350D0E52AB2A298B9E5908600
7E14D2A87309043CBF13F69AEAAB1BC239DEA88EB5176624F6046664B1D2691F
FBB2071D3706F97DCCA355A6DCC4D09FD35DC078FBAAF672FFDECEC61050A120
10B5A96629041303FD01ACCC7686165DED6AA712FF8E5E85DE33C4E7D877C49C
6C469A90410BAF60BE65ECD91CDC2EE7AC0CA8BA7B53865F26092BFCAA0BCA77
B80DC51DAD09C93C8DD8E43502B4B68F3D5918C3492196292447732BA90F5AB4
9F5E1D634ADE1CCAAD028DE5EBA9535F6FC5908DBD2D643E0A7E059C8C386FDC
E72659C0033F535C0D7F6B98D0335552D0BF3C6E302B672A5EAADFCEF81912E3
8F54E6FB7EC2B325125159713D0AC50DEE3673B9B148643727E94C80971A2E73
5E1E13237BE69C84FC039DCE02ECE2668AFD047F21A61BB94A9F498C9FE5CDEA
B274B40728B6F6CA9B6C15BAAF92F465B0D7311B46545CBA90D874839443CCB9
3110F052EB247B24B45A3D2FA6FBC7EB2A4BEC2A5892914B3C5EA3F4F9B9DCBF
6F932D95700E045B49E4B1F2C9D2A42CF39CA2F5A2654E6E8E6E92473D28AACD
5E35C6705EA728F704F5996D286BED433F976AB7E018621A577AED7C0AC0A84E
A032FE1869F603E6F20386E3A190A30A21EA886249ECF8CDDE2C33D73BA8647A
3DCA7A8DD9E8EC8D9A415D126BA38B6771C489DFC419303EE9C1B83FBFB3A0B8
97D64F30E4BCBEC24DF603FF3BF541E00D5804B6B6543D3D2B661CC551D497A9
9DFFF535AF424B2F3150BB39AAE8CDB306AAD37767BA10BADB031DC2FAB16955
EE78342CCC0E8B5976BF98F215461A8C6F63EBE6E2F1A1104662DDE53388CB51
8B44F3534853B8095F3B746A2459C2EF800FB1EF7F235EBAA9731E3AB3BE4369
1D3636E3ADD5BDF0C34FA80E90D8A1DDE770943FD196E0A7C5F1FAF6970B34C6
4673AACA6B2B5C12B9608521AE736C1F4B97209B063D991300ED5AF3D7F27E76
68E0B858FD8BFF86581E2B9548C691E3E5D9EC4D39C9715CDE86C7D22223CCEB
8A38C776A30AF14912390A7546DBECECD7A687D4F08646E57A12C80DCA022B7A
33399761A50B8E0ABEFA1163EDEC3DFB5DA3248792EEEDD894872D4E6814B4C3
548BAFCDE0CABBCDB97EC6D1BA47F2E77CC1389BF19D73661749AC33F46A618E
A665A85776545BF9662F2179D7BFD604FA8EF4700591AF3AEC647E27B24B76F3
133F9198DC15C1AED830E737909E43EB91C334C44BA35810007A3888E33F5DA5
B3B2C35481C648AFE630CC3E08F77744E401B2934E407D1EC17ECE737606B076
F8DE8EF3344F57495EF49D11580D6FB28AE0B1422521B320843B13467501CAE2
3DB93D7BB779F73B6AA30050DA74BDBC3F8DBB30F32EAFD07734A151BB2BAED5
C9B1F790059339B64BB4146470F30928C9A49AE88906BD6FDB7431A4B50809CE
0F67ABA01CDCC2320B0B097187B9299E3D80CDD7BB5DD5BFA7B28D924C5633C5
45A23CCEE097C41C3759C1FA8DBA0DD95034BCA89BD23FAC18C70093F40FF2F8
0FAC5DD4835F2DFD40540E9A9E9FD951A8AF2CB766597DE00147B163BACFB7E6
EFDA4DED594F1C746D8B46A1145E0E4058F5917B3F21E9BEBDE745EE72CDCA64
FB31EF7A2E55265F32559480E2B6726D3DE26FFC97EB4E3160F117E890C4B2E5
8DF310E6A728ABA85540F571C024F8DD58E1D7827FE97CED5EB31547EBC36415
02B8C0E10B7E37D816F01D56A364B8552CBFAAA95BC4BDDCFDE91CE0EF005B4B
7AB56FFB47A093AEDF0DE1EA48FC8103CA3CA1470864D2693E360006D05668A8
AA422CCCED20DCEEBEA5CE0DA1EFB00FB93E922B18124FA11A88D0F6E0F719DA
57603DD5DA42E1C56C2FD9E5415AA199D4F334C151C1157E75C107FBBFCEB706
5F4EA47A29B54ED8CAEB8DDA2F53D2A703B95487619780A52DA1270011648A28
AA64338E04AA5B92C1EDF3D8DA34FA6D227A0325EA6F22E9B38B6338C657BB21
CD4C582DC04010330F62923F817E4EDC6E5C0E6500F2A975A8A95BAA30C4A134
BB31B5AC45A2E7F6E9CDFC810D41344C4F606049445F8E93D74271C1E29DF7CB
5459593BA28AECF64D903D3E4D77CF5C04B06DE44A41EE4D9FC769854503AC85
69E4A5106E84016DE3D59865D4AB30BD6C9E45C45DCB5408421CC50CD6179C85
34E55CC70FBD8FEFE9F1D5160664981716E3BC7F24B6F54E0323D9BC4B692971
24419EE62D8B0BA726E2B4294A9A76F328B8101DA29E78BD5C4AC383350FE196
4D42DB1653637D19530124858950C22F1E9CF5BC07D46B7A58CDE19CC88DCD2E
7FE4EEFD8AA6047E919823C8CAB2EF5274F45E861E6508CC11A8AA90AED2403A
B2BF1315C2157B3B50A3685205D93E40906EEE9DE5985405974BCE0B84BB37DB
080A45C5237B269B93C0A7CF294A18B45464A41F604C494CBEF829A381155CFD
71CEEA54CC39EEDB6DF58A9896246B09F95DC6BC40BA6916AAB5ED3D24F66154
3662F8978FC63DA9280FF7ADB09EA5BA79D3B66E0C88BEC1EDD78DA93839073A
A4D7B0E627000C4ABA76C47CCFEE92E319315333A5584A951E34C55412049C4A
A5569FE65A006F77B416E0530AB6A8E7AD6C72340AD4CE25937158FABB2153EA
281E1D840206F5DA38E00815E9081F81DAB9FAA8F4DAB305867AC84735DB4F52
A36129929BD2084A8EA37BB6889695204BF7290B68D5E722540BF8A276F8BB6D
451D582EE59D2FF03F6B97DDE05FA00C3D375D2D0AAC8FE298F85CC067B15481
48D70B6A0354C705715B891915FE8EA45244677B9FCE81E72D66177E309F3F83
F744B9EA9E55C3B30DEC6E5E03B3988FD526A82A5E8E1DC79127FC62B2FA7949
B3AD3148868DE22BD4B5708E32CEAAE6ADEED1F463EAB9692411E18F8D6BF391
126B2700B4CF3B59D02E3F8795130C96285A63FCD1E0F647ACB1D35E9C58BD01
1DD06BABA00CA4343BEBEDBE677E053E9732B33A7495DF51782A07DA07F5646C
770C957AD915CC70BA8E08BE7A1F4E6BA5BB9C603E38F6FB0A2578471C4D02F4
283069856D926B9076EC73AA39CEB0A061AFF1575C7093FDAC9F89C3DC06EA45
06F3C2A3BC9FF21128B10CB758DF0F099B459A5264A8C24C098110D2BA1A8532
8FAE146A91BA7D033F591AB1A94B8A6FE0FFB610F698D216D58B4EF6C87B1524
8037CBB7E23D8550A620341C6625A1A2ECE7CEE2598D66277F857231A36155E3
984F147783E9B93975AC38A29F2FBCF704C8A04AD84C3E04A12D2321FA56811A
5B6744813CCC187968C5C26BB8D3E6615A912FA5369C01CCF8C0DB790593B190
1A90CFB5339B8771F325C5FC448D36C7312B11A15A8635BAB59CF3CAD176131E
026F6E141B2619EF7F3048750CC9291397F141591EEC8B612D6656DD34DB54D6
DBDD303CED74BE76664E7DC86FCFEEF2001C9DBA56418FB61F589566A47AF36E
C94671C5E8939AF9F4D53C0DE7142B7B63C86AAFA65877EBBB48C64589AFB2CB
1280AC099FC48058855CBDEB6C2D2A0D092267996591DC3B5EC8252984E9B27D
2E9EDE8CD8303F0905DBFCAE497DE1B755B924452CDE11CF4F20893DD6FF7251
427F520FE00580DAF1703FD968E0F8ECCDE618E1EA5820EE6CFED97C78864EF6
26FAFEEE194A268F24249D44829AA360D731C34DC285501E966A959180718F72
6330E4CC060588A2F65AE64A720DCAA818D49D4440F5D0B6C1F6C3A107E12445
F1BED2D3FCBB87A9597F01C7332AA79143564056219BF87D4B907A04F77621AD
054935E883B2B137D3D1C4BC792E8335CA08B6D83227F35736C41312A0BB077A
60FC6488C5E02FD51A10AC113D4EF70038C649C1677B2204A77F2ECBE9B3C341
F4126BECBCA61E3F3801F9188A3775924A62D30FB096B440286FA655EBA00A74
9A4162904BEA07CE68EE76018346DEEE20839C9A2FF71179B58E1D4AB30856B5
F5D97295A097174467010B15D733AAC5813CAA633746B430B1AAF9F997FDAAFD
436844D1A56B8E25A89D2CC4BA6EE7ABD167818FD4F6C747E07B262C99EE2C35
323F0B471586CA50F54C6381B052B15B0C58C19DEA82C0CA29F00400B727419B
2379979CDCBFA966AD513FA903160C571C3BF1BA239540B11EF2371A3880837C
6D6CA2F374280CFA1586427AE975A2AEC34244874E4D441DBAC6CD1828841C91
069AA87FAE849C5DC7C9EC1B9876E59F3CCDF8BB23D939F5348D7486934BFB02
CC5A22541ED352616830A510DE7732E5D8F7E785BBD31C2BC9D348CE5632654D
2C1740F89D57FB2AA1FD8FA3304EA03F757BB8F498ED98E48485722E78D97B12
A05F3A28438084D1CF90AC4C3FFCD7B3365941C45E1E02CB13CA1E99F7FA1D00
1C9D489D5C95F019AB4CE89FA3B6604473DBD2CE8E278969E0A0FCBCE68C23F6
9381882443D3FC16966555FC222F3FC4B1207522201AB7A15A7A6F22CDC9D392
360BF4C95DAD35770E0AC7E5EFF015F2C74ED7391F40EC94B8D1C163B5DEE5B3
911A20C2625AD3B24BD94D2A42405E655DA47D3F94F882CA2F479437B4E0BE71
8AFA4482C6FB270F8D05B4599A01403DAAA90C01DF3AA7C2BC7E66AB6AA833AD
FB6E5EE13E45CC7CE7E200FBFE639F9CFFF5D08512C02764997FD28368969BFB
0876F236EF6189BE73AD827332DF1B2EADEAC0ED3B939CE5BC3CEC78975FC636
44FCBC2CCF4396AC7343EC62E0E4F3DFFA2B880BF31D93ADFE201BE9CCEC8BA5
0B9B919E05B851E0909968DA259EECC6AA0743F25247978CC09C28C4F878E29A
5070E4023BCE95FE0ACCCC01D0EE219FA8344E8F6D7D4347563BF8AC030B9097
41F24D4BC9494915A82EE9FD37FBB6A46BF077B728FB569B1258CEA5F51F36BE
4F4D0F890D782E44748CA3FE8C8A515998371D9C7D2311F192B4B7E7C68FC6EE
3F7136714C282A2570FE591F247A08319CE9EF1E43274E4E57166E31A2ECA506
85350DA31AA4C33C9687F5210BA225EA1007C444FBFA2126769767E47A967884
9F68589E4BAA9ED32A7A466DE35554C132810C68ABDAE536D9D884352F28EA02
8A555D2CE11F30598F44A65E2D86B43ECCBDEED9E4E5B5B7DCDA20EAA09D9FF7
422FC91F2201431A9E8FC624FF44D26C0100183D77BC7E6B1A6CFBD3FA8BABC1
AE4CB0FD382E26BE0A83169B46D91429DCB746A0326243E212F802AF6A56C709
6E70C6C7CA3775C382F911F6DF3D26A9F9F39C6A49A61FB0FDFD443ADEB01F74
1254040BC520FE9C85FDDA97E17CACFC505669130254F9C16D813DDFFF35ABD9
F6BB806C8138B974A5F04238A6E74C67684411B94915503133B27DCE131280E9
6F1C994EB581AFAB29C433337F40D3DC691D98C47FE66C75B0B49A09E086BC38
ED8B4F690E0E9848B3602A13A3BD0FD800C618C6CA60EB9397A78C285BB8AC49
CC99A84EE7C903DD48A13B074D142DBC3B5A765D05ED43D547D3D66879BEB840
0B24834FF601400FC99396AC6411C9968F04EC643BB1005C0235743DD58FC6F3
010CC1517CA0F37DA17F47FF62F3E48698FBB83E8F7C99F4D7F8BD922F3E5A9C
E074FD9E33B80308783E17221E760F500A185C89E3279101A0DE477E268D236F

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.0: CMEX10 003.002
%%Title: CMEX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX10 known{/CMEX10 findfont dup/UniqueID known{dup
/UniqueID get 5092766 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX10 def
/FontBBox {-24 -2960 1454 772 }readonly def
/UniqueID 5092766 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX10.) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /parenleftbig put
dup 1 /parenrightbig put
dup 16 /parenleftBig put
dup 17 /parenrightBig put
dup 48 /parenlefttp put
dup 49 /parenrighttp put
dup 56 /bracelefttp put
dup 58 /braceleftbt put
dup 60 /braceleftmid put
dup 62 /braceex put
dup 64 /parenleftbt put
dup 65 /parenrightbt put
dup 66 /parenleftex put
dup 67 /parenrightex put
dup 80 /summationtext put
dup 83 /uniontext put
dup 101 /tildewide put
dup 112 /radicalbig put
dup 113 /radicalBig put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23E7BC2A6E71BCF95FF3DA948
1A27320759222BD7BC7C1A533E90058824F06942F0234C68671083E0E4708398
D246C94F9C16DAB6563651BA33D86273FD2DB3C50C106F3CA95B1C79778D0BEB
B99D9CFB38E41BDCB4261A86A23E2CDEE4837D9B6F0E85ACEAA984C344A63709
EA35B61F08821338D363D172BD185A3658F43052AE1E61D879C99DED7F6D726E
FAFEBD881BDDEA91FB09DB75675FC74AA2BEA8771027C7A51BF849F8E765B870
8F7CC0871F301ADEF9B71EC3C607B2F51325AA5B3DD74A2C5426E7B329FAE84E
94A159C8C9C35E27A0FC93FB98A4D616750DAD50068A5F0EB96B8228946E5CC6
B69E93D262C92E3BC7161313156E380A2ABE27BE400A23DF95E65A4F76B3FFE4
CF3CD141B006C487EBC73A5A101466D4388FB2CF1D9439D0714720BB58537B7D
B3EE1F04AE117222CA5F0E5942F7A875D55D91D63958B1A02405D9DE08109B8C
7104F2D109EF7074852DFD74CBE02E0F3704F2BACA14E05EB1D0D9021EFAC23F
76C2389F8EA237D2E2AB6AFA83A725E16AECCAF025E05F1B1B5699D761F62A46
EC6F31B0FE4769BD0D66821592ADBAEFA9EB454CF1402FE870F5F96D09980C1B
8B6D2FE88BE56032C1959E6C3DC319B6A7353F3AC629CE5BCB947B4B235426E9
4769302817AEC1ADF50E50265AB488017634AF824D44D3C8423FC7CAD97F6D6E
6B34313637687FBDE3BDF6FC951CB41277D8EF49D14767B59656D214C9724DC4
0523EF896F4E48434FCC5D8423F07194C54D48C62AC29001B10C9C8B514B24C5
CEB60FF68D36749711E108DBB52738760FCF6571D5B04E58F24CC0247834B412
D0F6F8D7F1573F23E3E399D5A3A3A37FCFFEAFA044A5694D2458EFF2BC1F7650
8FB0A27C505A20C16776EDF94BEF9DF702F3C64DBC1939BEC0399B6AB283F832
DD8FB358F701CC075C596FA7B0ED7A9304DC73274C8169337D55124CB748CE26
A635B2704D8F65E23CC0FDA3C57ED451F8FDE7B6FBFCE2746F5AEA11B065A6DC
C3D200D962A034DD6757991BA62D8DC0408F49083D48799B6097B61343365A5B
30FB02E9CDFB5104FB751BE8A268EE55C1208DD8B29D5635014EDE9D0D94BB64
ED5643B3049027925BF2FD7EFCB631E01269B731AE12AA6226B2656F035C7E92
959C4A21BE40D7C138C8FF28C9FD4B768CF25F08859AE84FEE6EA18C033B3659
D9EE250BA5FF2568E8BF7684A93BED7852251D1ADE5DB815AF3AAC36D1A500C9
41D1BF3A1926828CD1F9E501ABE441A07B1B96612CF0728AD5FECF7480421F46
0B18E06D2FF1A5B1183459C59517976474698BCE18A728515CD489A83C001AFA
47BDA929F60D0FABCD8786AE16EE18615C37D18703571936A365D334BACA9BA3
08E2523132887B5EE95ABCE8581C78C3E858DBF35ADD56A1F6C2489AFA73D1B2
379C5064DAFD30FDA84581FDE268B470636EE35F21648955513714F6EAA08AF0
249C937721DB0E93D95C4DDDFB0948051953F39C6D2D811D3FFDC25F786E072B
2A8A1F4830F9CFC34666A1D3F13268980E9A26682CAB64817318A1E266F3D2D2
DE4EBB3EDAF0E7B526C838CBD7F37E74A35B1C3EB96DA4099DE689A53970D4CB
9AB355E93EB294B07DD09356C338BB4A61C147BEDC152E58DC92FA69846E4829
551A5330006793CD88523F7B3AF7B4475C531C67A4B66A603597EE72C4ADA491
BF13706F341125CABF37FADA554FDA0BA5534C7AC35F1829E250C885D9A9983C
5D1FE8CE24458A8B13E5C7EA22BF1608AFA96B83C700889A2A6C9C4052DCB892
6CAEEAA9E7D7F3E215019719B36A5DAFCCF2396FA0C04AD99A7C23772A7BAA64
D1FABE8E476EAE9FC1A3E08CD6D1DDC6E087934E676BDFD1528652B6B9A50A35
2029466364300AF4CA3C5883F6293A7104617D0858B3E43D43752F814654A938
A44C33410BA0E5EA7BF55D4F1D57E27921DB05C059DE29BAC1BFC9B607D2C5CB
1DDC47793984FBB18BD99E1DF7776B563A55E15DF024D6D8E6ADF62F16F602A6
7DDE1C68637672AA9C7A1250161502ADDDC1B4F6011A9BD5605B73AEDC37CE4E
4467C838B7692C4D541EF87DB41123F9DCCFFA971553A5D9B0E7EC539A28750C
8554383585CD8B93DF731A301D85BA9ADC95B4A3A237794C30230A82300B6756
AE5A46A090958109C5565EF60B0B16D6C0A16A56644B05D3371DABBB67ED9BB8
9BD3983575D371419C7568B2556649402AFB9843106729E4EA87B3F9038218A1
F820B098A1271E330708432567297CCDA332B555A40C62BAEB16330175D28AA6
13AE6939CEFA2334E3E890B66A73277F0B63B1FA59F856ABECC5FC0A50571F5B
0747FA554F5FC72A51E215304B2E44701A13E41D91397B204C66AAB3D101004C
7FEF2D87DA558EA057BD492CD6EF93601CB63F78426B502CDC5C8E9EF4FF3692
376601B1FAADD801602668370B5ACEFFDBACA8F8B3F4E850D07A20F6F47440FC
FD39504F0FDFCA35AF2ED0DA8BAB63AD42EA8CDA912CE17F5E62192DDD912333
3E9FA0884117F07221642490044A72E359D5F25D9591A8FAD568A3DEE435C354
11995C0EFCFEA21735DF44A30F79F747510E28767A4266461D1394F81344F6DB
1FA8D0B0D9E5F52FBB663C8F1E91192E5608FFEAA178B93F8298F70510A65BEE
12ECB5D675311B5B3B19205476512D92B1D16262720484049370A76F78D9BDC3
02EB96AC1E5B3CB078D2F219988FD0F36B043ABBF347B22D36CF541A8F80F791
8E4F92D900B7E7B64DFD500882EFBBF23565FA470103B2E0D2D14E3E4D7827D1
BAA0F84713A8CDE5904FFF2794850871DEADDDC53B77A502F5CA98B0744BB656
2FC40ED2AEBCC5CACE2301E983E6C18CF16AFB9FD8CA49DE51B22F4259D43076
DDC1BD4974CDF2E733EAB6334B1D5614288CC81FDCC722CEE193635D1088FB29
F80AD5CB96394AE89D920DF8E1F271585AF019190F17DB51FEC9064B54C3A53E
3FD33C3B553FC79F743BEC9674743BF0A821051261DE4527A2BEF4A04E293E97
02B181EC5F5EED3E26060F2C9EF6852B7433CA1BC1690C30424B03C522A087EE
92016EBDAC4B787133B4A22BFEF0B6CA564C6EB910E1DBF983CB4CFC3A1F8A26
45329CED7F5A8704ACE9D4233583365A5A97342A053EF403F0567E9D0A62EBCD
84B5D7145BBB11D31046BC2CF5B450CC68B85DA0E78EF8902F8D37DAAA9D4242
455288C0D73748F9BFEB1B1769D6FB84B94993D5F7C2B9CBDF75AEF2C930F277
210B3CCB8A0299F50AFE2548A4B8DF5ABB52F098ECDD56FCB8D3A406EFD95088
92D7EC39FDC7EB1824ECA24D0CBC6EC6F4C6A7F9590D593B269D2CC0BFBD961C
AA8BB4296B4E4411B54367A341A5EDA97288DAC370A015FDE6D7FB0A4CECEFBD
1A67DF3A3703E922BEF2C414FDDA42482EB35D5DBB206B44C76C412A435A0842
6845EAD204BDF87065CE2C99B05D2D4080D5D11CFC3316967472C7DA44CC1F9D
51B83B4BE9B882D6E9ECB482F9855D024ABFBA502CCD624E0F88164A6F13CED4
85F20DC01BB15C7D78B1C79FD9FF71F4B043F59DB5C297768115542BC7C8A99E
ACE39A268D32122541FB441FF1364FCBA2B7627F12C49ED038BC044B6D9D533B
A72D35317A5AB8D91A9AC56CA90D1DAE9F967605C63BC9F406FB3D5BAEB4B38F
4934EE3D2F5FE434B45CF5C2D0E5E417EC279DCEC4F16504EE40E837B11620B7
7526AFF23381ED3E9A92DA4DBF4EA2BE4FE444B9A74AB60EFC818E20DD8B852B
DF8CB659C0A3956D0DA61F49A9DD467726E57E9B32EFF540D551A67213D40273
AEAA6E319D92B4B406377D36DAB85662C755D76ADF5795C52D54ECCF0DE81E30
B84F951233A0A400CB063911837F0AACF44AD2441A7CE08818D64705E1ACF7E0
F59AEFC5DD812981C5508385274817056B2CDCCA4C9F3103C92838917EBFEC94
21D5737AC634B23B6F7F63B166D60C6BAA8F33AF44379C5A7337E737190EB3EE
14272B905D08C01EA118964D3444A03676FF3B62E7626168FA1DC6220699780A
0BD5776DDFA26BF0BB335B3C978CDD5CF1A419D4B5C562B3974FECFCF0118199
E547EB287CD92E32E881F344420FA3CD97333BFEF5D7E1BA31FD20622E5B4F95
692DD0ACAF01D413B21C8608FA87B470191C3CC5AD333263C955B4ADF4370FCE
D6667FC93495003F4B6AEE4F83603D55F19EFBF56F955FC9CC01E494804952CD
D426FE706C13D41F87C5C668D8B6BE50AE0370E07F52AC0534ECAB1C19851099
FC0BB1EC2A649795A62299F73CA606EDFB1D28183DC63ADF67294553115E8C57
7CB603CC491A6065802B925E6DFBF42917EE6E44C714228AE452851D61BF70AC
844B5D800EF029357FD659B8A648445CED0ECAE1474E443124F4B3644F54C556
A330D92EABEC7F607C6B13FACF69CA928F835056BD1A8ADA20EFE6BD5CF4A1A0
8B9E415E4A5FC6F209EF05ABF2E0C55F6E3060D1C72967E1E68791499F303C8B
3960C5A1F2DF6306710DFA98C8D0815A06B5590374554DCCDBDC4C295B3BA6B8
8BE3200CD4421A521C06BE39D4CA495BC63F3F982CAE3C82AD38DCB537E617D3
34BD96EFDA7C6A0F6D97A6BC9F084645390E194E7A11399FCE4EEB9A965909BA
6EC69D34DBA081BB3F18BD1ADB1AE1B7FBF96E4C546498667690857EB6931841
46C427A5B7C7D99FF889582C4AD11A7D267B301C5A5AAD9DA99D5BFD438238DA
62DEB899FF0F7B7997F781315B2CC328BE3572A3903A33EC901AC6BCC7F152A9
8A6865C6CB17189A4EEB699006A5F9D4482D53A76E88438E444F9302C79F0DC4
B3033D29D303B38F5959F020337EE6619DC8A8C3912101B02CF8AD113BF4BC29
8C6B9D25AF6B6A787F222C05964475B49B6751E3A3A6EBBEA03677D5B136B9DC
6D9AC20193BFB0759E89831C9E2AF68BD45ECC81175DFE80DC0879069ADFA8E5
24CF3C84121CD9739A28BACB9891945FA4E72EC07136682E18FCA81938FA6A3B
8CEFBAED60121530E33C1C0E698B5923D6AFC4E907A99B1367C3D435CAEDEF5F
878237453B8DB2FE53073CF3319FD096343F42D68F097759D051AEE17E4FCFC9
86E17099799DE82A38F22D870BF7AB90890E3B5264976700BAE594C8563A218C
C985D9A5A7D7BD959F7E4E66286833C86E89203ECECD6FC4C6FE1F04010218FA
A5714881C4C846E85F13BD68AC250CD0E488DBF60BB10B2CD7AE2E30F9C21DFA
0E84F76B4E996AA1C5C056E64BAC85622C160B56DEFD4DEF86887C1201F7C20C
076D4A27BA69572BE9C89FF3A9D3BAA5CAE0A6F2187AD01ED497798A305E3BD8
422DBFBF45E3F4AD35240B07285128B59FA9E83D9F6A2E620CAF6DB05129D930
44CB241CFF84E776315114C3AB61FBC0A8368D9154CC5066E2B162E89DA51165
F9CC075F2524F9A8624D2B56ABE64AF93B9F0407CC770C1F2C76CCDC06345D03
7B173C2FAA201D8E1F6C0315987A7A13902F4AA5ADF081C2B0A01C77E4F7A3E7
6A4AAEDDC577E855D69D38AF6A1D271B02AB496D94D81996FB078FBED17F833D
C6C0BCE141BCDE277D530951DD6574B9CB3CF0370D74211E9AC00C7CD3A67842
0B4B72ED517E4906409DEA7993D0B8E92D418139960EBC86BE63A1B1D417C451
8BA13C230DAE1EC4E466F23351D410D9FC4A7BBD477D5FA07659B71CE9921B1B
6755C67AB3D4988064004CF75948879D16174E8097C91F7544352474C2D9A1F8
A1813BC6F4BA13E952678F5707F19B4799ADB3BD186DF650821DF58CF3C78D67
84E4E1DF8DACEC50D15647C3DBBC3C4355E602D3A03171FE1CB36FEB940211EE
0A5300841DD7B7CF91C02B3FC5D89C691156BFF8A38C6C72789DF260B868AAA1
895046E405661D97FA9A0048AF114A89E3ADAEBCE541753E4FFCD902391B5372
6A97E32F0257FA9FA1DC15BD3140EC7F0CA5A68AABCEDBE73C38B35FDF195F96
0F9DB0F592C188D72D73512F4DD92D2371D1A59254BC477CA084E68184AEAB6C
266BB21DC3AAF874DE999AD2A17C79621AE322612EE4B6D5BDAC511418EDE90A
AE75066AF19662C4AD855E4200A5D67BEE4ADA9A399192C74D35E59B15FB61E7
BB167282D32D538029ED22CC5C9860C1F6B7BA7F33D5CF108D4BEEFAE7B37E67
39391F9934DE17956303532ABB011540645DB8420749C9B9A019C3CE86ACD566
1EE8D8D5E0D8D0DEAB33B5413EF10D4EE650F82417002E436E0B3B628A657F84
074098C2E9F897D9AB692E0FB9F268E6728F94A79CF4D6B0A07C8DFDC1D67FD5
EDD5863EA8949D180B1596D0009D662FC429449D76BF13D83F0D0CF165982443
E9CC288CF7C5F2E17EB7F3736D1FB814196CCEAB8C833720E3733BF594E1B536
BC0063080BC751F9DA1741522B2967D07DDDA169E7D3417B4A39EFAC15EA5E8E
DE3473CC9DF991FAD2A971F44B09635085DB02D692F149F144F3DCDB69B72C53
A2AF34C65DF0D5F35E82102E67B733750646EC03A4FF47138F7998607BD93AB2
B63A0B82E8E225FFAD5DC468077FBE8C8C8E5B4BB10A8FE836B07367D742BD6B
D36DF5304B9DF363120504C279453452EB177FBCDAA6F6FB78A24848F4A1D94D
1E49F6C46CB36796F3F4C9739346381F28AF085C5EBDB2A02DC0570C7A21E097
77522D4947B51182431BCBF3E55CCDDE93A916AA40CEB577277FA512380816DF
9111C56F36341381D62368E70462577D0C135BB3CB4462B269AA8E0F03245BFA
D01DB8E23F2DFD5DAA88FCAFDD51D48E562EC649DB1FFDA0FD8CC8C48E6A9207
260ABE35733D75630053CC74A07E5AF6FE87BD5FEA69CB6AA20122276AD92853
6B225BC9E3350D1B1362E04C7795D473F1266852B02C83D02D938C55D8F0C671
7A9205F8CD058304DFA034D99A6BC16C582F02484A089602D42DF30D7A5716C1
D42A4CE56C19E40C01DC7DED931FA13679CFD2700B3826A1E6539AAC12293DA8
664DE251C5D1761BB45FE364CE3F7F7E9B67F86EB31D9626CCACE4DCE03EF3C1
0D2FD1B12B5774510D46C5C5CBF0A34847418B9A1DF0C67789422D0EC2D49576
9DDE72D63A4A98613461A6F730A05336C691583F96C3CAD2AF7C4BFD3AEB3814
D909858B6598FE19397006C8C4D549AA1635968F47144E7861A2BCE8AB4CA7F0
4D253949AA0127559FAE3161C810A8CE22A3079602E747C9398F9C8B2A868F23
D77D7AD6B980FEB038E0557E58E1D7AE471036CBB96B83595D9C96A4895971CD
C2A810651A045F876A1F5AE470BEF39F856808B1F8D736030A722E1576BDB3B4
4DF06F73D38D313C8A0D3504EFBC774750C9F6E687ABCB1927FA1BB3882AABC1
2306A030CEBB259AECAA646C6497712F6C1E9DB7E1365A60EEC5AEDD5147A77B
1E3A10D73C477876D54FEE853D953EE75F7EDFB287550B93CFA8250D1FE2FE7D
D34441F1224F3DB1D355188819EBB98A94DB193B9CA23803869DD10776647BF5
5BB42031AC44A7339DC036AD0292AB9B732E6FB79BEE852A103C3788BB0F4B72
EF37BB62356F9B2DF7F5899A26F1FE0A3D6469C1034B8AB14F52555EBF6DC592
3F24D6DB395A3A182ED4B8ECEE8254661C19CC942F236CA40BAABE818EC312D8
7F5762C210FCE8A3CB9A26DCE0D24776CBD0FA6F27F7636791537C1749969DAF
3B72CF541A2E7E72C3C4AEBC5CACBF5ABDC96B4FCA84D7A55787EF6A13484D6E
E37C833DA37E42E9473ABE2F9E0CEF35EA389542AAEC2E389E1C5D8AE6BC29BC
48B803E3EB1DE78B7CBDA7CB79240357C0AF60E817427A9126A9C26A07455FC5
4C21C91014C9D31B5743A9D4FDDEEAB473F04A08E9A86C68EC648A214D6F84B5
DA77805B27A0F97CDB6BA9B9A521464CA519C9E8B24E16FB4962C239B079518E
896FB197EDAB1434BE0F418D3D4D538EEFBA6788A85A34437222F95C578DFB47
BD5247C080BD13D94BBE18C958404A9CB3830FC2A202F15B5E590EEB81A9DD4D
8B87CFB4AA3E3F00080AEC3F0AA14FD74646A7254B32756000AF03E97943129A
8A6FB15CBD81CE92BD33865552B6B9F9980FC226424C243543C2B3890EA5698A
6966CC8C13EFE79890CF330EC9A9EBF9F823379DC42A3571BF9092B8838BEDF3
129EDD422F6675C4DDB9C3A0D96BA1D85EDC966F72E0B3FFEEAC7FF22B026508
4A93245D64B261B79F1829F0CECFA8360F32BB3351B4B7A12FCB3FB62B9058AA
4A7F52D1387B570FF5D4548049CF740734665C5807747FCB39BD3AF3835C0C23
B6B531C238657FF007A80094B93DB67F661E0251CD159D995CCA751295619707
25D21DE454465F4670D2E5BDB088EDFF8BF0262791F0F0B543114E094BACFAE0
7F27B48270DD17AB91F2DBA3BCD441B664C93EFDC7A020E92194E77723222C50
FA5201520CE8B7C9E6B8FBD278A249F1FA23135786EFABB51E90FF3E2A066D10
A66834D8D80B14EFCEE0AFFA18E4139A9970175A2464D4A6FA8EECB3EE730E53
3349E8F148210E0CD90384544DBD1D980CAD1C815E783E4994466923A8369554
5953D8DE0E9274584359D33785332FC9B66CF96A91664EBC92476AD05B43B071
EEFD218243D574CCC4B62A064A77AADE3EC7A496457151F956BD1AFE814CA6D3
D01EA738B0F777BDD0D34CF0C9BAB955FEA01D6E398463336F68C4D476E785D3
967B5633BA435E26E5617D9C5A19177BBF30C43966F796520EBE6E350761114E
A3C3B3CA50DD928DCB8D02209E5EE40F82B39385131AF4D858CCAEFFFC471BE2
8B72E6D5BDAA828CFAF050ECF1D2955C6ED64B98879880B80BD9D326751D5395
A0558CC38F0D6FE1B5F849FAA71DFD95120349DA799F2732EC10405F6FD1DB2D
BC1CA5FE517DCF800795A451C40B6E4F8004422CB99F2D3E9014B511DEF508A2
28B19C8776308D5026D650638881749C9CFC64FE26C8D7929F2DCB453312073C
7E055CA02A757C724AA873B7B75A19FA13A0D21F4876598CFB82DCAA98B18B11
3A932E3CCA0BAA00DA27FD5BA32379B0E880EE2A41ED99DED59ABCA45B8C4F94
1126E427688FDEDD9E05982AFEE9A82399245EFD52979DDB9348FA633C1923B1
F1F010EC0CD04BF9DEB9FE020484A12FCC7B3899468E87E010E86732468B6067
C00C1470006E297A90CCD073562589F54C6B60EE98BA57DB4C1E0F10AE5994B9
7D44FA25C943ABEA4E0FE3096F78EEC57DA636BAF9EC3087FAEC1FE5BAC827FF
F063862F27B3AD8408EF25C55AF1429B7FCE1F4EB9F91AD3BC1D12032CC6A576
25D9408C257A159F1DAEDBADCE3AF681410961EAF62F3E872448E3797A202B56
90FE5E202079F5D28ABE23EAFDCF6710EA58572CA140B75679E708CF16EF9825
F6B20030C0441D3A704E898E69E8E6BD1B9E5EDCBB1578F095C65890F8658267
0EF4B341252C0646A3D9CE5C4BCC238B64B2981C03E00D2E19645AB476114CC5
7313D2E33F13BF8C0AFEE06387C29C933E8646C7070A23356C3D29F918517E03
9A454B08A436431C822758F8E50730F0E37471C9FC00A19EA4FE3269B75FD52D
81EEB6FCD1D7C5347C5F1ED4B70C50DB0684CC90D68803FF0BA38819728EA27B
2999EAF341551BC6077FE4D250F5F531C490DB5CF1CFB68C4D53E5FEDC78C193
79D3081317AF1B444907F52DFC3BF28CE1E4B816055662D3C0F4FD42B6A0DBE4
45B5E929CB01DFC617FA72DB712176B9221D7CAE06BB6DA9857CC414858A5E6A
A445E3DC4FFD7F55AADB0E0333152CD26E596B247B149DD2B3D5F1E26E1AD091
B9D7C194F6D971111FEFC3D455C80297587FD8A7E30B2E5FC9D143012E2036F3
44A5B84EB70BF94032D8CE6EBEF110CAB8928AAEACF4C30F2C7CAF6CE56ADD15
F7074E19AB338C7DF0943A364FFFA2CB2EB38DD1301C977A94374B27C71CD4D9
014C7AD7D86875914BD21203A40D0216640728F96AC05218A1AD3E1EB76DE4A2
B16A699A93E04472537532D523BDE3936B8058733B73D8EC05713C3F6D4A4C83
B5EB1D48F8EFFB23F7A93307BDE6DFD94399CA76EF588728B08268CD97D34C43
48889EABA9E758C3A3D2A0FEF937F0DECCCB226AAE45D16BFA2B4E049BCA4D31
1521AA0A28B9BBE52B2EC7CE3E1E3935F5F361FC9651DC4A67FD776AB7AEFF45
AD2AC30BDA7802D7503583B646672DFB2D4532C576BAA3EDD730E3E86D37BACF
A2E015DF3DF81B73D2D8BC629DC6133587AE04C1EE31F5B931B1D9BF9E25CD48
6E2CD3E2EC82B7CD8D76B632C862945BE312984181344ECC14E077529A884E8A
BB08C750E1218E760A7D25DF2AB0A374581D99742D89D0923070773A90E83C87
B9988A572A1510D86BBD5918337528F070E55317D5A8E37BE2220181CD94DDBF
59A0D43CB2079254E36712BD7FD7B6CCF37625A72E5050BBD0912C9079CCDAFF
FED88F72D3C6F92C0897FB82EA4D0F1584DD71D958383EC74C8A36B25ED79857
AA176BA88F43CC981C2F449836D8AF6A4EE03436B4CB13AA267CF9B1CEA0BE03
4AF4FEB6564B6B077208008412D5AA3898044F77C9EF13C74DD734EA7F9B2A76
5806B500A529218622E1F048C2F8F5C337735641F79DAD009EB225D1488D979F
539EF0B8AB0B4503D1E9AA7DA1232B99B9966396195AD066200B28F67198A4E5
0CB2A6220B253FA841290ADA4C86054D6B0025EC3838F212BBECF72DE976D89E
9F7DF4FCB77FD98BDDAD8858EBC7217013E440EA7E00991E91891C7E39CDD44D
1278951AC1ED3D89CAB6E6788C88E7265ECF887BAD0CDFE9392904DA2E91C5E5
B80460FA57499756BF183BF21EB1C62D128CC6002EDE11666A1A48DCA50EEE70
5470C168D8D2CCA2DCA5E89A1C0434A7F948D32E663099A33E1BF3E1DB36730F
0B31F0FCDBC0CFA81644F9236B44E61149234AA99D827D6241759CF0BFB89987
3B4FAAEFE0FA876C62CBF3AA1B62AF9EC1087C11EE005327144B153EA731B182
62C2691F9D4056255E20958872930C4D7B47F59EE1888A95402D5FC9722E4D82
DAC1905EB66568966192E0F29C853EFD7B5633E839356595230F3F7FCCC8CA94
AB5D2B37B345CAE63B645E52C5CC0AE3A1499D26622CAEF19D14EDA2CEDA7F87
A8D9155C1B486DE2FB74E495E8FDFC55A4EFD7B8D718CFB9AA7B9F0E4E6CBA71
D13ECF2E1FE845BA10D2AB5000749EB4008B1947F29671DDE9430CD7E98D1A2E
E9963E49D8ABD5CBBF059DADAF242E843D2A9250D6F155D5C2D485E4AD7BA161
C596F7452C03A78058D12C2257D2FA90BAD0E5D5EF4F3A2BB860CF7E5299B23B
0262CE0FCACB721DC537C52C521E6D8939B0BC931ECA91F841D815B6133C269C
C8569D754FBD341FF016240348CC0C7A5CE8DBCBF16965E11B156784F0ECC7F2
8F0ECB2BB153B1F59D405C0E9E4833D32FBE30E7A9FEBF4EA304AD640093D80B
47714797BC39738C3C7E3A3AB98619237E2A03D298EB33D6C2E01068776A099C
555AFA162C73068392FBAEC21357A17EDBB93DA568386244CA7CB840B6EDC47A
EBBF4030238573F1E149EC498A892D03456C0E07
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 67 /C put
dup 69 /E put
dup 73 /I put
dup 75 /K put
dup 77 /M put
dup 78 /N put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6E87477C9C7843343C7E9E3F4
0537D461EF019E046DB8B5BA258462B2FAEA1826B3410BA3333480CFE0DECE61
CE2731FDDF7FCF2AEF7CC2B1EE7095F480B3B27D78FA90FBE923D372C680C87B
7F0E702B8FECBE0CBCB087ADD6D28549FE707FCB616448B0D94CBDC404915943
66539B177D5940370C2035D0FEBB3A3C666ADCEB45F5B15DEA729BF86BBCC309
0294FF267657EEA805DD28DF5DAA83ED214BE123B77699001967EAD2D6240A45
37187E2968AD29A507882B5EFF2CB573B842B882C9A84E0E991F3A98B1AB2E0B
F2DD1AD342D6A9DDE82C2A9040EA273F5CBF9354DECDC6D11A2CC9C218D7AF62
3FFD838C2AD3B5A7867A2D36A4DAC2F43454151C1208C1C973305A3064A5B68E
9733FE800C0B6DD92F12E8D221BCE239832F1F7624B1CE6FEB269A1064CD608B
D1F85A4168A9CC09F43DE12EE1503DE245BBD8F496F20A9B70BF602FB1080732
F0E4F6AEB715DBDA5CB14D6CFD903432A3A9A54AB3AFDDDD302F7132F6B7C4C1
F9E5CA155C99FD71A791264D52970237641E9E1A0D13EA971F1B740D6C6BEE56
B66A726E3DAB54F500DD1571F8461A901324B089C2DFBB0E531E5D79279A55E6
BD116ACBA5CBB47CA8F5E9558DDE67596236811EED20C3FFA9F201E94751AB24
D28A6730587F1BA09A130E8A1F66D4720DDBED5CE9CA6F058CE5AF947A7A8542
3D4AEA65405D2C2ED1B03CF05A1A2B9DA70B449FB4422CD80F79734FD4D41615
0F5787D77D42583BFF642F5B550E3846413F58FF7041DF8181C7992177D42806
D5DC56CA17EC92F8C2F69A2D106AE3DAD28983B9971FF1BCE8145091FC872FA0
AFB26FB65085CED6B08A07026EC9AAA2314F55F6732BCC58EADD58770D97704E
23E22AE5FFAFAE6FB1E46BBA4A8385785F2B03029698CA07C1420A7878A59BC6
4C950B4662A661B3055553E221223678C196DC8566902158D4BEEC2E61503E45
F85184B78E2618C33860A4FFF4740903CECEFB98B344FC2EB5C65F568F32FC9F
F0EBE6C2781D3D01971697ECC0549193C9EF2109267492BC95F97CEE1FA8B703
7421582BBB05C17F6112F1EB4176D604BEFF201F975D6FB765D04979B6232D59
3219C9DC260960EE78FD8A1F2101B43C0D783008BE3B2F3C9E9E4AB93F0D703F
21DBB822E2228E559650D52CB2643C5046B51670362543030BD25DF97D448F3F
C60254EED91266FAFB926D5AC6B9C18B489BA5BF81FFD29596E596D14E42A5AD
F4ECE8F4C37709F9EA06BDA65683824D69EF90BA813C838D2FF39D812883E872
46EDCD717B2FDE4AA81D1A17EFDFCCB9934C5BD2B6FD2987F479AD015C349713
89B4C5FBD7C6805B4EE16C1D589C67A845540F81235C4CA7E0DDBDBA9939613A
5B31EE85E110F4A1A46BB38B6E88927F1E6D1E12DCEE4F7EE0760D991730FE65
A237C3E61B94B9A5B3F0EEDF353D98BDD5E2113D1D5B9AA8BEE8B7B2500EC304
140C4E1569907044E8D512FDE2C66384281E023A613F14637720F9C68B54012C
AF80AEBF3F88ABCC4437653090D418E9E6E8C0A712C9118D03D4A9D194BD9C42
BB045F9D7A7D9F1E4C0B9FC8B230851E77C247B28080B63C1DC91E4F0024CCFC
897AE204E711B7A0245344657444858E441555AAA7397008601767157E7F1C64
6E8834B627623DFEC98A9A2DC19665949CFA61D86C6C79A9FBC9F51F2EF5D34D
B5090868AFD6C9916FF442135DD6F7F5C76911CDDC757675E8C5EEDA01C8A044
B17AA2ABA3896536AF4D86C6DBDCB79000100A07312CC045500FF3A1B521DA53
AB5DA9AC0C3E84F33254A9575BA463C1EDB0EF8FDDFAF14479CDE309F4CF3FA1
98C92310DCAF9166580074CD7C1F970C97A0E12740BC989FDB7FC5D65BAD54FD
0C91A958445E347D45B4E3B40DF53CA78D89C7C7521B2727A938DD9BE0D35501
0D5B911428707EB0619FD5E5C9EE661086634932F038C54C8B75C8DE8B888FF3
9D12B782E5CCDABAF88D33FD49A125715A4216611FB6C1BF77D0A54DB84D22D8
1072797B96E6BF601068500F64BF6D12E820E46023BFEF4C2B6A6E5CFCB5B7B3
BF68FA9542C33C65448133EF9D65578A277FC4E86D3EB647F6387E331E218D5F
E19A96CB208406380098B7872DC26F46525FFFBECADC496E696184C03E15DBC9
4CA0F40048096777A1A85D5F6DD0AEC487A6839C9FDCF4E95430E18C9ADF21FC
75DDF37285DEF3CDB22BCE08C2D86C9440346BF88F016DAD19C4AA93012E956D
6A84CB1A58EC2305A31398848C51E4B81B371CD3A18D2F606C237D5B077FEF37
237C27B85599464F01082CDAA0D0DF6A135091AC282EE85E8A46856FA7C38F5E
21C73FC91E357319CFC85E87A067D21BFCF6EEE4F4F85680E4DB3168C7D04E6E
A956BAB558AB3E19C799D2D6466074E8D6E533FFDE89EE94E7F6A0C5BE7375D0
C9EB2FF7C7884FAF3B7D5BA899C28AD47AD0BA3136253E0C285FC4FC8F36F84D
38D5A672039545CA282A5C973ABDE681134F457D809DF704538EA3C9EB287A0E
BDE211C018E809EC6F2754A6E1D45DF424BE6D70DA65EC5B4417031E0404A943
65085689BE28BB362528406ADDD753555C1ED12E7FB438557192491A07016676
B940A6D69E932068F4FC4FF951A13A746B6CDEBEAD413A41C57134C70731E35E
7F0CE8A1B420BDE04EA108428FA76B0005FD717A3500C6C0409CDC59026787BC
BA63E1CE3A1BD06E1E80EF8F97CA7816BD121FA209BAD3958765D489D81542E1
E2B2F009ED95B187A28EF4B0B3CB854BBE9EFF703EA8DD866D1894D970DC8669
0A9A839E6688F2062B224900493D577FAAD9FE8959274C59CBF24D0793B9F89E
8D51DFE0AF712A059B8DD1F5EDC6F58947DE29C6296AE8E252AB2AAD9B330D7D
7F1A81232DE1B20F349525DC3A5D6CA8E2BF64BE1C577236367117B88B0D0627
D35441AE5490919BFA13E1F5494FCD15DEF997A24198A060154D2232202F3290
E5ECF3FC7B611D1B4A888381392F9339A37FED6C6E2F5AD1256C3CB52F4D30EC
D4D38DFA2A7EDD57815032F5687C5EBAF7EB5F4FA4FA075C45296F4DE0241682
7BFFC8837373500C5592EC246C93ADD9146E5D66342862BF9D8D906F1EF89B4F
E47AFA8155069B7DD8D68DDD0C52788EEF5D85383F937DACAA72B0492A08C50D
286DFC666BCFD2F89F29426EECD7A711845170679E13D5F60C3EF0F634BA86B7
4177DE15D4381B59FDB87A0FAD3947ECBB7C5B8A5791FC213A18365635FA140C
EF7FB92EE0EE4497CAB5B40A3C557BB9F08A0AA90CC142A9AB42377366C3E69B
49A95A4AD0D9BBE4217B3FE274BC35A24E3013919FC69DBE9F43AC6671F36C60
CACF79B9C8FD85E52DEEB29C01E8E9B5401496F8568038873896882E305062F4
6E5BF42B03DA3DA376BA9B3D452E378101A17F7F5CAE62990B79E00341E5E3E1
946A11415338E7B580718BA4A510F73738751F16AECC6920B4183CFD686BC9CF
60D8F441BF7015375277BB18AF7FF85BEEEBCCE7B41B3DFAB3B81F46935F938C
7EAD53ADC52FBD72C7230CB9C7DFE206EA8CFBA58CF5303ABAB45EA307F39BA4
559501734C17E5A3E56E0F966383AA9F7CE593CF592FF5D57F4D88ED69213F36
8226EF2E7364ADBB52E611C86E5D0228A191B159197B942057E309939A864011
EB577E32AD10F1BAC3E67DC8722CCC96574F378F30B5C05E5092CD6A02B8D7D9
55134460AEEDB57B98E148F0D45EE97E2E49620E62D64003D9D3893BCAA52654
EDBDFAB27B86460817278607B66B50F10BB95B24A3F8811B87BD2FBC66F9280B
593F5D11134416FBB70A2E227B342830E1FF1E5B0F780DA293F7EEBA0634B5B9
38A39D2B756CA800CA4879339FDCADF54F4C1ADE5083696E621D9D35D4DED285
152B6D4E11ABFAF291C10BF8BA982A104231B5761EF2580EBFD7C0A05BBC19C5
C6E03628B1E54EEAFBA7C9EC13F5EE73C92F59EE87E3A2FE213FF1BF2F72997E
A5CE73DD3D84CE9801F26422EA9765DE950EC4ABAFB13776CFCCD24E02365152
D496A80F43F9F08D8D1787B400B4AF40EAA3046E2C8F0ABAD320FFCFD590AF91
3D7242AEA90B7B3E1993BF8033F74C8BCD9AE95902D242ED72AF9973260A1F83
41A9B13128B722579068F5C8B1BB6ECF59D8E7B7A1724E2F5CBDF97E1D3656FB
084BBF72BBDCC6578EC938378DB0466C509BB5BC7D6629B76E767E18FD820816
E938AB5FE4E161197F629C962A5164F53356F84F688F8DB59EC05B8D639806F9
99161F07AF11A4F82CA50C17F862A58021668FF242D12538DA398900B7D09816
7F23DA97CA3E35B427F01183BC5783B0DA66A9EC6DAC813EDD003606E1A895D2
D792F354838B0364D0CB322A87BEF5A99C7F96181400EBAF3DE4F3A2326D375A
DE34123192B5B349B3A241EC8644567B544656DC14C57E0DB842DF44AD081981
F903DA0CCCB5C0AEBBE5D0B1335C7BCAA609394773B650EB4521CE99EDB069FD
9C90DF5E989AEB54E22D3AE1A61956E60A8DC4FA763A3B928727E41B042157AA
C1733D3027EF763E38CB8315799B638F79769F344467D085DDF7AF125A57D12C
662236E90F4648E4C797A737C52DFD5BAA944E28364EDCA9ECF658E4B8320BC9
F3AB23095B14334BCDECC277BD36DEE44CFB2A020A973D71D7D3D1E15AC9FBF5
1DAD8B7B4D65BC7EAB1CE39A778AB1ACC35A5359FD4DD0119CB63F5A59365445
83B58D34D908F0A72D2CE3F926D6F88C89991B5D5AC65E548DB7DF72F2109488
4237E8934869B4EFA2707F9A3F72B6B28F7A294987E0C064D6DBFD39107258AB
6A4AEC5FB25530DF44441707BA5FA39AC3FD01EE3E70AFC4ED618A3AF5051453
258C5BA83964C9B91DCF89830DD55728F13803526A3E55131F5FF0A071F3B9D7
E414C566E1F2A32971E0E25591BD1EF8EF504F6014ABD1BA12AD459834AA156E
AA557017436506425E1762DE2E9BD7473FC1AE36454CAE2DEB5C06C04CAD2253
CFF47E3A262BCCBDBDB5A63297B0D4CEC10F609FEE5467ACA35A6142918DFCDE
C15C73B16C9A3CA38D7658A3AC8672E475BC8957923BF11A27C704CE8BD98DB7
DBE2CF47E6310672AC840C288FEF50983B4358A2BB393023659D0583795CC706
9DAFA1BB82B2EE70D893FAF589A0D89ED1511469D117C3E53C142595E76D1B3D
497D6633CF714B791A740B5A0E5790DABF223D2B7EDA11E62A9D8E6729DB6E7A
83B3AFA5DE109C04378CF92FB83C1C6891EE2091E054C4AD83198FB6F74E0A74
89325808F6D6216E43E44DD68AEB36561270B523141EA74E4CD7507457B58074
E5E1E7823235D4C5285CF29238963DDA427C859B0A0102FBAFB99F0E952BFDBD
0EDCF7FC6C31BD0F7545AED25C9E522C5BA2139EDEB795238F7F27836FCDE0A1
445D88D9659B81A1C097ACD658CC4277D09B0375E1992D833BD5EB06907D1346
A7F86F3F7C3BE4CCB5370868ACB5D7422837BBCCE650CE13B5461AF519CCC6A0
83CFBE24B619ACF86A067FED3BA2BBFD18FBDD44F82A76741E1539B6E73CE563
1C160C154E2B474C0644D7FD1FE336ED95486F6BD9775F609F730535B7D9E9A1
B3DD211DA36AD06DA519C98FE231886359341A38829013F45BC1963332B8DAD8
7F6B2238D80441858158B0E88FBF8D42F97C3CFC0444A8F002D37AAB2514F8CC
FE6EDED128055E133EC4C598D048DCD8A776FE1A77B0792E268A35BC0E62D26F
E40E027DDB30BE669E23A437D7256BD3EA4528996D3104BE78B8A30F350FA00A
3691AA4C311F5A2372FF098266BCCCA39A34D1A678C00276DDF2290460A981E3
08B9D5A839FD71D8C2DA7B082D2E8F440F1BF54F6F63F28AA37684F25ADB7014
B2E47D23D3A39AD10C2DBAE0E6ECBFA3B14F4FE3CFE1357253DB504EFEBA4968
B02B448DBCE6DB3E2DC7D8DC0A7384E83B5DA16291ACF3F167C2B4C8ADD32A08
F378B58B95CB55D8D0D5FD45D201B3A83EF5EBCCB666DC3C28CFC9A2A62094DD
F19E30DA560C715B565F20B627B0190ACDE15261FA98843297F40EBAC9B76111
0D9BF1219360F5B2840DF649ACAFFC225A73AC282E8D53CD730A5C6D36925859
CF7A0070E5699019E6CD17E5471972E97CD05517DFEF299F2E8A4CA462522AD5
5B265DAE691D4C9E4AEF17891ACD887E82EEAD2614DC3AF38AEC6499ADB976DB
0432A7C470618ECF9519FB2BB301C70C4082D0ABE0EB7410BD9467C232F53399
5496051AFF39659016AAE3A9353406E3B42928BB73CC6D26179B0BC7EFE487B0
1C76807AC243050A0D7757A4BC7CBF8DF22858690B36EF58D803F7A1E2ADCDFD
CB916F2716858449113F16768C35F3C869394912DD28C2B6C514228DFBBD8741
80F780D7CE16DE65AF7A77D08FF03A1BA1B54D2B6C112D98B12AB5A82AB5423E
A9B58DCBF37DE506F6D3CD6AEB245049E54FA7947109E8EE3510C71D1DF899E6
F4DA06F7554ACDAE1C95E63EA75B0FA0098083597E9016385A86328E673D9295
D1761F2ADD02C066D6B40EF6AAAADDF08B63919E60308D5D2BAB4A998C9111AC
DF9B04EFF6C4A3323AEC1E380CFE32AFD6A146E24144D959E3E74C140987C9E9
B63E76BEB878BD9259D771C1CA22BB3DCD6DE53A5776C6A079079FFCE738893A
56B5F7836E56137F4AFDE60B3E3A758AA2B07238EF29F979CC4ECCC2BE4ECA4E
DF0D5B440DC50B592B72D1A1D1BFEE1D87A00CEA74E623AB3676D74D75EB76E4
5B6DD9F939BCAB1BDDD54B263E0391C8BD2611EA6CD8B8C4CEFBA86137E3ADA4
9C2F17951D4F2826B2E93D80FFFA939B3699979B40906797FE516D404F7FEFF9
E8E39D83969CD944A327C03A876C6E714AABFB2B397C6065B9A27DDA80513B0F
793D4B8954D01DDC88C8B005552FD494C87765CAE35F164769AC5909EB58EB77
7C9F040AF1BC1DCDD90789B61BC57B838474E3D639BBC0A96CAC6BAB24C5DD1B
1974B6352717B5972335718F049959CFD3FB93A846072FC193AC3C58FA39BD28
C3962CAE6442E26417374D228E2BDB2362ECA953BDAF170F4856D7DCD5F03F63
D899708BE5CA5C895C27E3328039476765A75EC5BEA2DD981B4C8262F4E9D8DD
301272768000D592D51687AA2B799F1211AAD694403A377CC9F93C7320A04BA8
C35BE0336E05733AAECA363B261E9BFB1FCDA553F93A992D6AF95B89A126D618
8508B431426FC58225430518E67B6C18C0C555E01C918FDC971913BF1A1BC97D
9CB709FC63A53DF9ACF9780A425A3F9E60713C239E58CF5FA48AA4011DAF6FD6
77399A28A1E987D11AFD6D864AAEC2846C7FD61D80E2A565463D7E8E2912E2AF
A128432258D23D5EEAF6F0CAA2AD30303D9CEB68D20D1D29D866958B7D222F76
4C84F37A7A12037433AF03F09F8C436BDC5F7DCE5714EE7676DAD543E352C36C
5EAE9502BDD7B444551122AD08152B5CAC2ACF44C5C20D0B912EF57FAD9EF8B9
DB952A3CBD073F2993945BFCC7288430CC8AC63BAB025ECB238EB9A52ED949CD
98A34DF6C8F1710B5F1EF1A2E2E986268B7DD5A54B14DCF70561ECC5C1A57221
8F5276D64AC3DC33127408F15687061A6ECDC52E42297F66CCCB223ECFE492E7
F53862917E74FA44F9469AAE8F2CAF0B23F721D0DB45965926A3462C9C150C9F
42239666BBCE3759F84B5BC6BD45980ACA255CC43C28CAC4528BD8138C5FEA9E
E6063EF06275CF17FE5F2ADC142024F2008D619DB7FABC196C7001344FDDDD93
170FC0C3BBCDF6458A35305BD56070EF031AFD608C4A48EE70FAB416EC285783
23EDCF67F95B79A961232525AA130BF6CC8394E7A4C68B60AE0DDBAFB284C7FE
E3EC6DDE3422C2EDE881AF05F139446513BC349E5837006AEB23B299EF3FDFD7
16164F29B816FFB83C801DB9D6550971FE3982F50848273DB95CA2E3620B7FE5
F3C9A19882AF1FA6C2C9934080CB3FE15D6669829F41262E530CC5DC3A60205A
BC0150539F698A92C4D482E80023E834CEA6B780559160ECFD15871274976E84
4554D8AA10F3393F8EC0336DC1385E01C45721E4D599CA14DE15503612DB6F95
156598507E518426916A8A00963A24029A5BE8FFF64BC3C9A94D6E7691534F65
5A9DAB39DC030B0A739EC32E2DFD85F2DFFE449ECDC9C43780C618C1814F112E
E12E9C5284FC4D9F9347B68186227BA0FE7ECC9684E037F72AE4D506AAE2186D
F1F9E6D937B3B62148880A034738ABBF9DC5A2E29739A88C03B103708D79FB86
FD3EFDE6749E68B38B7654972D04A9FC1B3ABF99A1EEA3E20A6941E7F99D0527
485CC3AACB13BB5E2BB0BA6B2778B4D87EC515F75AA21ED71D8BDCFDD6E7A92A
F3E0F50CDC15463CAFEDDCE24CCAE8DF90624BB22393DD03318239A1CE1AEC9A
5EC3D863D664491424E7EF15EABC18ECB5DF000E39B3A5226154D06497F973A6
9D974B1933057EC637CCA60C6C7AA9457C98FC495F964746FE0D99C28CC91AC8
28032ABB3E2D13510C1B023B812AADDCCC7CEF63EBFFFF9F068785B4D7912FD2
18619D67A532636206DF4179410FA1F67B810B41D031971C001F6E7CDDFD6872
F8C99246B19B0F19E3F884C95B61454CF33142DD22EA223D829EA7526313CA35
21E366BC6F04D2DB3D3245730EF16274A352B49BD8C455DCDFC20968F5BDB97C
34E80A54094959AF6F12B66A69B2E8651E7CDFDD3C732DB817E43FB56C92888B
40E486F4E7182E5466367890082CE3CDCA3065486CCD607CA7898B2E8CEC826F
29673F705D3602AD7505B9E4CBA494A7B896143152422DBC0F183E4C2D097726
587054CB1BFCD4DDCCCBC4FDB770D7CA59C3666DF9CFF5ABB1353865367027C5
F29AE22368A58B917FA6E9BEB74CD23C5BEF320F3A16D2B6359E6760D7597712
303941948DB155190294578E2D3BC311F406A407DE06E09A4A639EB682E723F1
32B64F3855BDCAC1B67DAB2D5F893EE00D41639BF7B90F440E7785EB85967178
3B5DF929C2DEFDE59AFFB3CD4DC3981BBEC6D547CA773936C768A399C7052559
F280F081F2BDC4D883FCDF19C6963DA32838C7FBA78BDF22F0901533E9B8C169
5147F05FBC7963A9206D10A6E950CB5BA14350E4AACE8E2490B38EC98DDA23D7
840D0DC523F9CD73A63C78517A719A9A31BB6F354C142063CF1CA5D68E00F9EA
84D17B70B360F3A41E7BF8CB4E057161701B737258A7E9D1F7D9E7B3B432C4E5
B953F206831E8F728FB5ABCD3876FD81655E45EC79CFE8FB781C2B94A492ECFB
59492B989DA243953AADD3B87FC7D35E037939B0EEB0408C93A107419326C0F7
41C93BDE8C144EF6C853F399EE2AC13F033F8174E47CF6DEAFAB5B5E175C2049
52CD3D452BAD541FD3F849E694B4AFC79CBC4CAD0275A7CAA30B5F583CDDE8A7
358F7B442A19A6742BB442E558A2C28D02A265B350A243417BD61D0358E2837C
4026EDE2AB5F658F733E76BAF96E07031EB5887152E1EAF70F78C592DC9B9383
AAB458D26783BBFCA413C4C2266F722E4EB0DE98F861A5726DA71B2AFCC99F7E
B7C2C52278BC9CCD84950A8FEE1575F00D0224AA06226990239BEE4E7F6424D0
E974452C120990BDE784242C5C9B14C429AF3635DBE7F8489AF9E67EA8A1ACDE
0490373A9000B3D04C69A2AA45D0170CABA3AD72305F06A98717E78989C5464F
FAE4247D87D73D5BB17D3262DFB3736504545D6849826D292A5DD20AB583293C
D84CD2C8D2CD9BEDD766463CE99AEB1153D5B3FC723A7215A777DD7FDAF002F6
8F014FAD280B7661088DD8983231AABF86DA34C797D30F485D516552B0E0618A
1EF4204A79A1DBA5CEB2E8AD9882AF5C68099C3FA4C1D744F20295817CA35C57
C6F503CCD78EC8A3C6832BB1F237270052141CA1953547D5A04B85A3D917C839
0F99A3F6D80D4E98C3A7302EC57ABDAB6E362C658F320E087C8C74CF975BADF6
37A7BF541305B183D7FF64CB117ABE06C9DD29427E6181A259886EF29F401BDE
1C57EA1628B2737352438AD4EC63119AAE9685692E000CD645089AEF5253B054
56B24037FC921AEAC13BC60A23CBB8733D90FD70C81A31F3165723F9C8455B76
9DE3AF10244F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/UniqueID 5000790 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A447D5FBE86D961AE4D4251149F11C4BC269E10B48E8C42DC2484EDE87
6540CB8A5EA2494148D09CC9D5014EB73217F6777DBDFA938518614AB1AEFD3B
6382C444B21743190B8854E04019A7B677D9E361A1F92C3693C84FD0E24D8FB3
D81C62E7064A6A90C56EFEEAAA8A157752684E3BE0A2F19F331083AC18D29200
3A4F1989058096EEDA20E3D03319031461345ED5CE10481E58D1C170B25EB4B6
F73B102BAB308FBEBC29633BF334845A9E9EDB786E2A32E9C724D1E49B2DF382
9DBC38FE3BF419CF61101E731F72C90AB22F3C48A3AE6A6C27B93CD0C087DB6A
616D78B75D38B744A8B79DB48EE3700A7A965708305E3922646138687FAB4C37
B940461818ABD009E0090AB41C30E4649E4441C67584FFC88A177F4142530589
31856D3B72C92B04535EC9A3FE1372E0FABEE70BC265FA4B42B8E47D58
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 67 /C put
dup 83 /S put
dup 85 /U put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D913FCF244BF664E52
6105E2DDFC0AF5591370BB319E653A6A2AA7FCD80CABD3F952FA948239E2D270
07F90D70B53C103507F1E6B965151331708AF0D8066824D5B5419C72E2C191B5
428326E0F9D7EBA060B93BE42FDD7F81CDE2C6C297744793B513C87B10CEF0A7
644BEC70EB095D01C723C9A088C4C22C5A4B21A9D4591C37634589EBA34B363C
41F2E99812DF9516F033DBB6205EA1D5AED112BD7193150FDDB467A24E755B74
A372A7AB5F07A60F9546D3849F97B09D77812EE91D8946D13C5F8AE1B8C32243
6D2F29B5A0817A292DC62D8EEE827AE1315D950E9E852F3E7B9D32DA0D1E59E9
096F2D6E0EC93B82F9E2CDC67672A0593ED4CC9B495B280B1B24615341AF0DFB
5A7C924F034E9EEC81FAB570A6923179D74662A957BF5AAA7D7739B56663B15E
38C4F5A8A047D31E00A6780A0AF808CB31CEBD25E565F6E262500B02097887BE
9892D90579210D16F12CFC85A4CDEC4EBCE1F3F8C35C3E6995E9A29F81310356
F317C6F1B14E769605C59F8600457E6A40EF1F9508F20171B386BC5BB18A89A4
407B69DF3B553BC84E461E29B13E01B28889D2D87C7F84745D2C14B4A5BE8190
FB2DF02BF4DE56117E73F5849539DAB52827BB82D18C88B07ADB0444A43245A5
F5F2AE6C09605D523B3AE06B0E2F3968D9BD0E70358515444F76956004498F68
8B26B90135D1C2F950A2AB20D52611A2D9267793062E2AD43CB80F7FB04C82CB
FCBC6E0CEA0A3F2E81B28720FF9B665EA760F6F326BF16C16690CAC1B113237A
70B07B566DC09674EBC8438CBD722A05A4728F9E92016329C227B98AB73C3796
BE3BE3378B654C65A126A62320C31BBD6D7BF973AC14C63A9151BF8D80FC32BF
B0FABB4AE86393C0C7357C5968A5CD03AE391C471F6389B87AB5C9D5A093C56A
752A8DB20BE8EC3307574A461AD20AD60D480CF7E704760E040C108E964D4FF2
C7D0DD0711570F85F2C15F8F41B3061A7128F7E4432C965C3D243B2BDB966637
A5C9287D9086F6DA1BCBF23E60E3AC9F4BCD4AD10F10CB5533DE88DFFEB94544
CF3EAB1E53E091D64FD61EEA5A6FA463122041DBABD15BAD7A416A933C8AF318
1DB5A6E23A59D09E0EFF83D7AECDDFA77A16889C20C7B903E6CF8FF946DE2111
CB38209CC85C699B4985DECBADB33AC8DBEFB7B277D73B33207FDAF6C48951AE
B30BBB78C08E2DACB20379634A0A039F3A2DC93766BD59AB61BEB824E842DE0C
716C68B94006354F64470D18A1978F497C538E3E3A2A222C4B528A6C5851B748
0B6FABEAEF2A75855CD36B72A1B830551B00FCAEE3AA9D483656FCDD7FCA6A1B
AAAC8798BB15CF09370AE9C398C7FA0FE4A571579EB52143263208C0C4E8B9D5
E20C09E2A48EE0507563EF8D6DE0F793E281E39E68B805341C282415A605E9F4
0A1C4E0773F1A3334C1961E592964FD668C15381D575F882B5632B84134D0707
F0F151041ABDAC6BF7C804A8AF14307CE818F3911896D9ACE81A74C34FFBA7E9
B152F91355DA05BC1268FB1AFD98E91D10278D4EC18A6523116F430138AAC027
6BF67A2F66360494232B1C5399AE3B2B0756FC0EF907CA76EBFE656D643C3DBB
157AAF6DE7C7AD6EF26D76EBA2E0A378D254DFD0427862915EE9AD84CCF24CE1
1FC2821CD5466DB21A63E866136A61D546C28DCE0FBE7FF184100DB25196C49D
B06D95E637DE9C7B2F3A93C1C0B866D96FC1C6A9FD94241F909911C5DA7E766A
729EF68DE9517C05133CB36C2F725297228E64AE3462C3E9D8379351544D0EED
BA11DD830CFA5F5C77D12F11E06696627F4A7C672F28F5ECA3F21667DADA3B6A
0D5EF6FD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/UniqueID 5000791 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 61 /equal put
dup 97 /a put
dup 105 /i put
dup 110 /n put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DCC90B7AB7BD8E835CF598BE8D4B23FCACE02FE127154DFB564F38B236
276FCC5A538CB425A66ADD7F7BA4C4918FFC82CF78493CF0A658E57FB746BA0B
2A96E810DE368B4E446E8D2047FDDED0AB1350F091BBCAE5BB8A919AB68583A0
5CAAEBF85AC672C5E9BC6B0CA40E82F23958736A52C59048101CF654245540CF
E217C82D9C953A006EB39E6C98958FE034A8758B66C60CF53D8B24B53B5DAB79
466565D7A0F0766B00E47139344DBB54EAB1C2AC5AEA73CC0055BA8777786C84
8A7A905F8821FBA17E60CDFBD018A01B377B17601D1CBB4EF2DB5D31194F484A
F7989EFA05EEE404E093399AE51A0D1E1DDAC0957F81F04315CBAA3D6C4D6EBB
3E2CFDDED4C3EA600FF847EF637A78BE0AFB5C567D52CBFD677D7064547187BB
564870B49C92CEDBC406744F6EB5F298E7D680DEC393ED6DC3E4F1048ED4191F
1F061DBC30A71D46EBA2F0B64DBB8B46406D8476B9ABB78843C44E81FA04CB2B
EDA17E1D4DBA1E74CE52ED07E552762F1A182ED1EFC8D15CB78452E563997676
9E25FB4FDB64A6ADD4858AB2A00E9EE4C6921F28075C42B113E259B38C63E233
3A731006079DD2AC108D216524F976E814D08D4745F83ACF5E651F75F1C4B4CB
7EBF14627C910B26F53D937506B45B4CA96890506694D1999E47F47A5E8B1715
E20B22870948B3AB7F26DEBFE90E4D1CCD3ACE08686AF9F4F132BCA3A705B629
1B1904BBF10EE8018270E4CAD860914EB2EF5F55CE8CFE22AC50F8AF7F00EDF4
0BE69E0C1866FA823938D097AF27B65AF46C3626895FCE22A0F226D9B8F2904F
8BB3D978E10D2676D73F5195B405004114699B23A83B311524C7202A0931F84A
69D10F05615286C107053C0B5B4C6AF4E07EDE45CE16C405E126101DD76C7999
36C8DE48A7DEBADEC0A99C9E508028374232BD49ADE73C88E825A407E7E797E0
36E1CC7A30ED83D8E8E3C27F8210DADA81A578CB0E87A583B32974A99459EF38
5259628CD11967DBCC739CF4F6D6A74BB75F086A4EB93BEB663BF458C50E611F
218C36B297306620EFA43BE48FF9641C0F813D8D239447E698453297FD75DF91
9FB1211D04CCAF2B1E3C3EC91C6A75571723D43938EEB0F5D03DEFA00ACE71F2
38B8C275DEAE8B1B6FD4408D8480CFD30E4408AACF4B2519FF8BC2A62CF17D4E
AB8590916CAC9D28F85905C0DDA28BFBC329DFE70093771C4D298E1DE8B9E369
9A3390098DDECB8A8D897C9BCAA40E1041690A1E951D5BE6E26DFBF25B537D26
3353AD841F8FD7848A040188E739EFCF75BB9310AEB57C5DAF13AC725DE14558
4BC95F3759293880E1FB431A868E70F8C5E8F2A8CECA5393F806948A09613269
F0335DC781E99BD139FA8C9D390444289809D8CDF5B01FD7E76301EDB4677A27
37A708CF799CACE81C76BBD67CEC6C59EB60D6BF4D90202618DE2C5050D221EE
E2DC5720925D7144DED2DF1E1281216EADD443BCF35ED4FEE1B91C17F4730369
75BAFE3D75209D951CDE6BBC692775E16B875A420268F843348879622D8E43CE
B54B490DCF64CAB8FC01DD5A4F7CBEA10703D55AB70DA1E49F565B0C9986B6C9
5EC2B205669386C221D7F37BF6B5F83024E9A3C46A22090A7219862E693C7C5E
1233F13A35A551863C9A3BD6DDDA6D93E01A9F4B98FC773F61A766B626D3A6DE
1C3A9C7F0949E6B7F347CD46128B2515FC7C295DF51ED0CA671D5B727991491E
5E145875D0732E359F32C76F557D29A97F898381A04234D958E6763869F87588
45ED0C5CDE71F85A2C376AD612833E09E7B352A0631C611A2ABC7B539B31AFD3
B4555CDCCA380178D855F25FBD6E97324BE1505A1347957DD79579E649FD3145
FD0BC81AB6FE5AE2878DE5047565187C341105B044E7AA4C0CB5EC2C759649E4
00A3A339E6A03B72AC8292D267AB9F43505A4EC009867B0BF0DAB888284C0508
3CB53661271C0BAF1C9F07F2E69A1D61068F6FBE1EF5B354F11A081DC82BCBB2
D26F3F9DEE3389410518D80E6903724329C7A8A2B30996E360872AD6D6EFA551
B1EF419447037F6C25847CF444659BBCF187839A69555C48F9FD563A4DA3246B
66405B7425B6A3B0993DA19FD45F5F30C204DFD516AF54AADD144A821AD62E58
41146551A15C2D2DAEE0ACD07E485290BA0F1E780D8483380580FA3E0AD8ED29
9988EECF6F94C70E893C0B4073B980040A0E52A2A296B0D3CCFAB6015051F7CA
7E7DA1539CE3AAC9F9CE9E0B87BEAE643CBE454D392F2723E879FEAC00B2EECA
3519EC32B4C31F44FBBF10803A1C6321EB63A309A0A228A10F4C7CB1CF828A9C
9BA47DC358145B62B5D0F2C789FACD0C35DB7C6AE4876C75A5616811AB4D5B3D
2385F170FEE63443145228666E1F76FA3E41EEA3BB18EC8B758D73D5C5F7F687
4E91497A2301CC9FE89AC761B86F395515D54DD7ECE3C09E47E2E8B7B4E5B768
EA4B1F282D1937A2C639C64FF599289D889AF350078E78375C0E463D3163EB33
2E59354EE8B2DDE0D1B62BFE28D9414833D4F36BFC8EB153CA4B4E42519FB8ED
473DE6293E97FC98C2B1B0EFF3952DB776AC8BC01B67ED34205C331178BF74E1
CF5BD1338C899F1725961FDF0C640935967C6F6A329A8F2CB33283B1FF4DE693
82A34FA9AD1F9EBF691459DCCCC211E4F2D44F08169E9BA58E2083FB125D5EE1
62B4D441F671E34597AD0791437E97143D4D2BB8F5C61AD51D24F06D5B48A909
FFA336C444CE5B40A496947A19AA177ADB3782FAD3BDFF4CAAAED272BC55EF4C
F6464A176149C159FA4F770BDA09AF11CE8469A00C3BC25EBEB0266453B3CB1E
DF6B86B96922DD118A73C6CAB80C45D2E9752E201F8EFED756DD4B88F1F6FC41
F3CC66E716C111A7717E97D2A06938F058E29AF9D7F6062D9F9C88BD82D9965C
7623BF5C5B3AE46CE11E236DEB858F6458DD93F6F34A3155D41819ACC33484D6
14F7A9ED4359AEA17862D4621B98785181338A44298545957E02EE4B399F081E
A95C3F070DD274C342A422B78DF1BA14A853FBFF75A8FDE9E8AD12B91F87D9AC
4C116CADDA73FEF8C98E1B511F1A1032AA82D21C81405C33E0061CD08ABE56CB
6387CC9F187080A1AFE1DC620A13E78FECAA1ED5D97C1A2405C460D76DBA667E
1F5E59834B8CEF12D0BD4C95B975C6C442038D675EB0AC78AFA87BFE9A3162D6
1C18DB564C097842013C5F01984719DAE621342E1CE45905EF19ADD2FCB7219E
3BDA46D8B4821CDBF401CE31637D354F718B746F62EBA827C8771FF123CD1154
35C17535FEF42DFF8C214A65319AE7DBCE233ECE59833105491EBC959DE4BDE3
5F22C3DFC3D0E5276A2EE5F461B9A6BE6A4D17289ADFCE227C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/UniqueID 5087386 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 12 /beta put
dup 18 /theta put
dup 25 /pi put
dup 30 /phi put
dup 32 /psi put
dup 39 /phi1 put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 67 /C put
dup 73 /I put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 106 /j put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 118 /v put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C142709006B68486B326967A28D
41E878EF9CDFFA015BFD11310CB2305640182A131B96D73348B7ED8D31A29D7F
2D889D8EC4F6C7A55DD179594ABED611CE4DE790CDDCB68CC677A362B879F4A7
F4F84113A561F6D170454B0DC4DB2F973E21176E5B00D0774F0BDB3F0E22D753
FDC635611AC85411D57FCE2CC85BB5DAE17BC41F3C1E5CA1BE272ECDEC1C574E
E68E33D4D417A84B0C8332C0ABE15953794D5FF6B261CA10AC396A65C7C4FB21
177503D805A3A057C44347F6DBFC0F0814ED1E9870762B179B038D83C1837268
5B9F161A9D44EBDAFE1A20CAB17E30330007B4A87F79AB072E704173D211593E
C9D7F6CB65990B7D717FD5F35668D0E7C985B22294658421D1410317C02B5278
03D53625BABFE9264F5718DC87CBA6F4A233184480098C1FCCB58DFFD9801F25
AC7EE3A0CCB8649F60957249EDD95E20DF0EF43D777C2234DFE67384E6E57AC8
203F42125A2655A3EC460941BA4064658504CFAE58C074D92E17607F3BCE2F06
ADCF9E627826E83BEA4E4804C07814F63E7973BEA16D73BEA8CD5127E5BF5701
F9D4D8E4170264A2A8E591C7AA3445D0F86AF773B960B1F5B7604001FA594EF9
99C3FEA429669960EEE33E1150A0FF41733D2E25CD1E5BB0CD6685444271EA2B
F01587CE8E7034B2C4C167594B1216C2D9C75A57207AAADF134F4E9CD1B115F0
C8D4F478D0073E2CFD1FA842931A7917B2515F302A8625F6E683B7F79B4DD5F1
392A22795E62D0EAF9C69AE053F2CE46A77DDB068608EB4F06CD55A8D73EE0BA
B4680456C5008EB66FCAD7B7A6B429489275571F6B7615B13EFC3101D7CDEE0F
B12271168AD208A98540BBAAF61C73D2254EFA2B74E2982572E4CDF1C6E5BA5C
BBAAF733DF941BF1D41FA12E05C70B6412C4E4378D0EA7DB19BAE8A38B78852A
925B3BA29EF6811BA54DBC158618BF04C375ED43DFC76AD0424D6077D5C415AE
FEE988A756A598AA6577C6AC750D662C968935C1ECB100DADDAC7F9227435221
B68BFBF3F265B1D1A1146A91079B753C8F03C5D734EFC0B94C4A58600D51FB4D
89FA797068AB8D3366FAFB35D36EDA2160140D2A5DDDF198275C12BFD75C0A93
C2BE6091FF0FC1F756FEE0E51A3A5197A7576CB7FCE827E8B6C453F843B10EC2
12D258C3CAD4B037D1639B616A81B2E18349C55F794B95622CF9876D9CEF42A5
95CE4B65C86C104E9D92A4299653008B016247639C78BFAA8D12A215BBC8F759
BA38E547FB3D1F6354011A42436C0FF38F25E5681244A2723F1CC44FC24152AF
527CDB6CBB171B9DA4FC0ACCACA4C870B05CA0CFC94ACBEB6488E7B23653E006
3E0C15FDB7D763FCFC95483BB41880C6855C94FCC02CC2B21C06BE83AEA88DAF
7293943774F0647DE3115C32E72A9B639530534FC6616D115F596F1BEE3AFCFF
AFF6FB6645816F11C173F2C9B5DD2DE4420F29C0EC1FFCC1A034F473805C0D8C
7C534D6F4216DF05EBE263002D39826D4E303B61F54B46D1DE5D402136E4EF2D
10CEF5BA089443DFFFBEDC1671B4DE0ECB2AEEA335B5BDE578E8AC56580FA35C
2F36D58A113923EF432652388121D1BF0407B40D87010723109906EF64FDEFD3
E9122482F87852C2F3EF87B7F506B8CD728DD54B79E8F147BDDB1DC607885E12
FBFA7343990A15C15D5AD53C8DD8710ACDB3786A919FB356CC2695CB277E86AA
9032575B2891FE7BB08E2B6EF58B741F645E9AC0086F205415C83F3223178394
A917C85BCF3DA62AC08E3B0CE768240F0E8CE9FF939E4B1A6365664FA22CE7D4
5735331ADEF09B7D1295624F468BC836A6A8A4ED1A507254DD3D646284B88FCB
EB0923B972501E0E9B0BD14ED17ED6CB4FFAA5BAA9A7ECB2C6A706C3D7DAEFD3
17DE99758270D4F1D04C517645CC5CE808A2A06E998BC239F96D24325048BACC
9ABDA9206931C9A04CDB15B160C3E2B285BBCFE14C06C49018522DF1FA328418
6CC6BA6A41105AF4BE60E0FE5C1E4443365AD34E8A04BC3D5940B0A22BDB3508
838D1F2D79D1672DCAD488809777EEE78F1EA76282CBE956657F90B5AEE1146D
B8C491EE39F986AF9A94C0A03AE2B2BF8873C5ED74CC9345A1F80A3B750DB063
E9F9A79173030F74E6AB55D7B26E9AAF10A40705C18FD8DE9C0A893DA012FE56
976208A53A7B728CB7E7071DA193C8E3CB9EBFBCF4C52851992FFDB6D3E762E0
8E570C3A782191E4CFB2BE152BFD11BCBAA149CBA5D1C825CC3EE42F7EADEB57
DC7B8F13619509F8A47F9AE17CBF9E3D71F985985209D3E576240DB6D404D2A3
7CF001CFF7ED1DC4720F12593F6971C0335C3ECDBEEFD34E48AD802F82D859F1
A89634DA5FFF01581DEAFC030CACD79D49C9D489E0CAF3523221B5D758439AB7
A5ABB133B4E25AB774575DE54F6E8E618B593D006C2BAE052AA8C396D1A02273
B4F321B4433844878C41B199021BA70B3AF2D868541287F814B9AA6B8568BAD5
8538F7BB6C0B829F9D36E91572E4EF880F7685AAB0A4C3309FBBE938A3DE255D
8E3C56C2D870401779979F5B5055FACAB875447315CC774E1396A8AC74A9F659
2D908E518906BFC23EA1F74CAEE9B5254CF17CE16A8E3FC398240CB80681D31E
18EBA1D95C2829E39338667E1F008671E726BFC936154E6BD3B2393B876ECEC4
10118251B03430FD5B1DFF99C5ED51FA0822501B9769B0722A1E8293D71A6A65
A0CC68CB892B48A7C0E1AB630A3777310453D7EAC0F6D07D3C91F7B3C4E1DD5F
FD74E0EB6E00D86EDEA17683A13EFD610027E28ADE5C01D916782324D8B6A3BC
3EEE3F5A604CC9E34E553BEB8FF60CCD3BCF1C89A0F847418669120BB317D648
E5E69A072DA8D4E8FC71AC88A0A46FF92A29A04733E42BC5724505B8C203548E
2513DD36D8B1376C86D39046074872A7F2CAF7DB05E79496B255A8ED0603BA7B
220D110DE241B3D2757862E3D734568511E378A7D404AB99CC0A320B6F1914C8
E3B6DD6B49C481637B615F6C8CD031D2F3A005050C80CE52541E14B83ECAC611
ED14FB2F017F69FEE82468C522A25C5133FAEE9770658283AA3D71EE65BE8062
0BA2886C4C017383BF7C1E8392F023E39F254783F6529BD9149037118933BFA2
ECA86538E47CAE3AAFCA516DA2637081799483644A2EAE7B77B5C70B470A31BF
584C64D56350FEEB76B115A7751F9DC05D2B342A87C53849ECFF5068265B30C9
37A2507CF76B1439E20C865DC98E53B30F6A0C6E6CB6E9F75819423073D673FA
22A36351D23BCB834DBFC52C059630925BEA7193860C5ED01040D84E61053FA9
1EED8CFF5F54958A3923CBBA6ABA1486CBB8A86B3967720875048F3C7EAF9DF2
96535141414A4C4A4DB3F5B7CA467FBC7EB1D69BE5A4D33A1DF611B3289CAC87
E1FBCBD44643FFD1C7F17F88E636D3F39C5129ABA7BCAB39B3C721A41CDFDD14
129CF3521F03FEBF4602712ABBBB701CD0CB2C4A7B17865D9B7D0F78FCC9CB55
C29EB72213B628D01694B11BF7627E1DC08ACB764AF16B80669BBD8A62DEF6E1
DA2BE1ABB9906B079207BFC64C9D37848C38F8B59B3918C27734CFCFD8C8264E
31833DB3ECF451634B442E23D0D3A6C88E6FF119BE267B877EC33B74420AC885
020E3F5A0BEBF8D05DC765C917A22A713764142EECC6020EA8A602D2AC6745D6
57D6CC7DA8FD56E1EDAEDF72C883E15CFA5F4BA0366E9E930324CCD6E458FE70
C4E3741EC8C6D8A07822FE00F6595C063FFC7CA3F2D987BA8DFD246C08F30998
D4C5AABC388B7BDD0C3837A70E85434F42F496A24D824EF0C608EE81303546EC
BD2720394D960FF7B74AC7D78CF65D18A360DE62C2839F6DF7E931DB05D6D594
AD4073DD95F8E9437CFAD4041D3419FC237FAEBD2841F922F310E70632F91A30
720ABD38496D45B15F9751A8F14CD6CD882857A59B3C6B4BDCAD9B34E0CFBF4A
9811C6A2B1DBDEA1B2A4CC9324032FA40AD7D45E9E23FC3BAE2AFFE4895D41DD
D03045EA2780FC9C8089A623FDE6B742567281CF90AAB318773876D255BC01E4
31C56BE1FB474A0BAEA418E89740F25906B1BEA57E0F98608D83AC82F7116C36
74906D59B095D7F23D9AAD630F58C042C1870C6A170C470C680A0CA781B6D316
CCB7F8C15A5BBC5B1C28D918C9425A5178407248D4CA3EEA518F1F201F6E5429
FFE77B086B771A878821A51F62E09B7F2D69C4FA11F3F434F93C5F54AA6F5D0C
0F5EF145FED1051DE0EB6848E6FE92016B4CBA44ACB2A4BBE52020E063C634A0
DE01DD3B715D373793F622F0324C6D3E5A16552E378C46A3B7B44D936A4F6ED5
9C62ED09CAF4ADB424F5BF1EE087B9BFDD5EC693E3809C8CBCF2794D2DA214B4
1A3EFE994503529CE6D1AF38EE07FD3BEBEFF0397381D751F605A4E6DDDCC302
0B4819E1A94B2B6DD0C04AD91D35D42AAD31DFC286C001F3BC18618B9F10892C
B8A335217229929156E2362811F130046A374C01093383DA1722F93879FD8BA1
3E446866DC9C75964D9E62290F5B2E103F49E9A1A3D72262D35317A97733DEC9
B4F75D57456690AEAD8E5944D28C3A61D23B93D6F7BA37132188A34EC97E0A5C
1E6C0D7AB0CDACFAA683A83C9AD337F4A4E70C53EF3BB8054ABC482008CCB358
4218A3F510F778DC64CB2FD53D1322EA68CC721E911ABC30606433F2F620CA4F
B594B222796FD910F0B230C6A22F8EEC2B35F1FB7BD2DD23D189C7F8071D8CB3
9A423EC3B639E6D1714A6FE55FE8DC1EF714FA84E7C9AC87E118B957A9E65725
53D625D8FB93692E13DBFB2342D04C7E7114AD1424DCD70C0AF41E04E3530609
73A8BCA61CC24FC93E5EACDB83EF7611DB2CECE1829C08582A473E7536E7AC84
9471C4191D05F83138797FDECDB23244B29D7CB004560DD0FAEE9B07FB48BC5F
D825B0690D6760DC5C21797078A5497F4812FA8199470EA0391FE9DC656203F5
5D5E35D27EF0956309432CAD774170FE87A4AC1E880B34FA7522DA65F8065E73
348C7BD8EE5181FD1D2D9C32AF1B4F5F646823D559FF251FE73516B714C94D0F
93765EBA21012DCA813C14B6525B05792717208FB747E217C559CE84C8DB6ABF
357127C136109E6B3E13C96B81D11B7A246EAB82574221166C8A6ACC4655D4AF
F1983BD2D1F1E0DC78389ACAF49DA773801298788076C80AB5EE210C6F0D02EB
99ECD9DDC7964C081D1920310B7DF1A30E54F9BE0F1364C5581179416199E702
11D867419D114974513D717A511E81ABF925C31E287BAEDB8244AE62142B7A89
5F9DB6C022BD04E207E5ED0D2A2659CBF5A42B6700D25735735903905B2B748D
D0C2379BB5F69B9285F1C4075699A41DD0D9E0B6E0BC5A4CA71C2DAAE06A6DAA
694EDD3881A70A9A8327AF0EEA8DA606BFF622DF2F777873BC4762912A421C9B
BF5802A8650094732E2C273B3E49BE14793AB85B2BB05A38B1E3F2ECEE6407A7
1DC286C6ED81F8112B7277E24943A03AF6D297975FEA0F45E4A5B6C8C04E68D1
EE6BD6102299DE9A3932D41243E1361AC40255AEA2C28B8B7B29D820BB83C60B
EF76CF768CB3881A8A8EAD89F69B4264BB30B13D4AEA3BCA18F49E566D47D775
76887008D54671865AAA84AF549B5BBA56CB70DA64771455038C6EF5EC4369A0
433FD12300F69B66C7F06B934953B5CAD147F257D489CA52AE3F4FFED7474055
A610B24EA24ACBAAD6768223850988C611950594CF46E84A0602F6D3DC2467A4
E765CD4B342C3FCD97FC5A15BB4125ACBA4E0C1139E3F29AC5692D826A02F044
2C72DD4948124F1D10DDD9FBA4A96C346D5FBEBA2CDB6A1CA1F47B4AA8D05CC6
DE3E178A36A4022CC66C8D8095C077D0DF73F88F3CD51C4E8259173BDB49ADAC
587BADDB5ACCED2A89E6A4D070E0148DAF090192FB28FAFC9BA95E4658D67C9C
5C3926D5C1566CB264EF2C1ADF00A610732559543479675100621A53BCD0DF5C
94CB972985C45A8774731C623F61FCD7A0732DE1F22598757A5746D7445D8EF2
49080CEF40627C2B2FA26799B35168F9C4F25765286971F55CDF9FF6CB5A2FFF
93CF819840BBA1DD41B0B4CE53791D55A058881CC6F750C36D7F2924AD37A047
EBFD275C9C5C344BDAE0823BAEC1597FAE020F525CD905D6AFB4390B62169AD8
8D5E020F9F266EFED65D2B9213E9F106336D584985719DE126AED1B87BDA5A62
6625D57546DF120930B2A2FA282ECBC447FBF3DF635CDE1864EE3B46E38EDABC
C8B6AFDE15453D262414F2147B02E95AB07A7B2F1BB068BBBCB0DFD042BC8B25
BA5544CD3041D6B53566D93E4FE7ACCEFD3D72970DFBCF83BC007AE4FE745309
46F76B938CD658C0033092B23A91678C3C746D86C9A664594F7C77C146820915
FAC9142AF332F4189DDACA0A2EF071C37978D7603DA6489392D00B43221EC430
A1C8EA5B1D14082FB2B2892823A8F12674BC84B1CCB7EF0B295ED874453BB540
A5EDD18C315A4B26C61FD5E78CBFE7A658334E75116AE54D24776F21CDB7068A
7BA52C979B35AC622239D8FCD99C52CFFC7B5F29B69EC9C87BD0A2D9782A486B
80BCF1DCC06773768BF75988B0F3E1EED9E1B857353B2CAE59A5ED0F3886FC62
16E1443FD1DF1B4C3CECA49BF5177C985DDA5194BDB0079979BA0AC40F98E4B6
89686A3DCF238FAB285B551A621EBF4CDA17E5419CB002DFCD06345971F7DAD1
394541A082755F4E7D89D25B8AA401D894510C732D1C25D2FFA2D90AEB0E0172
8361681941794F696FDE3C83A5D35243287F958D23AA3CF8D63A7B87B20E6D68
148DE8830830078B19CC275FE57F5943C196FD64B9E1731B1FA93515D55B14B6
276998F52FF7949AF3D1CC2F6A517F83E83931E4D2E7F7E5D6EDD63C8E6760E3
34A4705A28D51B49CC4D4207CEA60356FDA6C86FB7D7DEA3A9F2633706871BD7
078F0FE4E76464DBAC8050130C0DC90A114BE9F85AE7B5093DD674FAC3717336
2BECEB751D7EBABB289005145DC7C4F550A98EBB192343B80BEE707C62436727
67AADDC28867A21D787C0523C34A9C7EBE3D2382185339049AFE7CBC82C5169E
745301A305BC05C2600549F51150BD7CCE144C75FD7EB5803C79BDD4E34A5DDC
0D361A5F4674397A73B31A11181CCB214A4AC30DF0B807889C258F643D0FC659
EB698419D700F49536D36FE2ECEFD60F26A71381A2DEF79BC07D650A169C533E
D20BD922D99660E88BA5C6D2E49A5ADA9F4FA5C34BE5AD0154A230E4B061A389
A80C27488C79E5AC8A103C4B93C3E35CED1F335C289374569494CD09D4A79844
224A308E0702527D682B5CC8C10A717F982844DF49F6C532D49A51F386039BDC
2AC55910CE5685A3037F4514403CBE395D6B70F9CC66FCEBD521A5175FC69681
70E2F4E6E23E08264A2E7DCD723E7411558D625C330DDDEED3018BA9FA854F38
8BEF5EFEE99D7656C69858B98675B76B8775CDFCAE49C72B0D90E3C6C6DFF17B
12BC546A58D37697FBC4D4D371CAA33E7E89E0E034941C705DB08AB95BE54E9D
61F56AF40AB82F3C8A676EACDFC80D1F597767A4A80BD4E465EBE98231EAB859
F996F58C4C744E398EED5729F1614F1255927B29F06CA32B3CF7358BB749C6D0
23C689CF0CEE73E05B032B41E4B18B38AC61E46821C2A9BC1341982AE70BA375
3F5961D3EF97C94C61A62701252AB19813AC89CB958D67CF665EE11622EEEE97
210F4CEACD060F26A77BFCCA7643461A96039CD5F41081301087B3C47075DA50
C6F4A2EC2EE841EF5B1BD22E80F9763777C964D332C341BA3F641E6C1487FBFD
22B68F30AB295BAD8D704680E65AC07E81AD0AD18339C41CC600D84F455BD9B0
13C54CC877BA9AB8C69B2F2BDED87102D5E98887047FFA670A5EA4BBA04D9588
F3EEA7D1CC4A49D0C1769FFC7A8B0A7C55B86454D1F655B1AF56E506EC042514
ADE8CD1F6197A38B2C9ABA3C5D7BADB3AD6A953C1F29B98A7EBB356FB45C6DF6
D4275102F1DAEBB5413766DDE50E614E9545E795B48F85664CD9B6BED4485FA6
D89750FC5A64B961DC3CB8B604AA67F2040140BC366B9F7D4B5A854BF4E4C230
AACE523B41E44D5B08D3EEFF06289713746ADB88755305E364380293EEF34291
0F61ED4AD6E51856D0CC362302C57C5190E38ED1C9827ED30E31B4C0030DD9C7
8A8E9C500AF12E37705B435B2F822961EB4BC236E8081FCE7BE13732E9C0E536
682BC6B6040A2F34E126BF9AFD9C26C89F3D153505D9F1E997E90A2AE279121C
29C7D960D944AC133C6025EDC34DC303AB903AED90A1F7E4BE224B33508D54CC
B6DCD8852C09781AF869BF83A92AF7AF343F459D7E9D1A7A0D86CF20AF08E949
5128C5191E68ED2ED2A37BD0C66F4FBC0FDEEF005086091944874ABE370686F1
9EF4F9A9769ECFD41D51E1E8188AEC3B651527E72769741AD59A66E2FF3ECC0B
3179248A51EB9EB6DEB8CAB5BACD0F67D2EE93A96C6B4E416A20DFA91DDBB873
DC22BEBE7B8B958E6927FBEBED178B762E75BE6356BF537BA53172E0184EB733
87FCE1CB052B200297A7C591E9CE0E2D5831BBD5BAFD931284CCDF4FD24564DA
BCF8313FE80551F2A12ACCAA6366E6F24ACD5DEBC3C265A85279B893FCBF23DC
80759F9172E5E43CBFF2F6468C6095C93D72A97211957E115AB8F55F4114784E
3D386CEDD1036763F88D961F825D1C7C7216960F8CAB3BEE7722A1E5D729F659
1C7EF2C04985BE99F74FB4BE2AEBDF14A6CB279D5B6E873D5DCFCA66C6E81D56
0AA9C7F5CD198EFEFD720199EF5789197D38866C8D25EEC280DCC57F7D7D7738
10A803546B1DB3CA87C0C4C1F1DFB7EA04A4EC11CD065C1BA9A7AA15E10AB137
0A3E660D5DCEB78F020139298C3B06EDE4BD334DC716486EA89D7B9DFD12C08C
8FC725A880F41C76231E66EB81C6D917C11EE7A31E4510F519D2A2E0F0936319
7495C68F76AB9482D25B6CB1FD36560678E9E14003EFDDEA5EE050E5B51355DF
16F90050E9BE1263B0263F7786AB039C459EF996C36157FA8A34A0E03ADEA860
8F492A3A03AEE2CCC152F28B312F99796ED2C4F361DF8C39B69DD816A662F300
0BA8FC6C844638B9EC5214EBEC58C5CA95D33AD2CB1D62D1247D3507E8D75BD5
549B6B9E65109389F1D1EB02D41F583329C7735FB5B44976A3FA721AC69EA63F
4412907FD36A68041B8DB5ECA33F192CA9192615A20263DDE21CFCE7B8707E40
16D741743B311F0E6EEAEAFE7DD51A10D194110477D21FFF38E4E9B11375DD6B
400B59BE7D65697DCC2BB31B71DD4E5201DBF22450533C4C2D418D78489EB1AE
09A3BC1211DE962D79B24E73BC87E212E2CE1E939FC6D52564B1FCD0740B1315
6DF7D26D86431E80430FF599CB806BEDDAC4E96F276D63715CB4DAC1D6C3C7FD
9096E53CD1D90ACD175AD3531DA9C72A278C045B1D9C84C4341E554D36758DC1
DB6D924064DF77376A10FE71B893E473B20A076142B84A1FBEE311711DCAA080
C4E1AD23C76FA9256E7B770D7F566DA0BCE19A7AB33B462C985691290C6BD1BF
BA93BF36851C0FDAD1EC38D207B25A651E73DB673500B08FDED420B7D0ED2683
BCB8183AC35A2F6AF7CD3AFF96587928289EA49AF385B5BAE80A1870740A425C
8670851B4BD0B9A6E153A64C64DDC84B930895B0353D775826AAA83275AD2CFC
E1E1823EBCD739AD9897A221FA6BD28DE79A7A1754BC8D61396AE5123A5F5659
0D950AA723A202CFA87AEFF6D311AC191B98F06ABAD36C41D52CA9A4EDD7044B
C51412E8F8B1BC76B5D39CEB7985B31B1B49E123138FE49CD12C86D06741B749
7461765D59A7953C2A8C4D09E5B48FA6174D8412C9186829FE858901EBB5C660
EE8A5E52881AC987D26B2B0E7569D935CFF1B1678BC979345FCA41CD83F57AE9
46F54137D426EA78479A35E42160642E53E042705614D15C261A3AEB18D640E1
DF21627330C1F54EC6040168DACAA18979B6BDDCA2F5AB783A6C41DB6CCD900D
9324CC542C2A420CE4AC43B8C00031A6DCD90729245235A0B17DBB982401A08B
0F51A87D00339748060D315B7907D25AE4AA1D826B194B41245756E8825E0535
9666158A26043FCEB3DEA2DEEA706381B1FBB6FD75B0DEEB7C46EE94B9D68251
B7747C1153D340BE73C6C19D1ACDB1062022B645B7A88AA759BC1BCBD2E26BAD
E0A64FB79C5CB814AB870285D4A2B44BA8FE9168343791C5356006B20B3B8900
275B3032978D97F88C3887BD3D9B03A3E2BEF1EC3D030061A72C37D753DE257A
E2A3CCF16AD848694724EA95080C7594B10BD06714618396583192A724D313AF
2AC6356C2F84C2917CB2E7B822EF1FBC78DD00A538E3EE703CA7199251E91518
4DBEA2FF24183E60DB680F39B8C1C2A7DFD0F2B475EA43C13D83A424BC3BDDF8
7D06C3B94EECF520F012744F977402A1B3279566F272E9D3FB672F9BBF8BA8BC
64C5B0FE2918318B63D2A0F20AB7A910BD426C1786EA9B81121343AFDC5C517F
0E6F6F3F998D787DF69C8F4A7585E50CA1C2CC1D9596A89A61DAB7F8E6C43E67
5E00E7EADCA4D1BB81A0E57B13C7E3ACA36D2388214B4C45B805A2F6E5C95C59
028D3E131D9ECC2237AC831A7A4CB5A5ED55488ED65BFA825936ED7450BD2364
484EFA1EE0A4E98F2666D28FC494E4B853966E45A8EFF61C5802EEF0591870A3
FF222D11CAF1FD4B364C487C69E72DAD9C5AFC2CA4A93DE80B2B9173F63BAF63
9DF8992CB6D14003285BA47CD3F93F070F945EE8394C2CB1D8DD1084F178AD4C
CB5EBBA6F23130397C3F7795308870451B94721102647E236318C9F39E466D72
1256E9E9885514E2A5B4703D1203E86D6068A05F701B2376ADD71F1BA1C4F2F9
7E760D5615227696A47E457233DDB954BE48C85321E401CD75580040D13483FA
AABAFE6F832BC636DC4945484075AD114EBAC1B463A134296651BCBC85D271CA
E4B19A47AA765A803DF74725E730FC7A00A7043497724042FB7E05CD39383227
44F534D93A7B00A52292AC2983C4CC6537E7E0D9B1230B12A6A9C4C8F1536626
54997F94374828887FF01CCEEF3786555601D5C63C2CB7ACC7C2774AFB6E03ED
6DAD7FFB868D34C12D6633116C74F5A65A0F0A27C2CC18B313FB840FA8A93CCF
C167C16A45564F20E059C631ABFCEFA7F192E6F20160AE35728F14E5C2C4DCBB
77FCB9F942D87F7FD57D8F52C6CDDA4560816969F775976A0B6A29A7AE6DF5A9
7CE7F39A7D6318DF1C88D5D368C0636499515412D932B50B0E0CDB0ECE9BA542
6D6272F6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/UniqueID 5087383 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 12 /beta put
dup 18 /theta put
dup 25 /pi put
dup 30 /phi put
dup 32 /psi put
dup 39 /phi1 put
dup 59 /comma put
dup 67 /C put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 106 /j put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 120 /x put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF7785FCA8F089152A57EB8D
5467C28AD44E890380CEA0B0E0CD0F6427F2C3BC1A5257BF03D902BE94A449C5
EB8F33DD607BB4E0A1A7A24431E1DC2F03596EB2039CC1A9D524E10B374E34A6
4DFE6694F9E158DD6678BCB0B56BFF435FC4F5EC442E14391B45178DDA235B7A
07AB6EA76230B60456344BDB08C929F9453553452C97E016C26C11B68186024C
D1AF6C638EF54E26AA88856FAF1FA9A0DC5A9EFB7130EE72EB3313510EDB1DF4
8D8E512036A986387D8E96689E912149A342974F559E7CA4621E84351914EACF
7810F41CC0BDCAD6165182C7040F052C34D073FFEE489549EFEF83111310B3E5
F67EA5449D3D81DF1FFD64AE0F1A760922FC629FDCC6AB0DA66CC29665BE386A
4DC43CFEF3C5904356B7B2EC0AF36BB4FF6A994C8158790674A8EFF54A36B7AD
8C8B833C1D1FDFEBD7D39122BA602A67ECD2EDE9D35C2628EF1FE34B2CDDE154
2247242DB2541C5FD49EB8348536B83A67E718DF66A627D7C7622F22B5D3A3FA
5149B224F82B72E4F2A1B22BD6FA7018B45A404E66E2C6B96476A39E5D330AB2
ED04E2A7FE38D3A88B439E804F390F4B7893506CB622782D282AC603D1F5A452
D1E7AE90B2DDC3F914BAD782C544571F179889636786088915A0A39E3026CA64
FFF53F72E57280DCCE7841F78325CA190CBB9AB9A27B92C57FC6C1725BBA16AE
641968463583D03BA54CAE699CC70867C82608077EAE2ADBF52E18F73FABF250
8352EBFC7810C4BE983B9E2D990D3F37C174C110C768F705665E2543B01AC270
2DEDBFE90BCE85766403FFE6AF7E03BF3C2E2A8FFD74F254CA5494F020483372
897DEDE84E0D2319AE16317467A088E8CEF5CC0860291EFF9F0B1000AF341DB6
BCC38673B7EF72B9B307143713F595E5DC622E84A93E0713DDCAA8B944744365
4B305B20ED2152C381AD8713091D65D3F9F64E0CDC834A88E175B736586D93B4
417700C015745366BCF55B1B2654066C84CC1A66A70F8B6B0610943917260FB1
DCAF1C9D7714FD64DE6705A7D29168FE1F0AA8C0F9CBFB86E1FD990CEB651E8E
D9D9DEB954AB9DF390989F7611BC9DED027E99870DB47C2C0BD7DF853BC2C69F
BBE1E26695AB45346E41F867D4F7BC59357A78454A4EAE182D960E72940DB1F9
334FBC41EE5F29708001F142EF3C6B463F5306130769C79DDD7DC3841C07526F
49E9AC693596A965907B2D07939DBC9EE0E2944E36F2398C270B1AE11EEA7239
23508CF7B373B5051DB132C9A679BF0A83DCAFEEECA144099047F245A1BE3F6C
F42E158F2CAE915EF4BF78F6728A9BF421EFE562250985BBDE8417EB931EC402
CAB3F87F48C8B6582686D076D8B71484F5906A9CEFF747B77477348966F37FD7
2CF03273B9F2E967F259EB627248119885846001291D8B207A4EDB8A5BEA704B
4B2BB11072C12518494E8044E4CC74E91A3E4689F2090B1039A00B0F294A047C
662660469F98971B97815454ADD7F5BABDF1D45F0705B2A268CD387A35DF5272
A9ACD5DD0148C90E482B6A69E7977911939E9619C31BAB0297B7892800FBB2D9
B0CE4E6E7F74E7289D1B2232FCD56B77ABF2DF00682A0E6CDA30044474E074B4
1519F936443539B71D99A46CE47FF0E28B18E2DFF7C9FBDC5C200EAAEF17BD57
F8546F209F204A2413795F8115E734ABD281266A60A52A1DF9732CBC50964BD5
8AC248CB37982145A8516B4CCBBFEFA3F13FC614AC11258777BDA96B97E0FCDE
63F7432EE0A4C927E5B020AE31607DED09C3415310AC1BB73C91D95E04F5B438
9A62F89B967BA88936028DD75C230478319BBFA0BD6412EDB5DC64035FDEF410
C837594B74985D8903830C2367F591749D42F2F4EDAD18722C6BE835853C2562
C8B0D291742792D25D58E6F617775DEF6F254AAEA55A5646671CBC1D1FC29D8C
529E18B1BDB7231CB13696E64AFFA6D03B544A3ECE308A9A815A1BF3B02C0037
77FFC17E1CACF2CDF78E9F295D1EA825568E38BED4E7D13FA3214E56613486EF
EA05C43CADCEEC626F1A5172E75454A7F2D71577563D1BE441F48AF99BC5951D
5C73F6BD6377727CA386CC27DD0A6D96B4F51E3198C8686746CBACAE4349D05A
B9581FC16D41E41B0BC7366F2C0FF5FF9A07A0D01F896BFCD2C116E58A4AA3E7
44537D95D384ACF56908580DF3BE2A79698505ED1CB6037B1443DE0307AE008F
3A1DDDA9303B5EED81628E1D52558924911FD828E3ECBD0E1EEE694DE561F80C
379B873E20F3210ADB211E6D3510B7322B6A112865014E7B221E39FD89859ACC
DDD2A279F682FC4732A4316B902AC1CCFBFC5B444CD6F78031DF57259EB1EA54
4EA64045E5EAB5802D23086709CAD8F9DD7667B2EB601B162FEAC2AEBBCC35FE
95967DAEDF5C5F0C8B3047800D57031BB490826FBA1450C353152F4113F07D35
6C97598C6AEE51BFAD530247928183F357C436B0BAF9CB1EFD5E5B9651A86B69
D363106C5CC94F34B6CA95E42EBBC0B3AEBA84619CC451B0844C3DCEB57E7038
B49A764C3C57A65303D27EACBE47F47E530C95F0AAA655DF882ACE34104D3733
5CC31AE030E02AAF669E3A98A8D8708FF63EA02A3A1B50573AD2052B6ABD2CEC
AE407623B1BC369860B02B4F7AA74A77D10C6C1DFC7DA709AAA8CBD258BAB8D9
7FDFCB77FDA46AFD030BC7631E631CEDB362E00D2F23B9A6E6272D1214D7043A
6A1AFADD8C85EF86DEF5A101CAB483F667A48904D55413BBA521FB323C506A1E
54D1C0E5ABC997C684D0414F1F585B8446FC318E27479B1C99F9AE3EFB9F25F0
F1903AE0E5A1EF56409B2B4033F8872D949E4BE726295308E67E2C1F6DF97008
85E063917CAF95D438739896FC5EC6F50EDCACD636D785425F3C148D7AC06531
0BCAD7D65843D7312B8D22AA784B7BF2DEBB73DC011C77FED730C1E663CDF1D5
38F79A1DDFD42B61FF41BA3F58290D7BFA5C6F0AC3076ACAD72645EA0B927470
745DB299365EB598DB3C4CB964202084603747B362E1FEE377565EF11219784F
59467DC14047B54FF1BC2225A94A01218CB5A80F3F29D6E69692CC7D4965F2CB
EFE909FEF7D63E592172E4A109B8A642AC87F20879B0C6D7971ED429291A6E20
7845ED4D58DDEA3AEE9B52FFC6F3819B11B5BF40139039ACC0D40703EE3059BF
A4076EB8596084EFC3D3DF132F8F41365E8AA593A9B57AF70FBF40DA1A43CF10
7CD9319EED2964A11900664ED4E663A0F31DF1DAF8B004B7CF75D0B51242E85E
AD03EF6EBAAF59CDD0E91647B9E4EAA573573D7D03F2B013EF256B35871DFEF2
85FF19D4AC059C0F84576BB1101256B0FF1AE770EB92C4EB0E333182812340EF
EA1B7A63C12ADF44851E74D4BE938B2977C386B2877293D41FFBB37CDA9B8BB7
9B65794569487D712E57153D05EA1F7850CEEA33E2B6C1887C9E2AD063EA32DD
A2A173ADA4A3F942E0B0E972F0C4CD559B44BF982EF0EA14EADA124E7104FD6E
CB40250692362A84A61119E002E58F38AE1FD77A235E282EDD7B3F95DDA3B59E
B5BAE25DE4B20279DF3548FE361F6405A417DD2A8AE73629B35AF88BD45433B9
5C1471A508BEE70BAE877C366DDA00B2117548F2AAE5BBF65E8DD5D327848EED
B07CA0CA30A1DA85025A566698481F7858CD5347BA9E01994F5C728947665AC5
D6A5B37A86C9EC0C12E5180B59AD5C1B1216CE31DC2621BAB7D9D55E99EA1783
0CBE6DDF04776FC8F8DA04B5230D5D87E16A674A67536ECA4897B126B093C6DF
8CB64027193CD647F8C3CF97CB1084B3422C21D2D710A0ADFAADBB6280BAF88F
EB8D90E8D7DE7E19D2241A222C3AC1B0AE79DA6066D8EDE6F7096B9672E88E4D
036AD28C816D3EE7E0DBDBEFC0F135253D4C55A8857170F11E547FC3D3024220
A842EFB7D60DCC536E0B4DA59F309F2D2D5EB6C5280F8EA0C6EDC24052465043
3A8226B46F3ED35AC9D53459FA328221A53C569763E690ECF39717F626C6275E
D1744D95E2567CC7B5BC259BF1E88C11D0C0515E854547EC6D74CDF739A66C33
FF316B5930EDB67B3E3C2F50ED07DD632074942090C40104FE3D3E13E16B2740
932FB99F61E6FB32F5041D29650A2DC347E09292C8BD9362515B858F6FA256A7
CDAE6BF641E91F585CABFB125885A970EF1F141566ECEEC386DBAF9F8BFFE433
0A8426AC6AB1C128447398BCAFF46DF6955414BF6A3668B4A351F1CF901116A8
670F26006DA044D9D59E7019F6BF954D1E7C03121E7289AFD0F9FCD63901F573
CACD0EA06DD6DCE85D863AB54BAA775546B1647FB6FD1D827296865E4DD7955F
DEF8F1B8F689E0D2901E73D0DF62F2AFB090C2CC7806EE8F90CEE2B447774B06
6C0AB14F74AF90D5541F3E8AC1E907E72CC8CF25CDECAAF20F3FC13EDC00E259
89E3136F39573BE7F7195BC734A91929C2158B9080D2F4B38325C0B25A2F717F
7E4B02268E8BFC53539F24E27787D820564B310CBFB663C0AB4B9A27FC420FDD
52827362D14189170032A980638F1991DBED02B0591B418DC0229373D0FCE608
632CDBE29877638196CCC9EC8629E08ECCD4368EF1CB553BCB1AE8B9A31FAC85
422E32936E6ADD8144CCC4BF1E4995A2A87E2889713AD329F1C56D9C868FD93B
534F6853BD80BCED84582348B2D1BC1167A1225AAF2E4CD5833DFCD9AE1EFA0F
18709A33C775F6CD3CAD75086C9B85AA7BC406021A45A7B8C3973DBE0BA03DEF
153904E332B0CAE37687A165D56A05FE6A27065D7DB9581580C18328AED36260
CBD9B2BF7D8C6FAD9DCD0410DCB2B344EAB29B4DD37DBA93D66CCF3440D5A48F
86C18C401CC28D5D78E1E2A0073389DF3C94E15188701E8E572072D76EB72B8B
3C57C76E37569E00A4AE8CE8EC241E6C6182E755952E3FF22DB60F8D0472A592
13524A8BC4F6B781F357C8005D46047F7FB4D15E214402C0145F66CCE8446FFD
29AA64CC5443F01264198CB278B102AA3E7F43423B2980F2C1520B8774017555
DC96020530D485B1AFBDA720B7AA1BBCA07B5F76EF805EE421D66E8A5EB33984
C04DF613D7707ED2C56F063E41BFED393D9E068D6186FF564131034C41AE79BE
A68DF0021E3715716AC3ECB4B5FB1029C16FE899014330186876FE6A65A59558
D904DB4CF1AE47DDF5BEDCB9DC1EC6D736374DF9D2AD80BC5E41D5CF9AB6D77B
E7CB667FF0DD1F15883555D42A3EFB194A24A13B72121DE43A2B7F57AD112F0B
D7E9DE9E6718E5399A7261006D45BC3B2F071FFE679B52D95664414033F538AF
B8BE1963D5DB358AF1D19B23DD20D823610D31F034588BCE8CEE7E0A7373D4E0
941E80DBB68E31F278A8FEE010F519C1593BD644F9419AB764139CE8E9181079
1DDAEE8086105578B5264CA13564D98FB8383EE617CB02D85ECCE0C0F2EF52B3
A182B150189CAB64AC85A48CF2082E8C9849A45D54723838DC4F551D2ED8B9D0
74C821EA59907CCC725CB34136215D2168375CB3C0855874A90AC066C18BDF0F
A42265BCE906A44199BB60E09637E0BEDFBB85A16364047A69AE2E3FB1B828FE
BFF7C1206E2FCC04CDEB5B03010D09E8B695CACE9A80C69FC9E49AA946CB2B4D
0781B4C6AD210F9EBA3520178909CF08D3232F589632A38566D76D72B7991A32
8D7631D4B341C468ABCCB0DA4B9503ABDF29034A2267EC963ABD6F2795E3A92E
C292CBC9B3529776A41AC994961FB6C83914FFB6AC13B2A6820347AFA49757AC
ABF19111E9F7EF854960CADD7176B560A364E0AC84AF573BDF45814CD2AA3DFA
E6F9123441488318A78C8DA4B2AF58689FDE5DE4BE2B4C49DD986C9BD7F6E797
C06545C9832FC56DA550F9C5A92ACD7080BABA287B59B4E3B232B862B1E10BF6
EFB33921AB50F8A2594C96AE4C25162A04DED9F0402B3D85207B0459DF1F74AA
C45E03E2E8C995A4F30E0DA4E48BF72D0AC2D508E1876256CF1FF5F23FBD22EC
DB2CC69164F3114F7DF9E0A4E6910AD68A526318EDF0BF4BD17C52FA1038AAB4
5F8A334F5A8C69D4A393503B17BC10C66710C0EF6C2BA3065928614237133E04
9DE22D08E893B73914B6403A1E524B34FB55AAAEE0F8774EFFE812486407A384
4775C3742933F79C030006700D672F8BBACA4AF36018DB91D3CB76346A160C29
2B1ADD8E54E0F626F0CA47107F4A4DBC02C1C5516FAA934F2DB6385E5C97
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/UniqueID 5031982 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA852
EABAEAAADE1EFD16DA13E367A6FD05F6C5D61A321B185BD0D596400C8422C933
BF332800160813A68AFB7152EDE15009404E0B3A1A6C53FC6B2E00D9C7D7C0A0
0996CA2E86EBC4DE1B42C8D7190D1A6D2A351329AD2BA3645A8D4AB8B1559EEF
409E4CC0E016AD1FEFACF4BF01A08DA00BC8CF518C80B1DB41E503655D3E1EDB
E750593252ED64EBDDD62C2F1066C73F2BAB7B5632CDB584AA0192C5ADB2E108
05B1ABA10A396208F49D4A5309AF4760D6EA6BA44F04814B19C1750A3ADE2297
D79DF9712EE0ABBF156A53E7E865DF30637AE0D9EE28D43E638954C87A20F707
CB29DC6D485EE81FCE2489060E82FFFF543E2701320B592F7EF9AF00C4F2F12A
376EAB4A94F46B267ECDB89A932CAB84C704910B21B0C8FE22CC936FA2BCCD90
AAA2975B26589994BB2778604978D6F4FBD78D5A0EF625E6F052C9E61B1451D0
4F30899CA110EEA3637D0104ABDD4DF2CEEAEB6C939595654AA372122C3C47F6
49FD075FE30DB24EBD1C35EF855797A9B9EA8A55B6C003AB7DAB9B438A8C668F
6C29362618133E0E20F13F9438B11625AD4A145F9B8222D5A375BCD877E0260A
25AD6747CF463EFBC3E07E8DDCFD4E4FC2F4F04F812BB9767DD9217F571C975D
91DD073B1365D395064797F67CF2DD95D2D18B843C37C9D62F6EC39961D853A3
508EDF05346F1B0B98B4FF6012592344578DAB90F463E037EEBD6D1847D7E35E
182BDAAE6618BF8AE4BE383BACC4A32F8F13A2753174AF6F39DC0B9C1FC5EFBA
47DE0D3DBC88EF1EFC81120AF06D19A904A330BDBAFD57B53298F1993ABB5143
DC63BB5EB1302B81DEA62729B5D219D0D57549135BD225A3AAE36B2A404F1342
04C349E7CE1D4844253237EB276AAB097A9461371AEB01D67A0D311BAAF6EE87
4AFDFD8378EEB92443B3979D0A7EA178A2B8FB64C2A8C4288F442A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0AB25B56BCA5D899F1575E61ADF75676
F48EE26C054AD9A75FD88A3E17498AC26FD4DC8000A125D6DD423540B8A98779
B28CE97C9CAFAC45693FF43249E4B559E7F19FB349F94B60AAAAF05B5FBF244E
982B4B51D997DA5811CD43E1917DA885DD96133A5CE1A290DBBFD88AF285A879
D3136C41C839FD2276760A7B4F21F4026AADCDAB3F113FCCCA9588C7FB72643E
AB8F6D8AEAD1DC3DCA6E436B3DF24E7DC6AD37137B49327871EA80F3B8AEE932
D20D9A5B4779DFFAD7B3E5D447023D6433575F8F5AF589D7E094DA3786555D0C
046A427ADF128E00AC7B458D5A131A130D6F49A7ABF47833791F172D69FE6393
EAE0E90E7FF7BC2333D4E0215D5201E4B209591782F8A664335F67B9DDE36DBA
793EC77E5EB405862D14EAB6A99218B3F66F11EA2F345629C402BD8FD9CA0AC8
FB5A2E119DAA9F80083C9BC54F4586C44320993CB5D9CBDC8F8522001F82A16C
E307F175B794F4426E5D273581A6D2844444D82093FB03482B270D693391DEA7
CB26D4A418E48A2989167B7DCE251F0D53D5C9B29D359A568FEDB965DF31CBF3
900392FE739A2B43BFA2363CA74FA72668FC761D1A17B9C0B56D6172499CDDCC
90EA538A5526FD5AFF81D04BFEA703E5DA963B11042723106704021C1B90557C
B7AA96E076842E2C5F929FDA6D05E0B91B5548006EB4A6EB262077411083C2EE
D51D0D237A85D6480DA41A9D8DC24EAEC0C849E0D53D9FE1E54ECD82C957B8B9
ED68D7B29A43F369C28272083B7B4E700546D293DEDAC7E74EEC946B4412B0B2
0639AB78E79402C787F50C4F78991DBC12D73F5B371BBA2CD9535EEF0550084F
40A4B2C4D178C0C001E63E08DAF15D064426F6F24C49E02AF5417D18BB7997D1
46CD6476615EE2F496EF2D2E5A6DE68ACABAEC2033F9F3689D9F8CA23483C81F
8E9CC42B7AF2BC3FA80B68FD37E3B87FC27AEB7AF6D2DFF9B4B7A60D26292AB2
36461A349D3BEFAAB8918729204873D7793A647387156252B5A1B975639E02C8
9715F8B4853B592ED9E467BA41B32363ED0D7557EA0AFB8EB093B4CB1FB3CCD9
3369A67A60448575C7CE305DE7C1B59DC21DB0132F2B67B7B31EA068C5942DBD
7D1BE9CBA33107AA60AD033EA5B3618B83BEBA01BC0DB592BCB0796AF520E8EF
BAE6CBAA5DAB5897040D6CB1E3EEE78A98B59897138A084E64E116446EDAB213
46AF2FED3E303F05D7EE630434645AD21B410AF8C1808A79F96CFC56741F62B4
431AD2FD90CCF0A876EDDE18506E73B4E390C752DB45A2E8BB824F2E0310C59E
864A74877AB522D1B477F5A3D7ABF80CC031C2F2BE5D633E49E6D10EB6EB8434
F17B15274840BEB842587F3B9AED05B97DD603AAF94D5FA688675B55D40FA43C
6D97741D9FE5F54C7D441AA62D48801769531ED7EFB3C438EFB1B513E93686D7
1738FE955FD7C67F11323E059BCD0C4BEB275C26835080FD2AC78DE88BF65298
A8EB4181F48C420D219CED950E4C0FC0330B49547E593F961B2BA33F375B75AD
3EC510349E6F496EBDCD1206243547DEC26F9A61DA31D6CD94A54CC54EC81B0B
176D21AC6779041F73E5DBC0A2107B612B9B89E20C373A057CD51327757DF12D
01742E9AAFACF24F24D18733EAE10725F5FC08EF5B42BB4E018CBD983733DF08
E018AB3151658D98F325882A033464895EA4D374541DCC18D8A4547FEC9B7206
07AC80FBE732ECCE672D5A6EC117F5436B0C476C504EF844C1AC7D50EEA75A40
7543DB4109218B12EDCA321C46FAF5AB028343B05EC8749D3D46AA18834BE53E
378EABE227B936313A58950A110572C54D1B9B2BCD7F7B73A72A6BE8C328275C
93F92B93FFD7928C8F6D24B6C471BE685A850C35B267F877AD20CD6E242F7A13
FF7D796EAF445F8870E9593BE39DED366EBD62A2D5FB232390D7239CA97F447C
5617AEE05875422520CA2FE3B70D654CBA4A65F197A31ED82CC4A183ED86D278
180D66D97CE9B52FE24705604D6B61E916B27ACC7B6562FB568CFE3D6FF8324A
E04AB88D33935FBAE571328911AA8D16133C85EEB531EC88BEF7F2FF559F1254
6E62683AA3563663F85CB5155A9563A3B3009F37669FADB586A6D968C773ED08
6ACF3526A8C9DAD081BD0A6803D8B14E755112D54CA969F0A1407C8FEDABE940
3B185234B1255A2F85ED31CAD545CBA80D61955FE1307D53A8436606D292CD1F
827CF41845BE0BF82132A47E66A414693E8968DD6F70752A9C9733F76ABF6CC1
4F198DBA7A8AEEFE81A9770813DF2B1B539CDA88BB644A361F830748415DF4D1
19CB70C9D8E4CB2646351A7610E9D59C2CBECDE4BC324C436303E25F8FA11403
FB104D2296B4AD009FFD8BB2E34ECAB2928659E5ECE5F23D716709150B83E66A
3A161EED1F9948A462A82B6F295F739B353C56CBFE28C0F991395F0B491A9A4C
1663424FA8C066B5436D54BDB9BB02BE12E2F6B422FDF15D13F0BD20EFFEC7CF
9F0B9DCD5BE324C611B087AE5DC680F5A10C5007ADBE32E24FDEE45D8A0C9C49
4449C69BC13B83065F0926787A6AF51D620A4B08C52DC55AFC5016FB2C4F72E6
59F9282B79BC3FA1308A6448B424DFC50A6AADA2C7458D8857AA53CC3FF0A4FC
B3B2F24E2A1F06187FBBA32F88BCB54AA8B1B656C22E2E5B660AC80C94AF55F5
F1CFF40A298F1BCC155CDC51FEF9DD5444CA233093AAFA54FFA58AD89069E96C
E2BB377DE0868240DE3669ED25ED90842B8F58CDB75221E9F052EE20C44470BA
5BFECD087218EA5ED31B1CACDCEA8E30C002ACC4D42E652543B0B5C900A42D12
4B6983B5CC389BA8A1038D30AA554490DBAAEE24C8A66F08FD91715C7A942BD5
229ECEC9A0453DF6B52822258F20C4027148117C547B60FE9F65A58D52BE0AF3
5C5806FE3370710F1A72D8C3318221BCF935CFDA487CBF3147024D6B823DF7D9
17260B670507BFB43E6ED108330754F4DADC600746F71F36010C9AC4EE4945CB
DCBE85A8854D90E173A1EA4CE2AE7FD0C31167CF26116575F4B3D64B9BC13B77
48AEFC72AAB41BC7E2C78D6DE2F6F66EF0A6511372E45BA007E85FBECEC8C3B1
C98345B233569BFF15D65904689FF9807C68E89469C90A45E695993570D211E7
9E002F71CEFF93E4F34656A47E421E7259543464ADCF9AE8F2B5759FAA76A8E7
81AF41FC46F2AE1A21F9884F5750A3C9D54566AF63B076ECB3C414A1926805AA
5B5F9C815B4F86BED0DC7352E0EF48E38A85987259348E59F93457B22308AF01
513D82F367E0440805E17E05FB37A30BAA73E9CFAEC699F77119C6CA2F2BE2AE
932D2CDF44BE318A5BF1D59D2B61165C824C1A3F54EA99A594F9AB40E45A6600
CBFC9237244C917A134DA2D502B6A2210EDADE29D28FD2961E0F476174F51D25
37AA543C913DAB6518BF18C3723024E23EE38F3764D1D60B17DA2A733E26EBAA
74A02D28A3D626D8249FE40CC96B5BE21A9DDA0AD4D92609E93BC7E96ECB6D4E
A5F75759AF95A1CFCE85FD651E38B8F55BD530F47194B01D884B979CAEFF660A
8B5DBF03BBE41C4871F6CEC22AA8347F863168DFCF1B98A688500B4155B2A984
AA1369FFDF54BE34B92A77E4984FC36C3E9A0714EC900C1D89B6870E89B9765C
61E7791CF899468AA5704BA1B4640ED03434C8052495CBAA9D27416E2D326C0B
EF4C80125934B2FB9D7EFAA0A98BC154942419C67A9EB8EB3D1F5B0524B381B6
2361647ED5E44142E99CDDEA8DA5B4E5ABA97569320DED7E3283944DCA2DEED7
2BD821F5C37F23D31B5D2BD10C72476719CBE8D743A74BB5C85EBBAB9A0DB67B
0F3DD5ABF55CB9568AA9C68C085E87B32EDCAFFCED2FA9A16D6E12AC04AE9BB5
4CED17DE5C0F0BB19D0250DBFF2F00ED348D40DD39B826D9BDB4CA8582DAF280
9A41072FD817E7072D80C5465DBB163F7E6749927473B30C98974B32B7046F17
0E9F59C386DFFD7D1BFFCD28279320CF0312892826FC05027D9DC16A0B3F991F
7C01F3316E333C353608F59BE2CFE97AE8462F77146463570FA2612BBF80F4BD
0A763822DC7A4DA1E4BF69952CADA86BDE2F84082A6ABBC6F62F3CB273BA1B19
F85819DF3928DCF069B5CC656365237C1CBDAFB2D5813D890567541AA57DA138
1F1EEF1C8A0E309B57712E854AA5A845EF2CFDC1CFA6F463A7E60B8D45AE0E02
7CA7929ECCE4B3C3A45AAAF27C102598F1A17C1C292C6149C9C404FF92CA1B50
8B10AF8556DF32F3F44570E2F6F2EB1514294E90226D5FFA64CB8200D8EB73E4
CAE6C0D9137AFAD2E8A697E4A1903ED6414D2F421253186E61D58BB49EA2B1C4
FEE6187BB65E9DA9E5D9FB11470835718BA34B0827EEB3810C50F13C1D84B530
9D4AA8D6B07641C073D2DA0EE1762BABC9559C41F2098BB61059518AFBA4B04F
FC233E36D3EE19504C2D985DB3682240B2DA1A0FD47C3B3D693CD66F65818811
F72D917F2828CE8441BB778396189E623C0D18FE7449D876375B1402BDB173DC
FA40BE2817689ED4CA99AA88692E6E9E7BCF32472FCA1B96CA585F7B2478E97A
BC1F62337CED86E5C87844BFD2B33FE0EECAA6EA958919422702DABDF9A40120
8C7BD002F12CC883108B09F64E8BD517862E5CC666B1E678782AAA3FAAE8798A
B8764077373913B9B6DF8A4CA46B2428AA38578CE2F12966B17AF405C56DD9DA
EDFC781217A77CBCF6D2474F99496A49C9937EA9FFAF8C07913D36A21B72CC7B
68B90C74089AF66D8F1430561B062DDC278CDEDFBF6126E730DC8F4B07A40CB2
51CCB20ADEC3CB83A86C7988FD468FC7431D6EED2B8B6CC12009CFFA87F8BEE2
4897E06717EA306C88E4672DE7722B5B18B6C9DCFE96F34202DB393C4FC2B331
C4D6A0A98FEBAC5DAC7F29B9AC3CDE1A112042CAB43B256946E5302C584C7669
00632067604BF1342C0115FEFAD079C01A356AECA7161AE3933664DA623464A6
C348ACCCC8EDBB81804FB88DDA3FF144B496F86936D6758CDCA390A960649F2A
B9EB4F8CC88796CE94C832A15FEF848B0D737033EF8A01976499FC0CF07CB347
7A5DA0293EC481CBC3C0C07F74AFD170E2360E3B74438744BC2147C06905F10E
8AC3F8F7FFEA0BF5050A5F5971BE8606FD2FAEA5E4FF24EBEB2BE5F432214D5C
7FF327B166CC980DD61C41F3E95B987AFB449DB916A0E660B970C35EF7BB6FC5
BE2716C799665D8B528990709BCE0C6467C93BBE37207C8AC478D162ADBBBC7A
9907EC816FB88721D3C99E7936A4C78E76EACCD8BB111B50057FEE9C98F0447A
7D64672B183A3F84BFDFE177C45CA24DAAB51002BE0E062FFA30EDFC8A566EB7
D86E4CA4EF37C4E01AE8B8B38FF61AC4C233B9D5A0744968844E47D9339B377E
D0C826EB32307A623C2DEF0468C0FE9C145427642232E8A3AA0929A03606B5FC
7FA6011DD16EDDCF2EA3E03CAD1848DAA3C57B4A3304AEA4BC2663CE65F9B1BB
3408F2B539EA876984DE6C25BE8F43508F248CD92C98E57A1F250D269D26755C
D63F1D4580D7DF6F59852F95612F068FB8C25E6EDFA0CA86B5250A716D07B5C9
BC2BB5CF32CFE585A9D0495DBAA493C831F9F7CAD52A6A805A230721E51750DD
859B5B27248DD5E2D887B951DDB3C60ACEB2712C8F0A8DE45158E5B0AB4ABA48
F716DB72F58D51E53A7DC1DA50B31243B3BAFD6F71A41792FCF612A30B56A993
45A28D8272F331BDA6FEEA98CC8372359C353E53BB2C9159935929346FB2AAD1
4B45021B1D0ED6526C97997304751BA460D35FA5B3D57A705FCB447FD205231E
F4DCEAE4CB1FBD121C0899CC2BCF4EF6ACE856C6E30F79869A63290A8549F12C
C88DA823E6EBAA4E8C1F725A14BDB45D92372CB8CE1B8A207A1909EE1477DB95
089CD88319A165C3454E717F47A0F7A3E96C3C49D5CC56D29B0FE8C79DEA9D14
3068FEFC25D5B0E754FEE2543EB4CC0D5BD516AF2F35CD12206E1AB89C20C053
B2A4B2CD40A89A389C0C15DD27B10BD27D975B9F00B9B5FB8F60285833881A67
5A2B8C5A235013D682A2B4FD013D3CDF8E58FD61FE6F2635804F99BB1065A5A3
CCD9EDC8A8BC2197B49748400027BD4807D976715AB3D87B68C9C51B6FC32320
654D2261B82645539C4D147CFE4C6947E28AA96ABC33AF0EADFBFE045A07DCF8
DAABB8A83530D353562BBF3E497BE3E11554DD2F8AACFC00142BF674A2EA47F7
B24A11450139C17EBB0AD06A2D7788B0C6CA4749034BF7EEF5B6884E6A27309B
9BD92646693A7EC67C006468769AD8AF599BB93135A278058AED7E870122A0A4
6CCF66C145EE5438274123721ABB7B945EA380640F6E1A6B2425F3C19120FAF2
D393E3EB1B01DA232C54490350EFEC7247365509CF8E3ED58FB5E2F1F3D55268
5573768F2B0FD403F5D8C9A5006D2EE583D9D97F1C9F50A779D9FAD477DB8D5B
92A92967DC764F26BECDD7A7EDFC26D746FCBA5B39BF231E62FEE8C0B610682C
72C01CBD85E2E66A4FAF4D7F49EFF679A2624DCBC3BF32D4748639DAD902F9BF
56352B321F5226695EE7711C7ED797F5F1D627CBACAEDAE4A5607EBF96D21663
4B0025E031952F7285ACCD02936C80D245D8749746D24E1B6DD56FE33CB0EAD1
5D6EB4BF325520F87426B6E5EC5B5226E5781FDE7879CFB49DBDB350DEB3F6DF
979B14819FAAF4AC13CB5FF8F64BE898B61973D1781760F5B49F196B84569AA4
2FF57683535392A18F5D22BD7B27FE08F74E4B3B7961171D67F849FBDDE61900
8B3C7D8A1E17C3A1F6006160960D1D2705B50BFCC971B6F8E2EE69C5810B4A1A
DA382A2F5B3432F4ED71C4B45A43D19A654E2E4400760A4E936D486F7C3BC5CA
06676840C8769F682AA353FD9421F0F842EE7A4B0F14FAFDCB96172E2FA90CC2
4D7446F81D7445798C45EC1DB7362F046102CB8F6092654CB57B858C2B5EC119
9989580A313F972AF2CFE4A893EA0A0FF68B233BAD0D169548BA4C05A997F91D
FCBF75612989C3D0D0B7781B1CB9A57707A13AB49EC1225D2B5C6095B7408CCD
C3E93A6CB7433B1B871A62E6BAC13409AEA370B67C704EF45CFC828C04FBEBB0
EE69513F5FD88BCBFFF11F1B2F9E993ADFD597309D941D0688BD6A15B49F40B1
F569D1F1EF064412197823ED85235FFB401BF9305D1B9132C9C32F2828608EF6
E1E1767EC43E6309969137C8C9B26F7775E07C9E3578376B001A6A7FE34E04C3
769EB965824204A60427C10E8AE513B16B932525E99F4979D7E09CF95BE7A344
769E86244813B33EFEB435AF9659B856D9A07A62ACBBBBA05908628ABC349AC1
5178A295941596B3C5F5D3ABB9245C2F999397F862B10784D1BE67194CB4F4BF
8A00957E365DE32FF1139B9BD621514B03A85B2655B8C80F6427D795C1EFE9B9
5DCCF1918EE84A67C82F043E0B1A2B27258B746C1E22C4749F1386DA529F209A
3553F7500C31172987BCB28A1B6964CE1C29ADF79F03E033D5878472AA4580BC
155572A7D4B35DEF13BD751891F950B0898E9C7FA70E0C5D53C1DB0D17A658BB
7885FA3A57116D939E4670E97D2C5228F75705B65600DE721519331928F5DD15
7C9A885AF199E64EF910EC1F45056C9347B34AF1058DE83A394DD6EF983B5125
E2B96700A607A2CC1C2303A43EA180CA3AF83197CD4731A3E831D97B8BA58D8D
8F70348D235FF21909F52BB9ABC6EAA9ED87F9843BCC562AD363B04FC6BB5502
D17AB7C6A5C929F59854A0872D967A610A354BA1053D1B8626107498486FFD09
56C24D5B77121F942978D39C7AF715615AED9A76B30EB9C523C60D042191B48F
7DE7217557D12C15E60DE5F0495F54931E7451547B917DD6BE823EDE0845BCD6
039797516CE7C38D181941A775595D66E6363A186743D8240D6934859DE929C8
F52EEDE9DF9FA231A282D8D186C63A0C4A28040183492EEEDD6AA4630C7A9F59
2AC568E52173930585C051E76541D5D86DF8BCBA8D04EBEE7E92C2C61E0AC002
43D1E290CF680914CB1B093A26764DE4766954F3E6E10D20BC8318EFD65022F2
EF1E8B842A5AEDB232F5F3AD8D88BB5903406009345DB07C8B0854834D313D6D
6BF5275C3ACD315123580DE26696E93F27C0D79EBD69A85EB23DBB6FCBCFF3A9
DF4ADF62FB88ACD7B7505A5F88B55F434777342AE30C23141C5543225B5C30D9
229D7F396C0DB2C1DA3C442A020BD12E17016CC7A955C017B97F9E14F3FDB503
D265B9104D101E27123FB2A2C2E8A4631883C9E13413A523A451D75EF8E61087
E6DBB501DEE2FB56B50DF63800E1767FC0ADA68C703DE3BE7993123C1CD756A9
A1688B41EFE997A9EA3FBB0160B5F2CB75BFA6A156728793BE5B713FAD0B7B2F
9369C7E46A76F43974130F8EDF790518365FAC0F9E755E734E4E31F8330A12A9
D18C2C8DE6017689D17C00A55D6E1F5AD5F2E20A532C9FB480FA8AE85A63BFF4
051243D3A2A28601B20590CE79C0E9E67C2F10F8AAD0B05B417C0633CF0C9E1B
B7E69AF2279780BD55C53B43FBDC14469ACE687CC291A43EFE2D7FE74F5225D9
B071FA53EFF54340AA6637A57A7E8F3A28D44BABE7AADB4F4F6330DA590FA564
22BA65AA05CB1A7F24A10ABD4648F4648FB5B158911930D334B210F627B57EFF
A9A656C42183DAEC6B1B51E0871CD95C463AC0B2FA9B0216E50F6151C7D8EF79
E968FAA3AFCBE1C785E44CE77BFDEAE05017C64A5DE61DC4D7E2704F6C24D9A9
3C690BF3B2AAEAC89618C5629A0A87E71A6EFCBC6DC14783F03CF0E987F44BC3
EF60400DD403C0D64296102BFBE30388380927E5F2A83742A94238FD9B4AF002
84563E1E05EA5D7E306EC60D47B57F892CDF4F2B63FC26783B19D29D1ABD71B3
FE526359473D3BE1A1715275BC66F946876AAE0034C6BA11B8A1677A4497F709
DFF099BF1DF3924B456C4AC1BD1455546500A426053E83C6123C43AADE146F95
757FB7EF4A9D9057EB29406F877ED151582F32F851C500B850D18F8A0B136C80
8441AFBC5E393ED0CCA2ECFB00F9F0215911D8C17189A49FC364E25CDB55547C
9DF39A0C5F0C01CEC946C0FCFF5EF984012C271C817CB5DAB7D384EE4C2E4A62
80FED1C1EC4C680C8653D8DE24003BBFADB5AE25AB4B055F859F6718ED6534A2
17424B9CF726136B8ECFD0A27050BEE6BCBBA38056F00DDA94E4A7C07555BDC8
6E23E4A71B63650DA9812BE547ECF67070DC7D8CD40221636D6D562CDD126149
16B5F87922174E2514CF2BFDCE7AA9A53D9E03EFCC6F82629B4C291180F8FDF6
8A9B7373F0FF89E1BE21A77610AD3A85625DD6E8A2D22F5A6590974FCF148508
6BC9E07898BDDCA806E9E6E6563A9D732125626D5EC5F55B7792413EEFA8CD0F
22872C9B88350167A6FD8B6E1D7E3708820CA41D97C831BC2341AF05BA795D42
A7595E2AD5A7E6AD170B37C821BB686E26F4E28BFF4FCBD333B3718E5B95B996
0BA5C2E7A1C4DD0BDF604B1984ECB3203525E72398D0502C55CF4AE5206ED124
6F517ECC17B8D7C70408F0C43D7B1608BB24AE53DE6EB0EA01AC05BE207BE1F3
CC9E56F6FC74F5DFD56F273D6090B7BB6679413C16F98BE6A293DD1A83C7F52F
AECA061909E32456E408D0F7A9E7C193C9213AD99A0D0654E44D131B2B14B997
2E226E359E54705B6148263D3133C720B148DE6553D4979B67E52E2073594BD8
20549624B1BA84D7E7AC61D20905068A647B616763AD6AE716959E592FDA6CE0
23F4EC91291E57D87BE8EAA37B58CBF59D80989BE108084A8B2ABE93E7294158
871BBD8ED92C1C4D18E9E226FC79584601EAD525262F5D0D6187397B99BE65CE
3F0AC882E62943AA6C5AC76DE045A2665670A628C6BC2F409040769B21958963
190F80A47AEAF89DC5AFFEFE7FF50190BF8FE5A58E703F4A5E1BC15E19E48B9A
F354167EB0F5E774FC05F5561FCE300075BD67A9F13D2B07972CEAF05275D74B
522551F19D08150E1D4553927B7F4E84FD38970391CAA55684887B79FAB3ACEB
9B0BD6BC9072E9DB07026560DB5FC27BCF9CAC5E8C87A54BDC808D52FF54CEBD
80B19AD2EF54E2075D9E694DE3BBD5BB8FCBEE218144A1FEF9D7A94FB4AF2344
EC741D2C8861DF9DF2BD14A916BE443923108D395E2D9747237B8E688EEB4F35
9A5AA73A4C53C8A5099281387D9AC5403AAD08CAC1C2B7475558EDC9628F91E7
33659D3696C87E2AA0D5F01B214F875CAA803FFDB27EDA7F7A816042E8BF141D
207D5A0402E652A4DF4CF63001A0586D73D9DEF6CCDC0D26A45ED997B6354C1E
54C1E0B588F9A5B05CFE453B11AC8BFE00D70A1730D3AE555C9ECACD9142C110
61C486718F2F216DA78A590E5E80B3FE7A6091F4956B27C07ECDCD16065A3AB2
9B4D20B0BE8BBE3CDA2A25F8595600B6644CC8493024767C5759A95D37E4659C
344A7E556748995AAE21A506D3C6BC2E11BE250954466D7B48F5E801A92C27B6
EAE56624F5C95F47E1EC41C6691346DC04D4AB227CFB08168531326388086F16
36DA8AD029745F37C6AEB0129B229C53F364E185CB0740EEBA576E56029B4DCA
5B03BAD0684E3070B22FEFABCDA5C980B0D6348FD5255256E54A02CE62E03A37
2985744D89CD9416D7662F50EF771683B8BE87F5F7E4F32AA403EFB4E8773D37
FFD1B308ECD43ACD3FA03D3DCC2CA476B581DC5FD01FB33F52CC94B36E6891FE
A9A8EB7117405023F20795C0B202A1DF4E55E59163B6F9F0BCF6050C5BC772F3
38099A7FD6A0D4EDA8104CA610CC8D3857EBC8CAAA4DA3014A28AC5B55898C0C
CD61EF9F7189EF25C3577FF89D3F44188C88BD1E7273E1A4EF846F14A18B9033
D88CD2EA920C25EC345666EA09D80F7CD74EECEA13BE08ABBD100E07393F3AF9
68A1CFB8E2F87DB8594FAF7AE39434303F0124FC2D71B45B4B7B3A05AC01F6B5
4EAE25F5C56518213BDF24A425A08C1DB084590F205536A491BAF8D5FE810599
D04DA9525BFB348EB774578D38556229591F62EFDAB3AE123DCE8DC49A1E4B44
0012A3D34BBF14E8D3A4387E3E7E0B4A82D7C21D1FE515F787EDD46FCDC912BA
B0DAFAD0AB827B19C987942C7EF6DE2B7732EE4DA8372C9B644CCFB0BA6E91C6
A03277692C30B0A9A3AB1BAD56F459B5E2B392B96C6E12E6EBA5DC863876829E
86087FAD63292BFD6D3B7E2F110DD5D587A24A081154A95B491D39B56DD3B216
E8BCFE227650CA3EA9AF53A8B80E9586DF91C9755C1B143928BC89AB34746E28
4D78E053E35936E351D1A55E53017FBD4CD5AC86819A0D9C0ABB88B35CA1FADA
C7427B41F371AF138E616033000B67427EFB5904686EFBD7F13FEEDE37E3634E
04E13229DDBF3AEBC545530FC02C557FBF8FBFF135B8A505F3B4BEF7DF46760E
5671AADE0D700F48E83DE7B6D3E1121B0AB9346BBE5131BEC70AA49D92ED1F9A
147F32D2FA8AF40DB159E5F07FAE57F8245D10A69D8DE36D14A3A65B4C4CD419
C2EA9AA3F347AF52938A12152C53862F4F08243CDEFEDCC01EAC71DED568BBEE
591411442657460E0B17D388FF5E9CE9E4F5A3C907CDB13458AE971EF23C486F
587F2DF55C28FE5F55AA0EF267745FE3BEE22B80DF3A34FD0AC4CFD264FBD63F
67C1F2E7D6AA610E42368664871D20FBA7F46F34C08DBDF4F3AD69EBBB4A49C9
E203874A436CE6F4DA813280777391BA9947C299E807334199B77B48062A2633
9F243D4BE56AC511A22DA8F5B587899DBC7C753FCA3315EC3EC5870E4BB9E9DC
9000C16AEFE3A6FB080EA826742C31F5D017C4250B596BA03B3574BF04DC9ABE
CDF71744D43BCDFE575AE5F891ED2C1EC4B2689E2B34536CE5318C1F84FCF0B1
41C357CC7E0941EBC270BCA80822D8C1B86F31DDD0C3187A546ECFCBAD9BEA40
0F1386F8DE0605C6568F5E6B0E75EA623B4CEA262D52A606A3F3DBAEB587D3D5
1A18DADF4C30D458D820009C91E43E8B291C61AC881256E8F34EDEA1CFEB96B5
4E0E6602BBD024108ABF7977F0A52E615B82C7E65988D7D31B1174F54C1F9308
D6287791529C6ECE68AE9B7DFAD99A08CB3595ACD07E833F2D250482C2A789F3
D555F7C9A74089DA459D3A1842FB60646C2C58430795DAC5EDDC47A9E3D4D6F8
E5E701657F7F274F1FA37308DEDC83767F8CE99A71B986D8D25085BAC081CD6D
D4437E86625A2A065605359C13536823349F0A254CC878A3779E17E32F75DFE1
1B9FCD1837E85F12EB09D94A62EF08E38434A9D8D732B9AA49234CA6C6387BA8
EA6EE3DDC1D02ACAB76461E5957062FB6897FDFA0F424765E856F2DF196989E0
DEE9F9319E209BBE74AC7169B520535F43FAE4DEF2F0E50906F8510A3C2E3FA2
04895B03C86D7A099C633689251554F7A3F5E331C07A04309FE546134DD1D9D9
36BA50322F4FDA228183A0BF0C39F091F40634DCDEF6DDAF6F5DBD59F8582E67
391EAE6E429316DE3F9876606A791D0D8B66F6F73393EC850474B1558F600D2F
CE6391DDE1617752A39E6CECFF5FEB818FD556B96F50572981BB7746DB4400A0
0C8EC571BA03576C2CD09359D843F7DC3AE6AB5436D0CCE27CDDE5654BA075C3
F8DA48962FF4B92EC8F2280F53DE14E8A56A70C4DB913C41BF34BB71BBFC99E3
DB8F34567F6D21A579BA765296E0EC38D03471539F530810C751286F2036DF7C
B40032CCA03DC173E139C6F5981838FD950355B86038517DB2855865917B55A2
7B5DAA8292D1316C6A73273999C7801EC6D0B0BD89241806B591C0C990E1A64D
73A0FBAAF51AE67C7017DFE1CD507228F3C7F0AFC069C40E3F987FE4A6203D9F
B04142A139DBD4F5ABA001C17040D4E530AB250DC83CF79179F397B0B2CA6158
57BD814D77E407A41B7CB0B1166DD671D5B795A3B9E2D728364D9C5B906880C4
9AA691D630A8F6DC61A89B5E037BD38EC970D69E0D344F2F19A363E202A812B7
477AEA8270546EA183A98956C7CAF520066CB6F41C2E2CEBB8B6BF6139280135
45E276609AD45FBB68B0BA0B0BA5F71C37FC1D5160B850089E4503414B46C6DA
529DCA9400EF23D276B376C06B788C302C58D345F5661A633BBEC15DBD470B29
6B9E982AB72E3728B938AAB34BF770DEFB02B78E86C216865C29673E6B5E73A5
39FB7535B95274659AA5A367D68DEDFDE08666212ABF9509BAB3C50D4AD3C22A
45360BDF2582786CB0AC5B6561266720E35B343B319013247BEE8D2E889C69E7
2B11F194F93E306DBC53491F66273C42090CF0E88E6B2E0C6737AA6F38A40BFC
112B5D484A4AAACA8936E0879D5A7D7D4F1F8ABE2AB3C2CC46A62AAD2409F2E7
A4A14AECFAD166C3F733D777BDB2B8D7A1D7CBF45319056D025C831045F6FCC7
F2D6C6D059AEFAAA859BF36965B410CFE2285D608D6DA47C929017EDA147027A
10FC11B7B151456A6E7E987921E6CF8DEEBE33415EADCB425ED83BFF2E8C4115
8C905183D7B25178CC363E91642031B46D59DD2629A16111C543AE56F5964CBC
EFC9D8505FE652A6C43A4FBCA33A4EE99A4C5F07A3BE0E878DDB18D28194184E
36339E34A4DAFF709C171061BDFA2A19053CB1D6B364EE1C1D12E3AF44CA78E3
EDA295915AD8E4EE32921075772C1426E00DB4B560AAE66F522B62F75CB46CF9
7087908342E201C6A8700529893D460B3BC041085EB003266A6C453B9C0D58D8
DCD1823287782DEF601C2D9B0BF72BF189AA3A1F9D4ED6CA2BEBF7B782900689
49CB117A40A534CD2D2206519D53503A009A0DCF744D48A569E5C92F7C8B1865
37CE4C4091968E37D801DBB6131625D9EE15CBCD3D7C4AC869C92913F1C5F5DE
B04577AEE6C4155A4AE29F7BF783139CC5846C5395A11B6BE956D5B946B5B745
0FBB6B3DE292BA00899F2678697797157884EEAC5F7BB7CBD361BD1D4B337F49
BC89639DCD92C17D755E4E02F77721A958244976A207F94CD61FD9676FD1A1EF
787F0D649B3F4B534B5E445253932E788E6A7C211C753C6F3E22696A1C4F42FD
0ABF0C0EDF30FF09D0C7F9828AA814AA10BD46FC684C4ED8AFDC3DBFF7066DC5
985DDCD18048AFF063C745CED7F6745C74E481A51FC815DBF33063FA0D92F421
2A897C993796DF180E94302FFD7B29B1711FC47CD0A0B1342A116E69AD266E96
93F3E09EEAD3890458531BA88E5BC96F95FC21A8A1309FBEA37CD509AA95B973
F250E17CFBD73182ED14A81E7A9BADE54A7AC0F960BDC89C9203B963A753A901
9B487B069BD5BB0E13D99C4B0FD227AA7837352B65202C9F51D908F7487E7FE7
F573F277C29AB82257C798B811D4FA5EE1FEE8F6FD949E9EAE6A8226836C941A
80F6C61438BE440A3D029685398AC6C35F7BD3DD5780C744BF9053868266EC57
819527EF7A2FA60C7502399B044D668B8C24484C4B81D28D8A879FA7233D1C85
E23A0259A2BC0EC915F69CF258859803BA06433817F03A79B896A514D764A2AD
9077B97C97D40F50B37635CB6BA806CDA06477E8393F46D7E4982BE45AAD4AEE
628351FA68130E66D320D970ED803589A21189F5D4888BD2283B4293E330E1FB
30F063F003357F528AC36DA94F9810C170ECD99496BF86CFAC5E28F8DF9AE0A9
D571C485A507B82EF5AC409E9C12715D55CF5E00C31A08303132EB875C963933
D45C78A5E0125638BB2FDC69CD5A7ED209F6CD0189CCCD8210C15D09184DDDEF
BEF06AA7F1E67A1FE4480B2BF5F69712A46E6F57E11060C14B24E07571A1401C
30D16724F6B377DCFFE7BA5AF49CC834A49229B18CB32A054159C25170119CE2
FB306494A6B149A756F5D44504C33AB2C2500CB25AEE02FFFBB07C4C00810202
E7F576174412B1080B0FB0BD755B1964BBA69B0F3F2E8FFB590C363F418C426D
5C9A813352310A199947F9DBA8DB8B2C4487DE2D708E06685B6E864668BE3A2B
B0AD04FA6360864340D75A758C3DF4FCA574411F1D830762174205DE864528F4
8191EB8F43ACB3320EEB78DDBAC5E7C30D79906082A342592AD72225414C75E1
E29E2849B4083719680C48A433C0273C622D700BB596B2B4E29BECA0D5241B8E
6EBB28F217493CDF9B1E8016B2A7AD2EFAA5DE47360DB119C4C178AFD6194AB4
A258B235AB77625365444D7496E5E29AA1FBBDAFF7209882250D17028EA1EEF2
72EB8504C91E95F58305D79FFD65EE0A1C9AAD283809A984E8B60D26C3E65411
265677915F2D894C914EBF5A447BB1F303BCE37FE8586CF2AC9662B46FB95645
A7E260041D966B1BE2F015044677A39CBEF701D7C62D12194311F5FF1A28BA03
EC634A48ED189A123F67B277BFA59921AC9870764066BD787A77D02DE5136933
E17F8BB8600F07BD0618FCF6DAAFB8524BF4D1F867F920B7ECC9675C26F78A14
06ADDCF3CBEF8D1180A96F89DCCFAE7201ADA1F56B0A5DF01A486E373A506F2A
36EC9259F36D12074CA9019B96E1650EE45C17BEB0296C0718A3B2C9274003B3
82EF8F8A9739740DEA2BBD90CE6E6381D63829EE3F360DD3370E38654C9A0EDE
52E2AC12C42A3C41D1402BAC038C158CAB359E8790960524451266AF977858EB
AC5560D1F1B67D1630391C92DAFBA9DC54290A2FEAB281EF7F0C0FFFBB485E8B
523AA19CD3A00DAEA22F3C976327E3AE5D0307E956A2E294616DF435DF85A413
A4C20CBE0E6FEF3F18FD85AD58B4A80086A3A6EE68630F609E50D896079C3641
656E7B01B185A071B827075D88A69F9B659AD999D4FD31E78B6FA69973D69494
D816AF56A3F8608F88080B6B2731CAEFD769B120870CD30CF5A6DA66E0592F7D
28536D198CC1034900C13E4EF6CB1DEDE881242396E0E378121CF7CD106B4F5E
1D7A27EAE386817ECB35345253F179FED072545E9FCC39E8236FC3C8D4EE83C5
B2F0AC72C78ED6B246CFC05A3C607787FB6E579A2CCC27EB2BBC3D535DFE7E0B
D90C954A2F7ADE9201B509358790CC332E16BF218220E16430B1D63460413B1F
1C1C6855A28003FDEB14E312F86783762128DF8DA09D961FAABC2BC8A7B63630
C314CA3D24AC35A41F31CFE60F2186220538EB5B48AF27BAC7D4760E362EAA05
EC2058D67982365073E91540D34144E61A2F1CF9BC1E57D529C5C545B615B1F2
9D96D0B98DFD563F00C3A265CB4F8F8B9885A18AA6431C246F8E9B2E375F9FDE
D7DCB1FEF0D0A89BFDDDF8727B7F021BCE3F05E1A0AF25AC7115F4BF309E445A
9798835C311E620E77680B917A6ED237A3F5ECA156C34D7237CAFF5FCC97704E
E7A73BFDD048BA9A2644B0ED305F4EE2BE92FC7EF46ECF4E438A1B864DCE42CA
DEF2C6FE022FCB3886E4DE66DEE6C8E0BE0B59B59768A78544931B0BF23A362A
C473289E527A17883C33BFFAE3FC916D253EAD1210053688EA0420B3C491D4A3
8D690A2FB1AA70C21E986BF50998172439AA49F0FAE8365E22E68334C67EF7EA
8EA55C5DD4A52A060DB79351DBE64CCC05B30A7E024AD9A3BA9E8603300E743C
6872B8FB00B478F4984DFA99C76B4E28E3401C7AF1990CD78B7BF5BD0E5935C2
6DE1F9F0B6BFA932EF40FBAC7F89B8784AA36C3C582E3CDEF803689DF9DF1F6A
030E0CC26A26E87E5926F2EC52B4342082D9D1D13602F1A47974C8C4850AE8DA
F010419B707682D03B9EB24F96A61D72C6A2C9EA7BEDBE2A97641D19737AB89F
5DC8344441AF91D7F0AF5F99A2C1FA9395E049443BCD56D122DF37BDA0A75458
182AF68E2B6F9A181E1EFBA7FFF50FC690E896FAF524918972DA681CEFD8A7A6
6BFFD5816AD9E9B3262711081FF5F2A4009DE1061FF085120D8075BDEA41CD92
A247E607D906D51B4B9215CDB7272918D29F75C31F1A72DCB45B68A95B192EA6
A8DE369F29EDE066A3D5FE4C5AAE4166B79EF84D47C51E51128CD37663B5A973
C0E1F77C87CA179F0DA6C819C1F83D5B458FDFDBF6326BB68F2061295EEE7310
A1CE538C4677CBA6A2C2DD357679224B0887E9AF45139F926036B5E8137B1B35
2EC8D1B900B58D5E72F65FCCE9136C47B85DCBDF69D8BDECEF89A5A8AC95CE8E
30E9B5FBA9FF201FAF09634862E81514E5903DAFCA130A89720FDF2E406655DE
975E934B4D03EC710FA4B723142BB07467BEFC18B5B7C8E003FEEB45C61605B5
E5F59D132634124AA49662CFD786F0D1F72C22D9FE17588A2BE0A84D7525C268
103AE93EB7402DBE358FA59765121E5AF45D22B6E620C7AB16541FA81398B5DB
82293AF1ACD115097A7E0CE60B9E0940A6417C10EFC10F74ADEF110C241E4CB3
D1CEEC07C939267DB157FEC4CF31DDBC1E9BADF15B93B74B5F24C9DBA79A84DC
57787DAB3A330AAAF2B6AF7D10BAB3304A210746B4759FFB9B6887A70FECDE7C
D9967FDFEA9415A6753510488757900B8DDE6CDF2C800D28A533CBF14540328B
B15B9A53D11D9352B72BDC04C7295635370743346BC9A7B60B2C544E25EAD9D0
3BB00727B20A466AAC1783FC96FA5F434E5A4CE870479DFC41A9F2EA3D78AB5A
A8DC88EDA6C161B4E280717D7823FD880D41F9655DDA71DB0A63692F1FABDB0B
B9B04F596DFB5C34FB9FFC5D4D38CA1DD81DB9130BC95755E80BB677C002F5B6
DD3BE4751015A7AD11C8C38AAFE56F6F2B7E2013CF175B26F3FF80C465812E58
18AAF4BD075E141FC0A10B51A8A135B03DC6DCA020387ACC9266FA57B6E643DF
BB331CE57F216B047C497203DA6FBA97AD256196384F0737C335571BC7937F85
38038B8C73A85039EF07C0C5044FB2403AF7EB7A8D8655A56D4B891EB1A867BA
A7F4CE1A6AC72586C4C2879B039E58224C2920E41F7CB211028F4E4213D3D961
22CE4BC0AEC81C0059C321E23777EF79ECD5F3A2FA79ED70CF7B4BC278AD1EEC
2201547B38DBFE597F9EBA67F26433BA14E40068703149135CA6297E176D4AAD
292309E7B637070E27221C469D36ABE8102AE7DBB6730DD55A010C9626391134
C5C502FC321C2B2DE53C96DF6C29943606EB8D6CDB064E074E271E93FDFC6678
A1472C59658304EEE000FDC2823D6E19C371F50E610109BC664F86BAF0C497D2
9AC62462E4AB0685C83E024DD00F2C95F986614D0E13617E8D63EE72E1CE675D
AB2D1C6782F682445C80733390A9D90DA9A366827138F552BF30007B574C4C24
D966F1DC4A62013C0F6D77451A0FEFBD8ADD48024B7A544B07F4E098F1C27577
9AB4DF109B14BDF585D11756B3F48860D634D602C13CA467DB57AE28B5A02D69
F03BEA11696A9085DF00B85FDE2E19DD30B94364906397EFFD0A17ABD4CB1ECD
DF7C0577AE0B069459014528E632B6A7EC105ED8D300B4B496A526AF5A9B2D7C
8D2F75413CA1FE3A80BEF13F5B63DD34CE9742B49FB70C305BDD1206B0E6AF78
12832DB719FB26D0BD6E3F285475A9B54FCDFC63A044288191887394313BE14D
5CE6A798EEC19CE80693AF713B6AA39045D2E78002F9379DF9D6733ECDB3B6B8
98449360830018366BAE627850B280B3F09ECA1B2195D1D0D018DFB100791938
AFA2A2C31C6EB1663413349B3792E67D62E97F41FC44447FE6C8BDF57D63FCF4
96AF0126C34FD081165201BBEF6B77D5E9E4C61FECE68AAC54881660A4297EF8
C2843460F552DC0C568C811A4B5236E467223DDBF60D59E5300210B2763D3E5D
9E1869461B6CE922D2E3EC57E23723902EC74447F41B20AE890581C8016EF81D
C38CABE74D59681AC3E5A44004C40A276A43EC15CE237F08E151363134FBF455
F4E129D4B7CBC50B7565AAB9F084172A22E1987B86C88146C49B11BB61545D4E
9B983FBE5F01E7929BD43ACFEB3C1DEDCCA2BD0D8CDAAA2D57BBC05196B43715
A93F81DA50CBFF80E38E8FD10D078BFC80734E68F4BB612CE2C9F4BDE444843E
5CD95F7144E750F452087113DB2E1790B75C2D9F1A12C6E25BDDED0190F380B0
AAC02E6B4CCDA2D6A2267DA620229178F015147602B7C376EB0162918887BACC
E155B0B935B286362CF3AAA6D1A8C106EAA4DF97E526BF8394BE7D68F52AABB1
90F97EF697826E0ABDD75C208CAC6EE1685E8ADBD42220ACE4F0161CFC5D8EF0
1E37797FAA4DDE6CD36F78A39795FD781EE6EE45501524FADDA97D14327B538F
813E47ABBF7A1D14F1B48A66C7435FD7C03B27C4F113B9532FB73FD6450C8916
8022EEE291C298346C18CB2EBC5B233E966DF90161EC34F3DEBF308C15761EB2
BE6CCC569AD3AA6667CBB22C76CB48E0AB4722BE63797067144DB6F8EA12572C
D188735DD10DDFAE99BF2D3238395DC7B85ED164D5F35DA7769542E993DBA8D1
05620EF0E5533BDAA2ED7A19D1E022797CFD0842938EA46CBC350434E5517313
3DA7A4590D680C516B957E93303E0E1F71026FF426BFBE3A4FB6815030C7D657
034DBB02161011A8C68788A61762BD6FC63810C192260AE5D1D4F64FBF93C2AA
2C23B23A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/UniqueID 5096648 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
dup 120 /section put
dup 121 /dagger put
dup 122 /daggerdbl put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749E08
D67D1208C693A6640D1BD6B9285AC0D3110CBF8F7747AD12585141C3248D0BB5
BDE892F91A4B3291F21F30294693518E4629A3ADD7C8640E424FF615602C603E
1E14DCB3B17D34C090BEAD2A523E260A599522329B698729A635CFB15BE7E79E
6A34DAC7C3ED57340821A4E7A0C7F88F64BAA69BB80DFA8B659F4756878E3044
E1DC0D980A7CF3DA43B0FCB66680534E0C89465FF93E3E1C26AA06D10144B447
36C20B144185B706793CA68D11F247DF6EED0618709E009F28FF3D1E6395B165
2CE8453D18F7F6B0868BF0B3B7D7967CA9447C80E0F34DF60F356B5F810F10DA
59B37089E83F36B266A0E909DE0FFA519012501FF2B44239EBD5B95B93F15E19
D5C8B62F044C29704E9FAEB186AA9613D90D62A528E702D6E4A60B9DF83AF067
F71D9C3EF6547C4B4E9F1FF3B03D9BC40E32864028F7DEFBD11DAB6106CCCAB4
2978A1DA55B262D44D1132F0E5A94619B777503C44A33188881FCA4D6CE70888
DE7FD5C2A5184240A8A1007E8DBD9F3C504D9835BC14E92348C8FDD5DC30CE76
85B6721FFFF13641C88B98C193977C4039673BD27481630EC31290724D202FE3
4CDD8F9CFDD5837DF71EA51BBF6B7E85012B1A79D257BC1992829532D93BADB6
32EBB32EAE313540597714FF0E66112B2DE4165BDA03923A91D2470291175923
69CF6F9C81B7C84E7D4C8A75721652EAB7F7097587DC803C54DE18002405CA56
510967AE6C3D77942763927689E6BEA0FDB37614E8AAD3028E240AB9129D5F71
16E0B2D8FD5922693DDD97227A4C65EEB85D2FB0324EC2FA258548328275B333
E9A0E4F6B07F6AE9EF74112F4628F78B9BB30F4B484C35013EBFF846C487D2FF
16FAF0296BBBB3474B7951C2920FE0D18A619F3BE6B0D9801D5F3D158B2CE13A
89367A9A907644FEF76958588DA711E55E27CA972B9B7A8FFB15CD43168D3347
C537FE228A1157D73088901CF969A38E40AC32D34F49D48D200888F288B6D17D
67DCA1A06E3F1C92DFCC00FF7F845B5162D5AF852EF30BC7BC93EC53B1663F28
5BAED910347A425F29284D99EB634AB19461996FC2D3DC27DBF0D0C221529646
A475875BBDA6CB236C735B76F882DAE44EA4954FA03E8FA3D8B8DEC5D82A0213
5CB5872E91DBFA48A39D196D6EB55BCACF2AA13CB9736926CE2B3CE36E77BA31
D3F961F1D029550B2FFD6BC76B14D897EA3F0C29233A15FCB9CB7FBA37E3E298
EFAE81A935EFBFE4450403CB6CADD3BCCC17C096DE9A9D19D137D4C7FE02F857
CFD03833E3CF3525408B8E5CAAE83D0A01B679514E46D19FDD64F8F2E425BD95
1F19062F418CA659B7F0AA048F3550DA3E474128F1E023DEB4680908E07F2010
5997C01FE4C14A6443773A2CF6989DBC7DC96EF3603D1CAA8F1972F5D465E820
1BC64D44396DAF00144BC51E69C79A857EA0CCD1E6A994E5EBB7036EB3692453
9E71CC48C0CFDAC0F42DB585FB8FCBCEB95AC2361F66796E4956715C389039FA
CF19230180CF5659FFC6C6DCBEFC95A55AB31A95BD3E73B2F1C4BC33C2A1C4BB
EA2CE80F68E4E210D9C4AF0161D0C04219699156340DA605B4BC2C16B1E57089
D58E5EE99125A14177F7CE96398AC7E423171A8D59EDA011EDD70E9DD3A74E96
191A2C334E83C5C112DD67B95900299BD458A82292D4A460C62E5CF66B45532F
23FD6D0B5729C99E36098BBB563A6E161E1E46D8060FC967BEFCA72467B38B0A
0F81368619AEE9E48DA753C9CC1F06EC96D712418BE0674C30DE633D6D9AC5F4
079649DB588D4D7F7615B6D3A6AD55A84F4CA68DBDB6ED605CC8B8A9B93562BF
547E895FD3F7236B5303C6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 16 /dotlessi put
dup 19 /acute put
dup 20 /caron put
dup 23 /ring put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 126 /tilde put
dup 127 /dieresis put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E299575EF2ECAAC7649193843D694E
6CA59318C01132C361A3E43BE637B70B9966664E12EF4707F6B100BC37778D1C
F1806B1DE081D2C9B995BF1EE3842EFFBB8416161FE31633A6EDA118E563BDC1
C42F403BE8A009FC756406669E34C6A08668808E0C31A589D0720BE32F3181F9
8039645643E15D25917F38DFFD8BD08A420854DE15AF291ED675A634C151193D
29AA6E04E84A598350AF17E71973854842AFEC3EB1B58E4D4433309BF5ED9D86
32C4BD136C89169D45718A88BABE25072D8E552AA4CA3F840ECB11519B06EB44
13026DD6800CBAA90F3BF0022E66A54BE1059BD5D224B674AD3199379D82D571
ABF7BDD1BFA45A0F0E9ACA0A400BC5FE22DF4A041BCCB93DC23D547CDF0A49CC
6C7DAFF30FE0843CB3324AAA3B92F543A985027FD2715F4182BAB1640F391992
E4DB6C19A96D1D48EE4A4DD94D6443467C61CDFEC9B11E07DBD7F7BC33B34BF3
EB97A7C3D0C4E322ADAF9CB6320A64DF78223011738501A124CAAF7D717983FD
8BABC1AE4CB0FD382E26BE0A83169B6C371950D7E9A94FD82BD20A3E2112F447
F1E4203D9978E6D9B8DF24E670E2D4BD160D5CABF3C460F00B5229B48CAD82CA
9ECAB97B709C0C4FED12CD9B497B4D5E505A22F12589E28B0C3017683A6EEE2F
2928DDF7763CD8F58B531F526EE267EFEDF72DCFC8E547F329A7C6BAE64C2800
AE848C69574115EB02F9CBA61ABF99AE6DEB18BA4DD295682F10B960D8F0DA3B
B4D6190603E95B7F8102DE04DBED3AF90DC3CF440F60CF50A8AA982FB965DD80
E0B8F62F1589924262E1B3292F82EAC5A888AB240D40F889F9CE2CBD7F2F2E8C
A1E4479DF6E27D00D4347DFBB8B977D8B1ED261C3CE14538C0AF23BF0B4825F0
39B2F2AC125BD84B6B9626300A2C001119893830B3542A09B6986620B6E9200B
BBC5CA508A4D0A31B72EAF25651A806F88A2943849C5CC2CEC3C79ABA958B020
6B8ECADB5438E230ACF8939688C11F16242C5D58A55AFBAC2971E09C0F7A2D20
2B26FE7FDEF8203A73EB4E47F9953B6EC5ED9985C6D84CAFB3DAE3C39B1EE33E
8D54A862ABA4FD8C0E9787B5B71E960FBB9C3003F8034CDB16A0D8D0709D18F0
22679AA4339CF26E41992B5B5B33D59D937892983C5B1151AD6EB37B065E8E99
6E9BB66724E0CF4044C77E79B6D697D9F368A76B76C93ED4BE9C4E0B61B26919
976BCD5FA3F527BB093BBB0BB979131EF153F77845B4EB6B7378A17DD297E656
0BAA38BDB532CB389E2C60778B658220CEBF7F77DD6677D8248975B86D52ED2F
1DD38A57ABE4ECCF554EFE937070D7F73B8B51F59449236E33FB1C6BE506F7CA
DABDB3E38B70398F5FD377E00C7DBDBCCA9D82180EEA815E0E2231789FF7FB88
67F04D4049A6FC4CD8F12202CE784F633E3161FA9E4CD2F3401BBEA11B43D1E4
A99FEE87D0E97CF4FA509B30F1E0672AD64EBB14C9F19F9E6DD333B78E91E4D7
058517DCD523FE710FF61D766E9B334BDD7EA54C5BDCF6D612B27BF30449DB57
9D45152EE0223988AB6689FF07633996760214DA5B3488EF0C721352061B4713
4DD352D33C92EDE23164B73C973B354190F6B763DEDBF476F351600386A73DFC
12D3BDAF7171A4DBBF325B81C3E9A9CF037B92BEA7CF2581C204FC9A32A2D837
53E61071F93B4C14D9EB5595857A8487DAB64850A522D3BBC5266697AA20BBE5
ADC2B055509631867E9FE1E2E27C86275428D8A604C6F909DBA2E131A6EF7958
6E58CD095EC2794B85C90C31BD58A615164E7AFCF723A8F721B0613DA768E86A
9E6313BAEB3A19375F56EA959848C87E96B6C42BB7FB6A7B729380BEF8AAE0E8
FA7D5CCD23FAC7E2B86EEE57FD4AE6B2CCD0388419566109401291E2599B2F6F
443D3AE7177E9416762900C1A624AA4A95ED9B4AE3091E5EFCBAAA36E29E9DCF
A4D9F22BA29E867F335A4EEACDD9395D5D911F077A97BC4DC4F173DED9AAC154
46B0FE042342FFB00EC04E140B04A635B81D007B8202B1C7B596DBB8AF64ECE5
8BFCB5A59331A812E6E9CA81BFE8F11B55E5EC16C62397F61A01893D11EFF1C3
1BF683F9E339438F22E8139FEE5F45132524C3EBC93C8B19CB9944E3D7737620
C6C6E7008518BA460FE12765F958D9ED4CECD61E033D083625FFCC6051C4E8DC
3D33C8B63F94DA19FC154DECB99A3F5265353C51AE0FEE791B347B8853B00ADD
06B7ED1080824B8D3AA073A1FD2E01CB1197E7C8F23839C74D948AAD95AD8818
56D612F6FBA0584A36B363DDF1730E8722A632641B233BDFE56BBD076682DDBC
8118A7AE3AB9C02F9A8B170E1B88DA75406E543C730889C891B1F6741147D65E
DDA5B466A2B6F96D7AE0804AEEEFF31218DE33608825727E7084BEA8B5345791
F1735D99A55B6543C2AF5F3245F2C601BC8CDC16EA9F0B3501B9A67B3468CD10
3D51D4531F916145CDF0E3E671A8BB4EFBF829D2CAFAA9F401092E1814D53EB5
7B30F6D48981100410B7DBC36B1AA378E1A7015F2AD538B4D8337D36229676EB
A03B90E2CE4F426444FD2ABAECEB09E131D6395DBF4219D9DBE1AD8919376E03
009F40CDFE4604AE49E8E026ED9214B16B5EBE853E6B619B4B873EBBBB08021E
3AFE578357F00CA1449A76C921024B55FC6DDD5C1D12A6A2D40CD30AB73B129F
E99EE8B68AE490A79CB8484AE4B1323A6D1A502AB62EDFB6C4B0DE530D2DB680
99B8B2760786DDD7EBAB7D4D1E68FFE98B8597A6480C1BAB28535F598E184CE2
35D4BDE1E53A3AE32B59F887C944D88DFA499941A4C1AC955768BD46AEFFD442
C1D1D591A617EC7403738657518FED493946F72CE6A60DF968AFE961496A3CA4
7F0F2383A6028649DCE7B4B548A0EC5AA55A1449DE7021D25310114C9AAF2466
1535E55324DA3386700F705F9B9BF53E6C3858651B2FA8827ABEA9BDB9CE8AC7
F3CE306EDDA0D4638AB784FC380C5F15D56AA2AD3845443896EFD38FA9B51B9C
502BFBEBFD3BC9271CDA7083EBCA5E125B20FBA0D783738BEF36982B7B6A7A14
FF9282F575CF89AEF4279FD206596690F2244DD80719E132A5D87420FD32F1D2
1471D485F5113447EDB274E02030C1CED85B4EFA4D6A051A12274279ABE1216B
C377D369CC37B3CF806596DCAE0CB72BC26EF0ECDD28C9741E053092C7AB9D34
C66D0FAC80D4B8832895810B75E6B0167BFB0AA29CEA6B351B7F1F6FC86C27FA
B631F2551E2781E74C08CC2DE33EAAA1E4A099F634339D105B173D41BBACE409
94EB11331C74703B02AE4A56DA1CA78A8AD695FDB96CA20A0B570B4AC806FBDE
778903DFFA60F6AC177A348F274ECC31AD035DF36428829DE7DDA9BE0DEE75F9
08935C0B488738A1B328A304AF6574A9A38D3DAD511EF1794E958C0592C934FF
2AC5B6A964076C8CFED0354FB1ECC702D09CB6CE0B176E516B486739CE5265CE
40BF96C92D234AEECEB93E41A4CD49AC2311DFC4661E2CF4E352D5B5E82063ED
997E502BD71B3688E25A9CF25C88A384578D427FEA0F327193A7959AA9AD55C7
96C36103231E9972464CE75AAB769B617E31D19C0DDFF09EAFAA8DE79325067C
8534554C5BF21FEF3525E1F33FAD7716A552014C3D4A1679961C8A1584266453
01319B6030E65075580914F1FE20C3FE60554209CF14C20113371F19C8016561
3FD4BC318105FBE743F42C1C25E11B39D8EADC171C2E2ACA0DFFAF62D9DF3907
3A5ED0CC7D75E360338F29CD0443DF9F53E335EF14E6CC2C590CB32AD1E22B60
69113FFA623E4C50026FEABBA19755C85371FCC9B3939253E3156472CC660568
89123427BDE5B64B3D805878363967617F599957FEA489603A9D23231444A60C
1112D999EA8D71A9C7DBF528A46DA853130C1166EE98E0820166170605B75435
B3075B275E6E38E0ABCCDA169B10C683F7075D4F4DEFD959E669CB03A3CF2301
753FDC5EBCB8380064A91D813C4742F4A3C8D997A3ECD25B9F11BD929F39D0C0
F0619E630923CD601E96E7A9FD2BDE8744660B5BBEE3206674DFA9EB2E5C2790
F8B11748001D6C36351104954ABB2610362892400D1165F77B26342F416210B2
5B9A4A279FBBC5F1C075D37D441B7AE1D7BE2ABF864068800ADA3D81F456AD11
50D6471834B4AF7F49B9E73132A4857B9EC592F01F9769F106EC83050C15B72B
4AC5DE1BD2A13F1415F381236D587C4B31780130EC6936141F6BE2E7079529B9
949C4B9D3ED20C5E71F6DD8D5D97E9EFF8937FB4D08AD8AACAB446B96D3FF7B2
D1F667B6539A69F0FFCDC949E66DD6B77CCE7A18E5A2F80ACF8D9E409B3912D3
4421D9D366CC01BEDD930B2F51127E7C7DD893CDFE778EE569EC7E138D3B64FD
1EE941726DC2169F0628384B5F175937BB59523C3FFD39250EFF1AF86AB7E3D6
86CF10D325D6320CC468693432437475E0EB45F1DB7F5270F3F2792EED18C6B4
1120654F18298DECA5032C3D2F7645933D226156D0691853139279C76DD10187
218446FA1AA3F0C2EC25224513CE10BE823B3488E1F076BD746B7538794D9D41
4DBCFCC498827F695734D5B678F8B8292A40E7A89CE5EACF701265A8D66D5E73
CEA8C2C6D7E9802AF51D3323029FC530086D9A11BFADF476AD922C7EC7BE2C1D
447EFA28F4013DFDA4272FCF119B6617FD13D4FC5220E86C5E9ADFD6664348C7
A8ADB06F5552120DEBD28BCCD7B42E870B063C6B5C860F95F0CF8F1585067656
0A068115824350EF9A72F38FEA852AD5F9C22046B4494D36D8443957F5EE55CC
1B51C6FCDE59F208842201A500EBB156F0FD62BBEAEC925B07D062EBEF1B85CF
BE7F34A32F7B28D4D7073AF54F80AF00BF27319B6F9823337EE24775C2952BEB
DA4C798C8CF098F26C8AF48B458803BB26487C139AE8E970972DB8937D1A4497
FCE885738CC7D55CF78D812DC7AE3950B73A99FDA1CBA057F351D7485862C4EE
34FA1F7E79B36FDD480534B773DE08E9C7281BC7221B38E6AFC752DF155CF883
F5C6A2323254BF1F13E58189D5E7DFF660B695B2DEF3571710637F0200C10EB6
B5399326CA337BFFAB5E77A8561FC3B716A8507B3D625E12BC4F9E00674AA368
7D84DBBC006663496D302786902E9EB54182A44D585008DA7CFB861B599F7D71
2E5A880C87145991AE01AE951F950B7AF0DC315D433C72DFCD87AABBA4F031C2
FD268F72ED28DCA007615F2237F541682A4AD8E3C6F3412F0EE0562A83EEDDC8
7C0B33F0CF8980A47B469CE244DD30D8E252FC89944B0FAB07B9B79005F8EE53
E55303DA72A663423CB998052D3BF253222A54B49702BE6E7F9610DDD2E853E2
AA1B26C174884D224F4210AE0375B3E2127FDDC899FB675A7D4004645A86293B
802F7AD7FE8A6760226A0D8C888ABAFDF9E40523B71677FEF1B54D1CFF1026D5
9C0AA4AABDB6617177B5128CB22BA0A03220605A25A35DDF67175334CFAE22EE
A8FC9DF4E966790720A7983D437455C6B5E55E5BF4E331EC3BEC86FF2C244668
A88C9BA4B109F0638B1911D83C1A52C7C9B76BCAF6BD9734AECB023C067E637F
341D6A70CC3D8AEE2EA4D185D3C63C624024A066D2ECE33E252E3E9EF5E313B8
23EF0C51975949CC48C59AEEF8308AAF740B7E6A2146BBB01F390E3E7A5B5BF2
DA5BD92C39BD4E82CFE67652EBFC4B566CDE0C7071FD33FB966B27A27A10E2B7
3BF623BE26E6BDAB41C4E891A834F2B9ADC1CF999905839993BE3FB73E4B951F
D0272777AB6B55EE67681B497A49171411552AFBC03B9613F40B33F702756E9F
6E9EC2E553AEBE692DC18D85180302E0E977F5C4DB30929B92DD4076F8011055
C63BB2920BED985622EE5D5B4E16A87AEE00E983362A14374878CF4D1E93AC95
9A8E552FAD980576F448FE57DB1E3C8D4E672EF0690E86493CB55EE268573E7B
A8AE827815ED57076ABB18109B951C92F878511207E4BE8D764050691114F757
91338792A6BD909F1A96D5FD72753FBDFFC20DFA02DC0D749D3AF2C41A16F83D
81578EDA25A38F8CB209CBADF181A5BA2620E164230F1DFC02B0C6FD6941365A
1A074A184FC489CDF1916C12FDF1BE1CB367D01567E2C499FAD9705C1EE31181
C648C44DEE98FB540C27D9C0A76531D10170DCC53B6856E0A64E730AB000B766
5E0D17CC10B4D813B72E9A40D686DFFC1200D6FC4322AF5754E836D90D63EBC6
E4A56C2A88315DA5DC0B29BE8111B7B1247F8D4987E4DB01A0B0978CDD399270
FA6D330C87120809F46FAE9DC6DC36677990DEF51234F6D95BCC2F13C95047CD
B13FCDE826746D29C2DF59483E03E57F72AAF5954BD0B09E35436DF34963FA1B
CA59DFFEF7CDB14EF4C1524900738C7D7119EE08AE8649B1B7383B7511EB6BF4
78E4D736ADC76E048C18FB6B8FFD5550A1F20D20800F47980F9DC421EB07CC93
EC51B3F7138529A12546658DB3784D0778A4244CAB69F9F5BB5057B708FE405B
9E5EE06B08D2EDE5B293F1EA0F7842FECE81A46A959ADDF30E75AB0D7E5BAD8D
4E5636069AAC8B30133E6683A898B0C9B0D6A2ADC2D70FC258331E715C295887
DE6625B837DBEBC473770B0DC0916C1010D1DE45442ED20F986DBF421351644C
20911D5A640DC3CB76FF5D1067CC26CFBF5F8A44AD860F7C18FBF242DB0F962B
8A0E1B4801EA026936A81E68AB5DF3B50A51B1A4E64F58860CE40B24A36932C9
BF748C207ABAF43A35D046AA22449D8AD2011F79413E96D5A99EE979A56FC7F5
529206548A2D7F1DDC311BDABF2D7E737A785D5018B2429D8E2A497E1D38E137
20B1321BF2B87DA35E2AD5E393301524310EC94E34E1E485EB4D1CB7E443F16F
5433DBC83B29561647076A85FE65BE7D2DB50974A4056B6C8DF2E065C4FCD5F0
0567C5ED152364EA70D7AED35EF0DAEB0D2FD80D39BDA2500242371E8BAA7AA9
144721F5166C3F0406F924145C3BC580AACA3A6C855E1099817260DA4FFD9D00
A9CC3A197EEAB9BA924CF3EC150BB5D86E1E1857F03CA7B043C4BCFC8C4E2654
8D4E374F427CE4179FD9C2216CB65C1F0E5882D41D86D14AEF81AC604272AD25
9BFF24FD49E9C41B56F22CA5F2FF859FF36E980C108307B7A9CE52AE0A378E72
63F415CF4A81D4A7385BA743963DFDB858B0BAD4B25BE80AA332E8EFBC7445B0
DBB360CA7518709FBC733A433F168667638541AEE3A65BFEEEF21B96C76256F7
4B731A6F1A1A42B44DBE8A70F289C79D6A458D9D744D530F53D85AF94F07988E
A7861AA449FB49058980CB653B93624E56C1AB63DD5DAD3A4A6F10348C6998B5
CB0FAB89ADF62D9CDC627E2FEF19539813DF686FBE1AA97D4801FDA930E6E138
B5894B95A369AE65D1F57CDC5B0E75294B77CC6B0650029CB1B26B6D7102ECE8
79C908C31118202645701C60C813E219381A29FDA4BFDFA876798F6D4BCC0742
D12B164A7FE670ECA3CBD43509A807B64E9A94324A93A4A0FCF1F3843951D53A
761421A76E41E3B9B969424194828F2671C091446F1DB0DEB5A010E112A04DFB
C75EEAC2B631327B18E6D29465C71B97E2172C2BBC52823D2261AA9B3FBBC142
78BC2E22A47E124B066867101CCA5786F09579F8D36A6A73212AD0D5BB876687
1A2D398743E18D0A32A1DF00564BC61BC58914E7CA6068525DD743144376EAC9
D060C731F5FE92A542AD491A9EF01BFD7E637E17A24868FD8E0CE6865E9FA50D
9BBAE76F62AC84F871B50D2EEC629F7C6F31D1ADB65D0A5F9EA8B195B7C8CA88
5EED5CFBA2CECDD5CCBF12167862DC59C050719491CA88FCE89ED4D77BF90550
4830B817557F0079A091514E89E6A81150E459E3EE43E4FD901333C56ED7B441
9EA96858B8B47416DC4DA17DB724E8860E71B82C4038A70AEC32256B72146D9A
67B43F009C7BDBBF3A18C0AC8956E79F14BEE9262BECF1F8CB248CE045CEF56E
7ECD2A29FB6D1746A11305636981179F0F7B022677B2B1F83A152592D408BA45
6D54667FB133045961FA199A74005A31895EAB8165047E10E2EB7B4DCCB0AD7F
B0F3E2D2F50AF5A3B28CD5F5714B772723108C5BDD228D5F75743DB16B448AA0
9E333DAA13E0FB9EABA168919C08651B5F07401E08B825457E99D0B5FE2E154D
0E4C8093E5D60F889B610D62333826299D737C0D4116B34C0F45F8478A3968CD
8A8DE8A42122C4DF79A695C47BA631AFAB65A68D3E2709998A92A84D33DB17B0
3ED31E29A8DBFDF635B21E407CB25B45F3C7E5CF2C912FFA10D407AC50800BD1
31FA9A05B2D6175DF16D115EAF000568C998C9B9CA7E3D67A449D2A646A5ECC2
81EEF14315CF0F21902FC1116773801F4D1FD71BE544D2EF4BCB4026F6F711B5
FCA59C9DD42CEE0B47EFB16B59345DBFF0EB75CEDAE6922ED6DC58333ED01C02
AFDE6A05967B1BFE0EBA31BEBC8B397B245B7F4FF00182A33E5F22E1444D047D
BABC7388D9534B1BB1C7EC2248BF35B48B6094B1346EA896ED45704DA4E81CA8
A30C29F43DAE37C0206C3EA3AE47BAEB4F5180E27B9509BFD7DA6718E63FCF63
72B59ACD404732DCF420A75B28E869A75ED6FE1768145A3EA8612E2A30CEC1B0
B788B919A7B041D3D45CC916715EB84CA3A5A3CA1C5A79FC64B6EB1E811F5680
88A83C31F2E20C2219FDFA72985682C6B0B8B50AB220A25CFCF03892B392C6E7
9436609B8B366D1CD10E7AE77BF7A78AC00B8206A2EA24B823C94D6423B05436
8D99B3FECD1AC940FBF0BC55B9BDFFC0D0E9EC0E79FC7FF2469FF580260F65B5
00B1CB4F03A81E746F9C9361F20AA11C92EA3AD6F0A534E0909B7E1E7DECA935
713D6FAF3D426B6D64D3226BEF51E59B6EB58780BD7FF1EC0C95DAB855ADF844
6CECDB269400DD33A87516EBB1AFF753508FF852FA22ACDE978CA00D5EBDD59A
54251B21F0B0348DE71F742EEC5EFE237A0C930DE223F85689023519F6195885
1299F9F0187DC138BA9DF764764DF89093FC16A660060FDC4BB6A3658F4F531E
21B411E189FEA39D9B93376F7E4AA845A8FF51355FB747B07D8021AF59B618F6
E5C9687476EA306591A68675C63BAD20A1B77304C21C3688C977A6F6657F0304
0BC33598474E5D5FED0EA272FA2AD2C7E10117B357660511D8912996186ED0EA
41452275C1DB6C3850CD302F2EB0414AFB34CC9D2FBBE0A0A1F3CDCC116F1E7C
669A05073221003DFFA15562F71BDFF2CF56523C1F0E9D25B6C5E60ED53B9BC4
915714D9712D842E7DA5FA876A1D138CACC46CD3AEC3B776CBE69E2EBCDEC8DD
BC084B6E6A6EFF9B6E7B97EAE20A8195E06DC36235CD1AA642CABD334B5F0687
BFCD06E561DADEE26D771B5DC80226C2302BF10F6DF9A8F511D91E86C7A25B62
6186508D1DE8472B5A52C3BF2843D12DA11C3A4CE575BBA642E4EBE2AAE99422
53F614F642E0F50FCF274BA2833D2F5E574227CCB90B1B0325223EA617A71424
4E076C4865F76D4F1D4E08249DC375D3E704B5174A36FAE3D3B48DAF5B6C5EF3
8D62BD6725437E0893E6D7E67F6A47F759B7632B783E24E10B08A0E82252AD5B
ED964B6B22C15C87EC9317D80721E99A45288EFBDFD4E4EEA6E6DFA76DFB38D5
12B32AF97011157379A1C60790C5AF15E9A062BA74DF0F5491AFBEBA9ACC2DE8
AF52DB1151D27C1E57CAD0DA25012F44BCBD5E2B7022D82F70DD5F0592F37D79
C9A46106865EE16BEE0B7FF79C79652C500D92558403E484E1158F32B3DD2B06
D394E6C7A59A8A9EF67F097399EAB6748B87C04A70DA042D3DCD94CF1448A343
32525FB42C230FE83A96F5348FA041A9167DFE38D6CD48C804B8C3D87208CFE8
365447A33FCADF8E1D27BFD2D0D601A1EC82AA62C14593D8FC2A4ABEAD66039D
71C5F46AA6523729F204AAF0B7A0D3EC78C32B09008AB91A34A39CD23C2C2A26
C771AD218CD98A7F4E1777E90D70D38BA86AA7CBE79E0E9D4BCD14B3FB88322A
CE269AF303D57AFC616E20B6B12B517CF4033CD654867E8124F4369FED0EE7E6
9883CD38F67A8882108C2B8CD3CBB484258245E62E6DB0EEEE68AB18188849E7
08A4E675289F56DA6517EEDECF4B2095706F6E4394F741017CB870E467699309
8643EDD5559D0090C4B51E494F262793F39A60A77BC2E5FFCF122E02BD622D5C
31C2E775D3B9FAB3AAAAFCE6678EE3B918630C40FED18D00CA8D9619E3E82D8B
48D7A188149E58F6003834FE05A66B1F52A9887217E5A45CCA4FDEF50ECCB411
FDB43F24F93AC6D4C15403FC6685341A92A2CFEA8A9C44BB7BAB04434BBB9F6A
F948949293F58FAE75E55F8AAE362C026C4AEA6DE83B465CDE157F933E64DB11
ABA77BAF28636AF0D485251C29DA14AC59AEEE25ACF2F0F56E9293FB00F24C2F
914C7EE7EBB2EA38DBCFD92CB7ECFEDF67F809E347D2D68CD869FA8E729D506B
0D5C107713D1E69235831B23303E19602921F9DA00652DEA0500042645C9F833
828FC5C5CF5296614DB00829A7D2C2BBD831666AE15034ACE7D0B80A6AE35DDC
A9768276725586192B0F7823B822BA412156E504EC994008B045FD0C401DB959
C9A49969366B349A0CE91EED7EB83E926306E68866FA558B99757D6684335374
07C47428644395394301BBDCD8CCA4765442D55A5E1EBC9886BF715E5492C68C
2011ADFABF511B34B8BF48887A33F64C415DA33AC7D0FB051373D340AF60C1D8
5F25ADD48F540D8E8E7A173793DFCE86E85FACCFD569FE32D718EC87319BB252
02A01894C4580B37978DE93E979FAE5DA7B24419C3D0C78DFD9D29553BE38854
478BDAB41397373852367F5E22508D5B7C88915CDD30A3EECAF682634444286F
118AC3BEB82890D95B458859577FBDBBFDC9AC18753B6B679E71F91E9D1918AF
BFE99175DDB4935C4AC38918FCAC226A6287DF5D42781F3A6C449711E0082F40
EEF32FD0354B9D07944797B3324BABA20286DC001EF4B6FC3FCC815F88D525D5
0D41AEA35D6521489AE5326C22960410ECCE22E297CD7518722323159B0E0B22
4D0DDE96B5BD26679CAB2A025C7A4DAA2F590B2B2130228C96C2808BC5F61AB1
98A63A8378E8D8A07ECD1B8872BA7275E0BEFF9CAA089251D786F57E72E11624
9E8B47CD4CB0EA163074B2DC60DE792AD715CD5A5355B231BB9785B59A8CB74B
C1E87F567A966E55FBB7CD9058E5DC0293A1AB3AC84F7B4031B32DA3293BC4B1
7124FBF2232E0B75B776039AD96BD032553230B90F594B1A23AD8A4B3572C5C6
11DCFB4AF87B1C22C74CCEF9D240E8E2D1C3C40F2D73D87301A1CF2A1FA37A4E
C2A474C57916130E1DCC2F5ECE6D74D483D43B81F6CE77E32BDAB7BF6A1F8E05
37BCF34D44133427B5552E4529B134AC02B1AD9B3C093D03BB4A8A3EFFD8C757
7B1BD9563F41CEDBAFC4A6E9C15B504F50A2AB84549A8DA809B236605D294D59
FBA5112AB4B8DB06894738B26420B671184B6D8FF75E410B74DC07FE80FC2B6D
4481AA22D63ECBF6F2E3B9666A6DA8CCDFE732241DA2A43958739641CF2E49CF
150A7D449C0013C472E54FF1C951F5B28A781A5E67BC85DC8FE620DA2C89184E
27CBA842DCDB0358388414DADD3EA668799A7626A8A86A6D94FD6E8DE015EAFF
308EAF8482C3B98BD5BC0449DE40459FE72E21915E2966032854401360B6D793
13D29E66502FB01BB368EA33F862586E0078FE2A80CC6AFC19335E8E17E6CDD9
704364163117072CAE27BD52CC5E5C05081F92E502195039B8C9DB01ED2238A6
B62F81B058C13F315B3B143B582209FC3377D6C03677D1F04601F0EB2FF7C5A9
256B09C48CB5FDBAEBB1EDD44E64485529262F21B155A95E57178E38BE8E788E
7E00CC85EA28F4C5E539F9E3946B1C422B458B4C94DAFB7F1FDDB27FE8CCA96B
0065B985AF2816A90DD0481FEF5BB7AE0C7C7BB16F85BF679F9AC23454EFF99C
E11275CDDEE24963CAC67B3B3008A214001AF3CEDDF5255C656BEF87C323E894
6DB3EA5ACBA9EBD5508586B4C4D124B7CFF430A4A1403A2D3F0AF5363FAFA5A0
6F5A81BA89029BB2C59929BBAB702E17981CFD52392BBB5D09408114598A4540
CD6965CB2D290028C6D84007BAFE1D87E29E53FDB8D166D7A365EBF9C4E365B5
D110EABBA0EDCBF9C181540243E36D91963CB006707CF6B302C2704BF369F2BE
7A950793772EB6B6597118910F796D2CBF1F3A3904D8A5A2A43E32B41CF61012
885A1E9E075B279DB7C16328AADEFF2D25F230F30A1277346F7AEA2D1DF10E4A
02A8016854705BDB5085801BE96184F3A1EA54493F51143BF33171BA1E39B445
535FAB65AFFB5A729520D52DD6403968698172D87800F5D28BE148070006404C
E4BC9FA1DE5B40BA853EF291149F4CBB173F7A0C7D1567FB537705599B68F342
061003E9FD10EC6865172EB6984239B6300C5092173E83584512C0E1CD2A1483
2606DB741C1BCD62865C837D624D3C17026B9DCA3B472AEA13A1A12E1E364BB4
9FC7CBC7FBD2EC51010F21E86B32DB597AE66DAD57616EB8A88F5F2726F0F273
6B420953608072594E3ED501A322C8684AAD24252B1C7E8E54824DBD40716682
230CD3C447572B0A878E4220F0FB0AAD4ED4B16070894D71E72334568017B23D
9012FB883A3A7B50B1617CCCECE60F6236564F1ECAD371E2B9AC02DF0E79C30D
95784D74647E46DCE93CC5AF21908DD3D1E630286956D60C8D55841C100FA8AB
9D3A333AC42A6EAD0E6F9B9F766436EE52FE77735BC3051986820AAB5D276F4A
4B85440F785DD9D1EDB0BC70D8FD7F276DD0532054311287AA8E555967F8A0AF
7907DAE9FA370739365DE4153EDFF0C98C4767E67A5141714CFB355483C0BDC8
2B98A0CAED7EF5E11596486953BF42E6F30E34B62BA8851808FA65D21C4867AD
042DD0D7B52453BEC9313C01EA29D6BCA06686F0809AB8D1394BCF2D5488947F
A5DD507CAD83CC447CF065FB09F0E231435B92AD8DD491A7C3EB53450C2D7D60
FBBF90B81A530495C45A96674E0976D78F7E8049C4B7F99CA81C38CC7BB91EDF
A96F44A9F245A53770E893CE665EED758B0447931B1182C677132533E5609E57
45566015B95F8BDEBC8EFF562A09D574F09F2D7364408E556C4BEF2514973CC6
A2967BC611E1A05D3BD0872552CFA89FD0AD6FC959C9534AEB2098F439A58B2C
001311C11DB5B5A0B3F7F75BE91AA3CA40B56F91CD00ADE0164FA12A216B2211
3ECBEFF53E49FE534D981487FD44032F37F3A908E8FF8079A3C578DADC4F79B1
648B04C884ECFCD315640921A7C08346324DBA543DF087BF33B5DCA8B4E59F10
2085F2889A37F592764690C7D022041869A1DAB3D65FBBAC21C95699D7382365
60F6A9957ED619D48837CB54302FDCF6AFA4230C3C36845B921A15364F27AD30
DE2A51111A486C95E6C27F898B52758DDD8DC56E7FF271C2917FD37F24DC4A6D
60CC642FD730FC23B56CC86736792DB3CA806695A51322B45E5513BDAD620C7F
7C45028C674E9C1AA24BF84ABBCB474351788AC1BF0CE1CDB54E07C762578B1E
36D85AD6624777DB6175C592EC7263C1869508B6CFE327342D932D084333448B
8E183BDDD711F8F9CB1984266EE3A91A9414598890B1371A365697C3D1C4D5D6
E2846093EE0AC36871C25FF9287A45F8C616BF72480C4E3EC94DA0B858532B4A
B219F773EF2F87D293E894CD8DBB42FFCB458E5581C0BB464E687107C704753B
A0FB117D7044D0FD60027762A28657D36FF9534AC7501FEB1E5A936E49904D45
E3A43231A1E6AC010428A5027ABA8110C108D5FB14B2A047C8C4CCE3B9284364
22CB12E4D65FD6698B4CA921C1AAFC0E64BBE68116EDFC8C015CBCB627174219
7494B23AE9AF720FCC3F14D952C5A447D794D3CADA0191C9611AA354EA1A3517
B6259B6B0176BF8BB332F626900EB5057DC255B94580F4D1619B76D50D0BBE76
84385CEFCEDB3981335CD1AA2DC071910663784EF62392CECC84621938AB07A7
4AD299433032A15A2AABAB0929C8C007CDFA60DD551A88B3FB9D84DAB00C9C40
F7C62E233ECEB7FBCD9BEE3A4A553DD4D15487EFEE3BC0D3CFAE0AB31F6EA0DC
8CEC9421D046963575F318FC5F641D26CF0BE06C9BE760E446E11ED6A13C23FB
41D29199F9A50C53B69FB05465602B5BE0FFD4269CC8505AA0D8D09269933A21
77E29DFD9B2BB3840BE2E5E8ED311A55F0D0E7139B11048A7D06DD8C2F7B3697
2054CE0559E06F1F7A4B6B0F0FC6526D0DD8192AA37CD1199B15B91DEBEB9045
BDA86732B58C847ECFC661278D23AA290972E354AB942B6A9E335EFE1859958E
FD35DF43B44018B87ADAFEB1277BB1951525A2CAF9C0DC474FE36353D8E37EDE
D55E7DA29E3E87D9D6A4139E6C6339850155AE380DEC3842D2AA8A46BB18E7D7
6EF1005084B6FDA72A2B9DB61A78FC62FF33127B1941ED199E424A63B9404C39
21BF3F26679FB975E1392ECDAC9A8B43EBA4DE605E7A45A3ADBA2BA85A80F183
6EE7E0750C9803C102D04F0DA57619C793CBC1FFA996AD2955DF548E6EED5680
1666AF44C3EA5DB6A525B3F622C81DCACCBF0E52286F19D8EB0500BED9FAFF7B
FDC9E54BDEC6CC51CF0651DEE0B0BFFE2D7FE985F517216AB53F2FF32B5A0AD3
6F6C7249F7287256E37AABF9A290CC23B680A882E881647E9B31763D66AD2478
0D5A7A41304C1B34986004B641A58DBB6FB74CEBCFFD031234B13AAFA81A6B99
126215E7FFFA3A0D1A86851832F79A1099C3F7308024492F8AD14E3027202A05
B20186AC1256842FD4624CE406DFEEA55D44773D596BC9549B5FE8810F8B3BB3
E8C7295B7732C0409102409AE0D10360DC35C31360B816C82F058A52C6C049E3
B285212F28B530727F0E78336BB1AA4E8C4DC4B9BDD01CCBD88F6C02B46D6850
B8B83F511F0A79FF49E99FA4AB1FB5CED363B37FD0BE8839D297A69CCA5692EC
00BA2EAF1C1EDBB402770A74D001A9B78F9AD9362624616114E28359578F3D13
3D1A0CEF2D55047EA0DF3427BCF3D9C1607E4AF4A43FD3C4F2B0D4E796D68B2A
AC66ACA04053E08D6C4810474C705DD6CC1A2272E63D9841D85F3D5CC90A8F95
B6531BFE98CAC1594452B039428023088098FE831BF54CA512C8A759B2FE7493
2A40C7325D711CA890BA7F0AAD6CC88CD26BBB40D1ADCB322E51CB752791EE3B
B698299B3C8806F33976E8EE3925DC5D5C837D60EB4FE8514D578F33BB27FEFD
82464B755786157DF844DC442B01491935768F8FB29F2ECC5D5C502F8750B28A
7C254530AC017015F3E861CF19F039F1C5B34072AE6E76D65606CAA9B873312A
C51575EFA2C223F4C5A58490DD9CCDD963E79046E4532B6A01ADA54717042657
C70C103B91527433218189A3A95AD3368451335278E47B8676DB5FDE3FA516A5
74844EA0308D4CFDFEEA656FB3DEA9EC7734DED18104CFE2E583B30F6180FA70
DCE0E0F7F55F5481D1339BAE9DEFAD8533FE2807F1FCA99AD955F903F06954B3
D8471D2ADB219B6E9AA5675264330D04117D181B386A017517C7605751A80D6F
E4DFFCFF106CDEABBDEB642534682EBA9095AC2A3A33A7AA894DBD60BA26E2FA
3E872AAFDFDE1BAC57D2B4BA1FB2D80DDC952AB08805C0E13AC8485792E9C583
EDC3143CBF5ED97C95E8E88A557C0013EEC4701C94AC1B8CE0CF89251F14C55E
D95B76DF19378B8DBE9CCEF6F7AD6937083DDE324B566D7654A4E414B2AFB7C6
AB4D4D4B972E4E2D6AA9110D6145CB4CC2824391AD02BF26F0BFF5605A39272D
7E1E8B5785EFEE515D5D94F31BED18FC0B596EDAB0B7A5590CBDB70311A587FE
8910E03F0E8E2B564EF9B8AD8B2F8FAB6C8F92E295A5472470C5A47F96443F9E
ABBB4A6762CAA61D148FF08F6AC1E5EA1150C191C2902F080A174C8D2516EBDA
6E175A977E6F7DDFDD3C9DA7060290053C245E7F874C2BEF7B1EEEEF618EDDCA
08B2EF5AB312B3783BF329B57E1C863719C7AAF8FC3D7C92E7C5A6608FB97788
93F02D647AD4739BBDD4FC669347A33AD2F37D900DB8D52D1AAC70D7C897B9B9
8F45CBB754D87D9AA9AB27624F800DB570A039D925EE8744E38E4F65D639920B
4056690B86488ECFF907CDED484B5F3CF7D334771A7A6CC62F42CC3B219D9443
611B1042CA0245EFD6A3812EA5154C9CB7C516827980CE059B618F2560C99A14
59914384C56AF238666D4AA86D6FBE6A23CD899AEF0C40D6A0D70A0ABD46A728
02B0363FA2312DD179A04BB435318ED29855272830A950F4492A040EDFA2D489
126FF232EF6B73040AB048B20CB2DD355F333FA83614A6AA4C64F6497911C1AB
FE6FDCA925B1CA97D144DD482DC36B0E48E3B6AE6EEF3C2580EEF0D5BCB19F91
58870F5B7E7787290F53A233498C1FC9E4EFF668DA6A6FD9C9955D7C9D2149BB
CD6A1A1E5345751EFEC2FE832EF076684FA6F533905C4621498920E1BAD5E898
D754BF08CFDC9216BEA933A8035E3527AF33F2BF6153B9C14F9177996A9CC721
E82635A525957377482E5F25178D9166FC7E7F6EC4C42B5FBAEF82E2AA6C0736
2B2F9B4948CEA1110CE3600E00ADCE9FBD6E3A5AD6C039FA0143A76C450811C9
BE411B7C841D54649E232F0499F44785FD0915899362B508B2221859588FB4A9
02863767996F4D47B8B11932FC14E6B6127CD0135EDA781EB716FC185B755EDC
B48097A8D6E5E1F36190B2AFC076FD6C2631246E70216DC1D2B941B9271E705A
08677002401E3F6EE50E86DEFBA3903A950BE8B329BD6A9C14552B17F55781BC
826C7358A4ACFBE1B1CF2D43D24FF4EA2AF06EE15AC1EE6635E98EAB1C09D22F
BC1FA426816E26D933BA487C996735D69DA94865D22E3D8EC9FC1DB6B6C1F395
77CD2AB89F001F705AB6C66BC3B2CCEE4E60AE7C8FDC76A4E0736DFD81DCE9F4
D03E44CD994CEE08F6DCDFB658099ECF2304BA14F910CDDDDE12055B74761583
763BB969A21C78B1E88458AA80E278A88245A4824753301CD702AD4F50E96541
5F70F5D4D01903ACBDDB7D07A65C770B10B9C495C06B24B448CD0F6184FFCD00
CE6CB3B687E15D43C007488A1C48A1A9AA8909442F319890AB865F880701EF01
4D23E6F9BD26D2DE6EB370F3AD6715B674339903EF5510F43E0085A48824637A
1330EA397BFEB0D2F4B9EDF87B3B0E0CD0186DF4BD32E6E5B7B677F273838733
33961EA608212144909461E9BC00CD1FE3737B67DFA199BA2A6022899C18C02D
248D392B360983995B54053EA82A52DB919D0C76D10D5196DE5AEEF92C58A2C8
C456E2E8625B8A62AC1A5AA74CF212E15A2577A8A79E3C17978C7819FC62ADA7
7E09C3E615D309A430CB5D174724489BF81F469E59E592D89D07C74A6AA8B84C
230CF935C8ED8AED8E0FF24BBC5325564C164E5CE9A4A001B927D821807C5EC0
2876B16F50B1F088B6981B6F7676436C99E72D64BBD4BD5FB675CFBFA815AA7D
87AEED7F20D992E9AC8675E94958978D77CCED90B3A0783DE6D9AAC1129D6F57
F57ED0EF4AD48C676828C599DD1B5FFF4A8FD71F7F9782EB6ED549D5C3C0B70A
DEB6B4DFC540CDF1C2616446CA80482916172FDC19D0D30EC7FAC251CCB3761C
397F8EE620347434E37B8EC921222098BC740A430FB5CE2C63E63399601E145F
D68107C894CBF6CEB2447B90E48A5DFC080F667180B897916F78E160D1C9AE45
61428237D815B26DD721AC6817A969F95DA4A57DAF3236068E2C15B658C605AE
225BF8E3137523895A1426CFA5169FFDAC205184CFB757F5A474C9B7F2790328
B2EBFCDF27ACA39A930D0590E0BEB0342C54C5C14EF73444F19473CDD208A90B
5AC21E3215A258E2E488793306619B1E6E9557E8838307D958D5675E3F164B55
4B3FD4D2943824729A7AD51038E731840BEEAFF54F81A6BD6C26B978E0C5D21C
65468718432FC0023EF2E973185471DD46A9324654C3EDF79FFF63E7BD683432
5E9B94AFC474663E860764B4339D53D0750BE1A1DA816EF815A449D6CB818550
A755ECB068E64DE3011FA2552B98AFA02FC36F4A24A4F6EDB0FD1C56D2615345
2388C1EC9B94334A648603B4592912E538B7BD5627A396D73FD537EDA36EA397
7BA9DD28B620640C9A0A9062FA40900A1BF5D0DF217CE4F76D89C906233D37BF
80D6DDCAEBF030BCAAAB681DC2A81417D6460416353A895C3829B841CF69EE57
D0CD667D3C66755DD49CEA4BA772FB7B57933E2FDAED0C804802F25A437043BC
97DB2DE21CD318AA019649BFCA5A26ADFADA637A3D5A25961B42148AA1BD61D5
78DB7A6AFF65EF698AF67C23274C45789F64E0212F6D542809BCDB1E2A9DDEBE
1227A573789225F9F0E38DF95110E3C894E749ED7FB92AE48F87D90496477550
936AA1A087BCA2E32BD23E409EA4C90F476DBCB75076720284F8A7055CB37559
1EC4D30F0E18A9B08C80BDFC3FCAE535885E778203E1FDDF74164C093768B74D
F5C4631E2789095E00028315D61857519977DD5B174DA59B3BC791366B872751
AC5ABFAFFE965853FDE2727A910BE66E22C1B65C2769FB1D201417DD0F6A00DD
D5DE759711EA706917052C6C9BCD5C5BEF46FCA493114D07AEAA9628CA25AB36
5C1831C906BA90927D376816EF57F1141E254DAD8BBA685BC683A25A9DD8B399
45B16B42D485241F702485BA74719A308C36E952C125E0F7B9F5144E1CA41E9F
45D7B0D53355A8C0D7C2830AC799B7C256789B4FD3F70376AE9E3BF1BE44DB5D
05805820871F9A4CD634DD57AE52E6B75932AD959DE290569E0143B6ACC87466
2DB61E9E70B480209CA539B523F0B77C47E941C66245A283D36B201257470321
1A73F2AC3AFE24FC87E9FCFAA66C934D2BCE8C325C1E156FC7B07A5ACBA16345
BE7BB3750F83BF18F7886EECEF76497F7F2ED8EE0D2A10DFC9C49A3DE133D52F
2F060C81CDF89E76C28014E51F979BDB9D80FE48DC39DBCB1AE7485E1E8287C0
182A74CFD81DC7396D44F202EAEE3CDA08F32BF735941073F13ED4A4FAFEB0BD
75B0FF349EEB279583FCFBEBC586BCB872E6C0D3949D154A8FA565380E20540A
0F1031FDF582B03C90F0DDC6C9DEC792010AA741A549803768FD647DE02F9797
95F1CE30E45B07BDF9312C4D1D161F71CE2E98B46F5F6BE508DBB151F008DC3A
372DC4F78AF41CDCE767D9B481EC425E4660B60E984F62E78BD7208D3EDA2590
61423C3F372669CC58A0CFA0AF6A947C1BC736A68C659CAE99B14A26E9613635
E4155ADB23AB55BEA6094FE13D81F848E07E5154A1DB849F05789AB22F27D507
87B5D8DF235D9667BBF8E58460BD23D185FA64CE6F33D0522AFF6E1BFCDA84CD
7C838A2C4054C92C17EF6739072189E942EB8A498D64CCEB2B20C9309F57DAED
1BCE1901B2349A28B87858D128F7AD1EEBEEF2AD00FED70A2C9EA903A4273EBA
BB682FE69863D2347189731ACCFF0F746E054238C5B1A88A44F20E60DF01FE08
C78A3FDCE11C2FC4B82E29143C0E98AB3679C685CB3A6CF51D12AAD42577C418
534290EA83008A606C6CBE8A2FEC7626264EDB0C37B640BD14881C7761C9C0C8
02E5B0571C2A495BEE832E24C70B4CC77411D47B6DB5ECA4215BE167083176AA
1A10C852AD6E8CF7A35DB812C84C0A18946F10FF8A59834BF002F1A090A56F95
BCA6B75D7DE79D6857F985D3B8B7832AB00F0D2E46BC9EB3CB836E524DDABC3C
1E88F3531FB2B94D41E93CFB7B552409842E951C36932696502134609288A977
E2EB624FBA2F3A1ED1EA357A649E45D7EC2687593CEC1BC17783148038FC79C9
AB0726679B6DA0948AC3741FE0933B202E088658CA65447B4D18FB27B4EE3CE9
4BD9ABEFCF7B6B5CCD4A00A486C11A38949CD293A9140A30A23BFEF21035DB50
CDDDC9AD89F2F87F0BB55314E7DBB7A7041473F94EC9F259514EA437FDD57655
530DF9287C070EB1913D9DEDA28C06DF6C9D9515D11F9096C98A9F5B5AA9F997
54E45D4F8D2F10C443E47F88EB3472E80E8C8BA538D098D239D04E59EA8FBE3A
CFDD81CAB3BDB7D4E21998F05B70EDC587DC20D39F6300269333212245E1EBFC
6269720DA62675D5D7DAE89E9D87454031E72187E747DDE34D99E79F15077D4F
45CB807A03C39F33CC272BC543446FAE78EB9738914AB6BB16C8F00077DA7F61
4C0989D9FBD0A28ED30CC6D566D38A3E8295E2F9197DE7CD34ED99AD0FA6E825
8C932245511FA1023C4B88777F963E28AD8ED8263D88835D430DD1A6460DF032
7B1376C611CE4C9BAA7F75FCD498F96B81886CD9440306378C4414338983C995
3139D343DF45976D0DDBCFFE281B7000EFFF984030D0D6385127DEF96DCCD049
AD7A57239C5A280986D7D5AC7D77B2E85F4EF2263330587F49478790B71C5B94
D1E80B7FEF380D5699D1FA06CDF71A30EA2820AE9B246ED63E6FB71ECE56A5D2
6AD5B4C20B11F88C63BE1717E3660B3B40E49121356366C53FB51FE8F1969B9B
0D035B827A3BCDDE060F01B138D0F4B1613EFBC47406C1C7EFDEC723B54AB8AE
D947CD5F7DD882C394600DC256E654BB67793D52633067E427BE701C560CAF29
CE79E03F87A52E8464CFC625B1537010ED3F353B0831BD0A3AFDD3E58C2B1CB5
633E89CF56DB22E6E021538245F758BC450F4B2762D26E04A0818EBB4F3EC45C
6D0D89326231E9136F6196232FFBA038C268E472E191221D35ABA0C936607631
F3C23EBD98EA654271B8D0F97A6B9ECF1BAF05387AAA552870E2E1B842EFF84F
6D5C430E7679F6FBD2292BEDDFE139DEB907FBADECF8CACFDFE1A870CD024EE0
EC8CA1B66704A8790F61BC3758721356A875E4254FD2F7ED497B20FA7279B8A3
EC2FE3CEE7F6AC49FE1C7E01D0CF6B4382BF78FFE0914CF8139E0AFF5C138E3E
052FD596DC86955582EED5C3358879FE1E13354B35204632B9385096FEFF931F
A1598D6B45F7A4C09A516024497F93EBF485A762C56810856541BE885919C474
18108B01301A8E7F9D3BCA107FC93E84731A3195B4905A2BB72AD7A3620C12CE
0DF537B96A53ED41AE816CE368132E37DF42F60251DD2F47ABC68788CEBBBA77
A40F4E11AD8B79770FF3E309530AFCD5CD083F19B6487FCBB0495AC8ACE26584
1167F694366CEB89F0A496084D8642411A58A2372161197842387FD3547C62D1
45DDE4C6F78645F7170F11AE40DDC77CFBB3B196DC54189F22B53AE2BD6A7C5F
12C07A9CE8E9B4790F165CB93993472093C6F9B713C70F6128F1FA7DD74DCFE3
6C50D47CEF64F7D2A843CF183545F3BA19CE4060CE43191575C307DD60D8F58B
270C47377272279E53E33F5C473C4082A27C6F10FFE7944D171940D6A12AAEEF
0C64FEFAD3CE4212BBAE914AED759ED920289521B051B80A0CED7C44FF9E081E
AF491C3E0073AB891C6DCBD88AFE8A5306D6304ADC43DF545B8F4C597C3AE8E4
03F8ED287C0B0B92A65BBFD61E1B90FD8ED31B30BBF5F5C5ACC3AE0E71A683C7
F564246FF074D0D0ECCF6DF203077E7C03FB8EB2BA6AD065DB05B17872561F63
DAD8C8EC3EC2E0DBA6D3ADF6A3C2A27236625071439A1C20635FC044BD471D6A
C485541A2BB8E677D9CA0D8044A905CD0505073CA564BEF9A1B16F8790A89BE5
1C6ADAFB64D519A275E356E4C207E79A7EC498DBBAA4A6DCAC0B5765067E8135
88A3DBF3BD87823BA08D72AD7AE24CA4B7F9F28861E48F6B3AA971462D8E0376
4C3E09B7D83204FEDEDA696CF89B17DE841375CE3EC4F610FA3FCC1F5D8DEC05
DAAD572BB12F53DDA6CDEE59B158942A58BD2C61D916C6175D5C1E09E4B3C34D
5B444F7BA425553324ED77010102CAE35F40BD1663DE489CCE9F3DFC99CBE22B
194F58AD8C9C6363323F53BDBB123F10D73D20F020A062FC1DBD8F5C210718D3
868F0777DA4EA583BE30428AEA049D36382A042B45A08F38944E04C87E046D42
5D2CCB4829C0B0F73D84374BAFE5A9FD7ABD79DF58F9D35D6BB8DDE2F6BD9263
92600EFB365BECDA88EC9CF66E04E725EA520B154A495DA36F8371FC70ADBB2B
ABA83326033CB53445785769133D2F32146301ECA5EAF90DC3A47874ABD401E5
EEFCEC270633C39ED709DB42FFAFC8250A38F31706F78DE0C9D9E4249E07AF77
5E4D26BE10DA6E9142885C506285685B596F9290A6C1450AB3D10AB310038DAF
B1890419286FFED6755838191F70AD6932C42DF42AC755D06430ACDCD52FA926
C251A41D2DA3E2CE2F0C8BA2FCCA12510CAC5BBB27A9ACBF9851B0080498E14F
764CC5CFD6AC5382EF2B6DC412D5F45F19390114F681ACBEF5CCD83E9103CF90
52B098D1AA1FB9D449E438490BA874B5D1803A83A0504420254E8C8F9DACB795
E4EE1CA9D9F5DAF95D8D1CF4000E0C60FCE7C8AB706AF2DC3F366804C9D88F0E
EB0C3F41D7B72F8062DE47CF86C2DD4CC5A199DD869E826BF0DF85E7043DA210
FFC566BBF5417F98B240CBEB3AA74DD4A9714223E5A446FDBF03A48A4D3DDFBC
CB298BC451737BA54F1FAAF92C8A3D660E13C565EB351E401F54F44ABF738CEA
268A1837D0D2EC412343A14DCE4C40C00C2ADB15F3776454CD0BF8D9B918D58D
6B525B808D62D0682744B804E77735BA6F88FC8836364EB2368DB2782C05E322
4FA448FB02F0C26333951290573014592A5F5531DFB4BEBCF5DCED52FCF1AA34
93FE8056FACC4E254A0549102B61E4055B37041D216BEE7FDECA95073D9FC2A4
C9C902A71758F6B479D61EE82F6D6E1C74A41F24AA4E465023D46FB8B5772BD9
3CDE7AE54F4CD5ECB9C024BA513092E9E0C31065A06E88CD0C3C9CE869F52E51
B026BAC5EB95BEF0B9B7C9B8F218392D806C84C4F5637F2424CC938C7791FE64
9B8D5853276C456877A679BDB33BA087D1D3DEBAA88EB3FCB8AB89B720E0DB79
546EAC6D2994CECC1A3A81A39238A239B22EE94F4D93C8CC6C43396413939E6B
DDFD6452251A1E2B148A6EA8D2AD1322EBC9AD655DE67D464448BDF9E8712100
54ACC121D0D222673C0586A5B2F6FAD9771B3B1BD0BEF3463416D9FE6D05A38D
FFD747BEC5C0D4CE6D170D5A279557B2A130546D6FB920358722B738F4D3A5CB
CE3C2E069594AE6F7DAF0138E00543650CB5707871B08755B4B6C677F6D1A48B
44ECD7ACAD2D66304D0BB54753B076358780D154E73243368B76971498E29606
C7F95B77747A51252CD19FAF715089C1D7C508265033706D6347F3EDD6F229ED
E0918BC822BCEB504C584D42419A419284AFAE24345B5DE1BFC70006D8E4CC05
060CA9493482DB6C10FF2632C2AD8F80A2998BC9F4E95A64E1AF8D8825DA4427
5B64833F55D9B2D324BC1889E4BEA0690C2C3E6AD9EC6F0BECD31D97F507C1AC
62EF3D533EAE9B86995F4967947BF89964F99B1081B6AB1CEB711079EA0B56EE
A43022370E5980AE96C5CBD5052569203D58C7B67EDD27D82E53CFEA62C52115
8569F13BCFEFBCE5C89718CE9F47D5592165964507847AE220A5C7F080838A50
67C7E29FD442C8A21BEF4CA93E6F5E030FCFD2114EEC356FAC7B4016E2F0A310
8CE421A2A06A582D6C4E173CEF94BD2707A9A2C3D85F6423C9B21E8CD4A7A447
572B318F700DB5E6C2A0D7079E1855DD21A9BC8953A6952ABCC7A327078FE1AA
93EBE71A4BADE91F15863C641C578A43893A9FE59E074F1074CEBCE1F2BA9CDA
2C0014140A36F29DF8F651638450AD13B3B1542350AF30F3E549C66693C08BE2
3E0F32386309458F451CA0619960C0A619B8A69C51761681F9D5F1AE292D8B05
03D524DB97235D77A2473E8EECAA04E086DC458566B88E740CCC732BB3276459
257C287A35852CF2EFF4C58EB5D87B594B630FC916F2B1223A49AA45F74219B6
F29AA1091FD8656C98F60C1B8B9411A4D5B5D139CC5556B796FA99C10D17EEA1
30AAF8190510BB8F7CD86C701453B2C0AEA42596DAE7E4BF85233277AD68DDA5
D70730977F2C5573D11B4F8AD30C9B8660D179CC07CFB968C28A0E3B2E6A51E1
CF788079F8BCAFF2371B5680938C8ECD3D2E3B5E9574F1D280624DA1377D2E87
B9F2A10567DDEF3C795F74925C47B590FADACC9686B383AF1881FC5406677E68
8A403EAC9B89794F954B2AE0180CE636EE56B113E26F046015F5C78AFB74A7E3
BB68A7CAE91C8174493EA7E3A811757241D203384D6132556E40EA48FE95E1EA
1AEC746CA26796EAFC47F3E41EBFD95027F98487EACC0E5EBADFEC0F97A2501A
403D6E2AEDD93047149A35EDE47CB257FE36CB3ACC8719DA5B8CA9A90DABAA75
BF42CE5D77815A9A43553F892F1A2FF339ABADCBAE5F1114CAD2911836EF9188
9E5342CFFE6B959EA8BA0E6F886DCAC884A667BF9C79C9D157034BFBB62E3975
F69F86705636C8877FE9FE9EA9E21CEB7DAF693664C5F5F9D1907F13A5469F97
EBA3764A7B2690A76CD9B91BD76B19195DF14FD5E8E957A56CE0ED317F469C89
D5026E7B6E3F852129E633EA870BE218F4977E01358E0A4AF8794F1FE118B0BE
7F0CF96915C5B3BF4537C01CF0E7EBA9C3D9593426772E5905E4620615A18147
EADE23A3470B4BA5AC6BFD60AC77295D558CE4B6BAA84CF18D916DB067F19536
712E232FA9E6DC721B9F726799379438D4BC1330527BF78064A3C9F0CB4E02ED
776B9BA2F1AD17788E27CE0341AEFA0DAB0C452EB77B9EB60B5DCD35E0C668C8
F7F0CA65889A93DABA5A3C7A3844C412E50B0FEE91B2C2308EEFBEF21C15DA4A
DAB889DE4E744D9B36267340148606FCDC8B9B06D889B4E92958EC4796A99D57
755B6D771EC588B41116DBE5DE673781CD13D63132CF14E0D167AC2CFAAB4321
B7628882827AF06B6254D47974F2796ED512BD39C825E2FA751432F8849E6E57
66CB66185B9FA41801488D366406EACC55A3EA690D11FD82AA02AB3360AF7348
78092068C8C243D2C07CB39BE5FDEB57D4AC3BAF16C685A9F5C88D2659EC0539
95D254638299E96CBAA7C5B99A93BEF888279426C98C6314F4976C3CC9596D05
B30ACA5C0BBC0F9E152C30053C6986A7CC35B176413259B69F255C5D092C1C67
AED321E8641C049C4BA78D6A63D5DA2D61BA2FD6EB0AFDD140D7D63A2FE18363
B5561E07B0348E055027BFC4D3DF7C35EC383C81A64D2E6273AD440EC9594C3F
03062E7C587DF9B04380F1A8546E563F5E712188E6B61B3B781CA1F45B06D9C9
527642E382990DA237630B05ED55717CA21E9FD10C274F4BCEA97FE2D286FEE0
682545A7077B3C34087FE7179E902006F3AECFC7121924CDA59FE5CE7FAAF545
B98B29CE34DAA9A2B50963626CF4927AE818C96E81905DFA69A01082DF3A84E6
33D01F0DAA95FA7EB6569C5E300D0C9DC9F0258A3AFBB1A637D2C367104A54CB
98FCBCCBE453D2BD5C4CCA744DC1F4A7CBC0A460E6BA9F7B3A218B4B12BB15BA
08F95C0DC4C2F8D354581CCFC16A029560C484314AFB1FE077A5876DC3CBA69D
1F3821BB9F13D9DB28734A3B983247F1207E6B7B046DE81303B421DA6F1CC917
A63256E2CFCF1F9C6C0629FBE11F9FC7B77F3F172338C238A15E949B30D7476A
818870D840165E629F02E7250E4E93E3A4B9D7F49E9D5376B2B4BFFB251E5BF8
A7792947FA372D18EDEE679ABA38
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.0: CMTI10 003.002
%%Title: CMTI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI10 known{/CMTI10 findfont dup/UniqueID known{dup
/UniqueID get 5000828 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI10 def
/FontBBox {-35 -250 1124 750 }readonly def
/UniqueID 5000828 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI10.) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
dup 124 /emdash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5FD29DA32D34C95E
2AB2ADB3F60EEB0600C8ADE15A2380DE10AC5AAD585FBD13097B1A7E8E210D4A
EE96785449E07F0C8EBC2EC5EFBFD0897DFDC15E5BFAC9584D8DE95C5AB288CD
8AD8B9BEF0B8E5F887B3B0B331542FC8184DCCB753DB6ACEEF98B85756B988DF
CAF1AE0DBE7D37D5F44A2E760AAE3A5197C27B15E32275A64946C3E4D0476FD2
7FDE148C788DD2106F7C825E270588AC05B57E625AB17BDD02306F9E5FC851DC
32A5A6EDC43C770A71419B2C0C8074EF3F222C8A2097CD81A91F333A521B3A09
482A4FE1CB231CE344AD126AA284C3280AAC3AD162CF0EE241BFB4C8F20502FF
118507F5D1B5FD898571015E73E5CF2281085072E00D401F6F59761EEC3E8381
1F26F75DB66C504AB6BABA87D121B1E7040A07AA2FE01F80DBC246CC03C4B2DC
C2A715980C52B7F96BC1A78FCC7F4F52EEED5F705E08FC1E5BBFCAD121FA88AA
8EBE58172C162AF409DBB0728F14923ED02A65EA24E5D52B6AD07777455A70A4
61833D3789C719BA92E901232599767E423D5AD9C807670BE0E7B5CFF8256A20
C7BF7214FFE0342809570F5966A2C43E784F35015D9040BA34FEAB6A6F089504
3A40A9E9D711A2721D3F4998371430FB3C94BFC619559B97D49627BB630F4B70
9D0A8FE4E916235335C3962F3CFDB04C4A3CF714DB5E260F4E66FFF2F27CEF2A
D4AA26BBCAED23B8BDC98F8F453BA27AD7758537561E766B82DC3032E92A9EB0
125D98A22C5466AF069BF72A9BFA052A8628FEC6A6AD0B711DFFEDE3AA2D7CE8
34EA487038EF50F953B8B4471CBA6FC3C53877EC1BC94582B1123EDF44B4056A
30F49394BDE22CDAD7F01951C7013D26979277D18EFA594E8F4F2B5E615187D9
39E842EC28461B9ABA52020A127D2CB9002A673A435B13C10602EEFDBBA6BD49
9DDEAB9E68D655443A5C2492BA061C1391A51592BA8C353A6F6A0708E8860184
2B5D031D2CAB87D618E9F6F7A0BF3F66B3FD5A25BB91F7F1F5F99CFF56EFF4FF
0A35C55658001ED2E97B26C869292F6274D433A5443179DBB8EE987196306348
3F9E87C6422AFFDD30080C9AC4EE7FE5E2DCBFEE4974331F4AAE479FD8806D4D
9C2B85FC69EB0453AD827A1E767E5C484BDFBF5C8D6E2B3C96298B390F22D757
802643A79D5E29CF3AEDF0E12CFBECA4663444FC87F2027571DBA9ECF688BF28
FF0DDB3AEDBA0FB28447CB4B5D5205F40C1E7A525FD7373392EEFFD910AC82D0
98E71660A1B3227C4A2592F3E853CA4CDF64DF19A52582E167234F4036FAAAB9
5446BE102DE2BF43E82F0112C2A20F15A3F92C6571AC761665A905362C4F8BDF
AC8705519C99862CD9C0D75113C4AB5FBB83C880E46B82715B5628890D9103AD
A2329638B95D93C4DECDC5E6C588C9D5183EE6FC28FAF9825F02DCA567306D93
5440987A81B51EE7291107A08F201C609FEF91A8F0587E8B13D4BAF74A5A6815
DE9E4441F46AF8E1DDDFA2D611C889614040B144A5EC064DEE4638C04EAB2E37
4CA8F50FB8C4D65BB296DCCCD39F1F554CFBED96670A91F515CA10EF896874BC
8EF48C6447752C70FF5A06F928DB55586354076773BFF7E94C4C3A7A1C1F421B
A9B4E3936EC26E0C19BBBFC90F021E877F54B62108F6DD1C7F6D5B8E64FC9362
E173F01BF2904B7E5A08B3543611562C2714099DE7D4FA330DB148B560A9601F
42A84452811CE213DCE782A0D7809CFD954D6BC1EBF2BA4D1B18F50FA8174C96
3E0120E266AD5DDB40B3F6798AC28CDC5C3C4BC34583528F5B5DC8A222B80B59
A3A93DC715D061EC6915E6E6E21A25425C25E8747C60F170D61047108826F96F
7830E220C108B441B6EA3198E33C49BAD8D43086E49F5A2BC7958A1A8CD011C4
49045193394696EC3DDD0BE084E8F2E9F0B9496F035C0DEC1CE11409DF566428
D50043CFF5CDD1092F6E0807E660B68163BCA738E8D98FC6EE3F713164CD204C
0BA84FFF4F33F47BC31750B448603D7ADB9AE92FA91AEBBBEC0DCD66980E6955
CEB425ED07115B24E40F53B29B9D840842EAC691B4F591F866DF27556474B485
1C6F53DD72499847109B16C7093984A6B8487D4F3870DD517945CD90E648C1BB
8A6861E540FCF9D75B984B5009B5CC760CBE297042C240DD624111670B703388
6FE6FC0E89C6B4C88F51DFF3913D0CC1FB4770C8CBEADD4B86393605C0B6C468
83CA5594754411B6FC331EF56D7CD6D247FAE42E966583C29239A8F862348D29
60B177984B6B957E733DB4D275015691D91443BBB13C2DA96097A29733CDB284
42F89C85A7A743338C9DD3BBC4EE53F695E5163E6E1ABE5791ABF100B198B9B2
1C21E2FA2FB4AFE7F9BB2D381260CDD3A2CC05BF513AA1E80ED69FA27BC5ED5A
21445BF00BC2F997B356D94AF13736C6D3B0613EB6F4CD96A685FEB672661DCA
206105EDC3CA07900676EB2FAB37F48D2E8207BDE1463894DA3C5B1488AC1EE9
D39DAF691648048F5D7A384B8927F8DA2BE3602669F71D80686E427F395134E7
7ADCC611BA91AD4B7A0237213C60CF2C905359C90795230344FC3C50A22BD44B
55B2044792509F50F5C21F53D9F9E9F063ADBED3AB99E2613B23334FE8DF70B4
6120F2EDF69F50BE793EE145B9FF9C73179DE640FC2ACEB5C6617F918CEEB762
4CD81E665B2E544864D13230B058717B207D3CC5D6647D5343DB4D0356082392
871EFFA896631A7E0D6477942B632074A9A4EF7B09D4701B1639BAAB4E03A40E
9B54A7A4F845CD63F88831EBFA4FB847847CB98F3455CB5957F2E0A0F5623645
DBB5C5564C7F8B117D6E27E65C0F3EA81AE67B4AE4B201E7C4FB0A8364FE53F5
41A7CE8F834C2C4B322809B353A5E63BBA7BF3B7DC1A85EA700BD287C2BD3FC8
2832B0BB4695FC937FF5EF06FCD87DCE6DE793C2B1EE10E6450352C17726155F
220D550B1759E15AB2C1D5968E52C8080CD280E99D3CCC0E80C2EF8BBFD96001
A226FEED7311EFB4B67F424B557A877379A15BCA54780F0CD2CCA00400B9B39D
981C6B552AFD2506D1B23618FA9AE6D8143CD7198A8482CB416CCE62B992347F
337D505A4078713BBD91E5535BD58EF0351EBDCD749CC24D4AD39F8CECD7D6C8
139756680A4C03A58B3374CEC658D30160AE4863A3938A891BB59CBE02BB451B
1BA4B2B6E68AB61DEB85F95E3C909B8B66E220B9F18280161C279F10F7093CDC
100A53D542F071CC0A5AF834DC1D18738F5DD62A5573E884E1FFD22BD810828A
1EA47F8218C15A2E97CBC609927DA3CC2B802EA4A0D7EB57627C135E3B065905
F97597D818A2C5CC6F328AD25AD11FA50F1E4FE637980B7474D6F85A521892FB
72989AABEBE02A2D0EFE88A6F67AC29F5D8DDFEDAAF465C439983C6B84389FF7
A6434462BEB7B07DBE4BBA61ACD4A60C55B5C0AAE527DE381DFECA2E6BAFDC8D
310364ECB42CAFF72BA93C067B2F02D1CA7C34AE7CDC46787A0E234C8BE8A928
7A6F3DDE0338FAD532A9886E8E3525B85DD39364AB03EC4C0DD25DC179CC1989
1BE232E387E857C78332D834679195E10F1E7B87B7966DA3B2238F53D1E13FE2
8F55ED6A92A750C7250C9B91E29796621E7E9520373214D7DA81B2875A986D33
80382AFF6DE1F829F048E57664D9C4ACE91E4684A51023943A4964AB5657D610
3A5405EFD4CFD1EBA684243E15093C9667797BB47617B66054EE02C41FFEC45C
C1BAE8AD56B00D323FCB1D2744F061FA16E161988741A319B1564E04BA210996
4F9F02A3268CABE450D166A763F5284954564A1C86B76544C5F5ACDFE0D758DB
865A1CFCF9FE8CD5F9C3B2998C56468FD52DF8EE60C6935A3D221EAEC7714E3B
301371C7DDA0B03A2416238F2B47BAD3A2C5021C886DF51C695AF9C87A864B48
3BB3FE0B355EED5454B59B25A0D8A1B8CBD356C24F64D9B55E16C30C011365C9
1E0380753BA3EDC0868788D5F50B9353D0227BCEE1BE36998B2622C0759BD66B
E4444250589F9CEDE766D8B940770CB6B89503E925B35C00CBEC2873D2DC4A29
0823FB7A3717B69A7DEDBAAECC067949932728E89BEECAA91DE3AF9BF070B9C0
30EEFA8C0A55C8388CAA2F0515915C98E67FA095BB98967D14B0DCAFA9622E4E
2E0EBFC768D80585ACDF28D8A5C2B6EE2FE7AAF62FFB90F569F84A0903996DF0
C1D5723366C436E4088F3E2BB9B47F9789052A71CF5C49908CDC1DDA194BFB89
14D7E3D7D4D72A150FD6FFD8303E9DE5A97A71B808B8BDF2AE466F31BF5D7A4A
44F81230BBE2B456A221E2F72A8B59F8FEA8D31F8A005A5BD93B9F49CFDC3DCC
CE2B67090460F632271C7157BDC2F05BC2749FD562FC28682A616A52D1B67654
DF78B7843A9EC26A7DE2EB168F874904C2915B97534B2D4D9F74A9573A771D34
9F7BC855E8F794621BF6AD471BCC347E2DF5F620F5C209E33A4CBF1EA85AEA87
4492A77342DD33EF615FF34037D660B713C908786D9022051B825226545827A3
2AD1B05D654DB6E6D261B4E8AF0933AD1F0FCFC7201E1A7C1B4199F160C38676
21ABA2DDF1CEB655B3EC3226E0B122976EEA998F7A5241F062E54AD1DFD6ED26
47C99A439E0AE95415059179867CDD3F0FF751F3141309F40E00A6C7C28433E4
F649BCD5DAA64177580E05C495EE7BCBCC5FBF104DAF360CC2711386655B26F9
D349D887EEB32ADE595241560FD5924A1745A22E6A01DB9C285EF14596EBFF0F
03F36EB2E0A7C3864F819EF7B0855121292D49482F046A55CD7271FE03F02EA5
886864D9D8EC22A68C23089EAEFFF03DED6484D8C341861EF8B6FD3C5BDF5AC8
352DA4E13A1E30D0CB71E090E9CFB9AB2CAFD0CA7C34AE7D8E3B2EB4666834BD
9CCD1AC2108348AFEF6071796F4BB2FFA4A67ED917E76A109FA2DC2A30D744A0
9AE653A748C1D18FB52595D84E87F1C1FB6B2F32667FE203262C66627AEFFED3
92B23861E5EB238BB4EDCE09DAE1C65BAFC198CDD1B45D42CDF93E16BB82D35F
821E9E49067E966AFAB2AB52928F8DD6359984071FC37AA652FB834A09E5BD93
3AFAE161140E74C6531E413E8FBBFC42BFE8A464B71EB1D8CAA93B33D7BCC3B0
47C7EEFCD3E9FCF26FF9441DD9BDE68D77AD7251C06BBB9A2103049E8827CAF0
F26BEF33F656A690235DEEC623CC519AFA82DE2AE16FB99F780FD7D8290DA40B
9B604AEF36B529FD184239E7D50561A07428D28E51B55546590A1AEAD4B7F2B1
AB8C5B9022C1FA03E33F8F409B24911AB8BFCF6EF4A8E415263C789F89063E71
C0910DC20347469380B7FC1EEB87D4CED7F4A361E58B61C91AFCABA35C03F978
B9FB5257C31657EE48504C355CE893FE3C553274C641DBC4004F5D5B879CC5ED
D3F21F867F6DF054127067DE86189F0B59A1B90FDABCDFEE61423609D888EEFD
F4A1367129962110C651D9481CEDDB8C5C2576A59AED64E95F7ED042AEAE2F7E
81AC0C408E593DC30DCAC334EDE9EE27D932B98F040DDCD195D6155607DD2038
970EB78221A94C52BD4F0EAC65F1FC10E5DAA93C17266F351669CAE56F42B68C
6D01E1EA03AE554D63CE76D800FDD9CFD89F80A241EAEFF7EDFA41794EA25CE7
97BD5028464D2CD45B53834B4AEF8BF0B9E7C6ECDEACEC887E8790A47A93F668
A9095E5FA1116A122C0E5B74E2226C654D3187C6CFD8807917820423DA3EC1DE
AA020EEEF2280C44A15209EE2F3FC1776875308CEAD38571E7BF889F287E4594
971A83605E0B4169D4A23EE790515223DF8724054EDAD905F57918FC0BC64F96
514B4BF7DC9BA79E763C22C977FB6146B10D26FEA1BAA7BAF21312F78D1625A7
8E242D743471DB5821408AB786E4A7EA9D35E30E85533C617689F95758FB2C7C
392E759C299DCCE36689686DE0C4DCE32649493650BA194A6208C5EAB670B170
3F2C70BF0EF0E3BE2FB0A79224FF4ECECD6BB3388C6D06867A0E5E3DB93C1B2F
464C23E44D3132E7D4086E3B59B1D13F49EB4772DEDF8EDC4F603217233FB7BE
C13C28648E9AA51D53F11FB896839F97AEDD8834BCA53CB0021AE91FD8E95E2E
F8A094093AF556B9639F508A401542B06821FF9DE1A745FE9AC5CACD5E8E1053
911442FC15CA5333751ABFE2C617D38FA1DC332BFEF44AE569DC631C93EC54D6
261583A695F5A392867A57F59B741EFCD2DCFECBC55D1EA5F2317601C9DFE9ED
D1EA466210FFA905A8F85BD58B98991BEA58DFD1CDED5C9B086D42CCE632DADA
147941917B879139E016B0DDEB8446BA017FC8EE5A354533D667B0835F5D027D
C2D580C16B80B3D05CC92C0465CAE077729F0A15B2DAFC89DCD349B3F81D0516
C65526EB5C10E45A8A85D716EE35FB9AB201FD7C89ADE5AD925A174169DA20FB
61E96C73A143DF964C20589EF24A0FCFE6195317F2FA0D2249C0D8E649C3D9AD
FF13332EA2E4C9CD36D8443EC8F027B61CEF92C6A6B72DD4ACBACC16E429A9A3
F5F29C1631360E32F8C1C93ACB22F810B86D2969A7480F486F62F8488BEEC74C
2C1AF13BB92BC578E8CD30BEA6BC8CB68ED730F54CED0167605FA76AD7B7E88C
7AE7688E598F91C471BD65A542E96D64B1EAF19FB4F1234308C48C2DC86E2193
11ABDB4C6189C6F201627C693691A86DD07FF55C30FDB3F72381E09C6080FD7C
9182762E5001E30F52A216E0B71E4D2D4E2F3B20F95DF3A11FDB2D2B5B5FAA66
C46226D5E0C77066349770514E5675550FAC9394FB27CD2C2F974F1FD58C04A3
1EF53A8AB3B2202CCA1CEFA66228E1480A0709436C44BD3319C40CF888AE4692
5DBBB52B15CF3A518F627F672135A24D5DB9B2EBEF04C860AECF231EBB5A3BF5
6DCCD5E72FE4B6DD29E896691868A7DE4120AD06AC573F5608B8449B38E71CA0
EB5CDA3F942482EA7973661170F81DC88D54DD5B92323F46F833DFA757107E9E
F62A47CC50FAA1B68ED535C3E0E1073532A05ED339C8D70B3B9864808ABACD23
AA95E9FDA43D54C66A675FA074E0A5B8777D3C07850A09087F36852B5351F35D
8BC4DDFCA35CF29CD5E3DE118A741FAC4DED36847F2E2C6CFE08669301722D94
376F540982958074E7F1383C409652F6C99DA39FE90B38221E75BC1ECB93ABF6
B00F410A0C5651DB418566AB350FDA1789AFD88286AF3BCB42B98386F7BC144B
02DEB8940D20A6B3062F0C4244EABC50923390064F1D027A8BACC3DE45156E56
4A942D1B87F1C4A76B0D4D6801AE792CCAE3009BF25368B31B6AD5476FBD3BFF
9759EF463EF5E78E10B7BF64005B2ABE0E8813950A08A1808587A98E0021D0DD
751AD515E8278F1A0759E85D8A084490BBB0F8206484AA36388B1013643D3198
3509078847BDAE08E76FA5BF3E3A73C323CE093DCC148E3C02C2DE1E26C94D5A
40EC8308ECB02FF7DD04EC1005A2A0DC74D4E587F10A3EF349E828F69FD38962
2F0C74D5DAB3ED6CC9F97008ACCE74C086A503948DEF1AAF58FC8BEC703CD360
D32098A56AC776B1BD08442052A2A4EF6C8798F7CDC102AF1A2009657254762A
0793F79A39DCD6ADBAA5EC84A7ED6018BBE727E5D477893D84F157074B24C13E
8D4881C7DF8ADC13EBA0D89745EF93B7616EC5355600BB0D2B630AABA3CF2946
AFFD0B2B724EF0F28393F2034B2E69DA5061426805353EB4D80E20739BC4C510
6C45275B8261DCBA10DE1D104B12F46ACD230977EE7D7D1D35D2814139E38C4B
CA6937CCFA653349B1EF64A98457F7B4B5D8F2978F16ECCEF7054905863AA46E
DD524CB33459220C71E9EFA7845A3A760A507B3D3ABC525B35930B613710A13D
098832C58EBBC8B0CA6AD516E6385792C59220331D0922A1F6F838A8DE13C337
900462F952EABBDC2EB1FBF94A66186C177501453CD3FE3582073DD86F04406B
41B6AEB440DA475E13240445D46726A6D45185D56BAB8807CEC8A8F7CE1AD149
7CE2E1BB5DE4E5B9592241DD136479A65905FD0062C91DFF7349874BFEA5D9EA
2F610ADB9AE7757B2307A1BB9D6797D9F9C4844A59841C7C7682105E23A374BC
A91885E7410F56F60C29AB8B417E2D6092F8BB70A2DD5DEDD4BA1077D7CC62FD
EA43428C6F79C332342E15F75B08A1ED360CD1885730E570A3252A5ECC419A7F
D124C3FB3A7D58C0EF6AC117F50D7D4B6CD852200A1F3193BE101CB99C685815
93A6CEBAFE9A9136C3AAE071B00E732B7721C7A3A8D01276AE06E8767ACBAA92
E17518435ECFC9B42C21EB1D9BA4DD79569DE87FE23F11E65E7C1141A7903C92
4ABA53A4B5C7C390F436CB4C0DB7279511CC1700DA348283522B5AEC490A066D
1099371F128C794D9D6EF7E18E83010405CAA3AF558B233BED8EE2895A696AAE
F0EB67902FA53D9E8BCF2B5EBA3A06F2A4771CF854FE240328C4A2F37B9C73FA
6933A798B6E803A0A99CABA87DA35B532BCA16C510BFB7B509983872C58A3EF6
7D2D71970060C270EE7CD127704CD3EF0235E14156EB241070DE216B7E52495F
23F1173793087399AE2CD42EA3950E8C685E163310E87EE10CFE872F662FC475
BA0808A04C5F0A7FB449DE5185C1FD1A23E6E198E7EDD8922C0E0297625EAC03
48706DAD0FEF4FF6F5C9EBF75E3E1E5D4956B9EDE6917DD4082D1D829E2B4DFB
B4B8DD91CB69558534CCE31AE7E157D0B060877831FCD429CF844F9CD60DE048
63F47F7A3607969ED593E6BF394D26C28195A1F4C447294082AEA4E99DFB4832
A95B44F906B431F2E6897F39ACF8B64388F92B6FBCC54151594EA7D55FD53E8B
9292B6807BBD39FD4FBC672D129169D12620299CC6CA57A43E7425065D9CCEB7
B4D142E1680044C5809F7E41E60897428FA8AD8EFA4530AD69A8E7C94AFFFF5D
A4728BF4CEEDE30E9D784B65522CACD3CBFFC8A6713758B981CBA60F18579FA9
E40B884BDBD7A545A4496B564882E16A84589CBBAC04FE2C16B887DA12DED7F5
841769777C502E4DD5ED545B34A138323C4E3200FF771359414A2A669DE25F30
0202C2253CACA93435328249AD989D3D0EDA0F4F7211B5B5CC0A348F325F3E45
531785B8C0EEB4C75EB7B3A707A6D447DAEFB6250ABAC16EA7B10864EAD0681E
616D435071D71CB455D2DC0EB0DBAAEED5F6033997D86F110B8BD35E3A9F12C5
C922E9EC668EB1803A6BF70C74D8EFCCC8A2010906D1DA9B35DBCFE74D4D4A60
C8199A2FF65094B9437176290ED7E7F1558E284C56D4AAD2A6C4DC12E8178582
4617BEDE333D61D94BBBD468CCF2467A54571FC51959C5DE98074C2B8664AFB8
F4EE72F16F4A7376B095482425F6E42033261360530EB03DC2981DC08ECF256D
98ED4C5C0A209D4F01CCDDC7AE6E801DED286521C036B368100FCD2DD183ECDC
7E9561CE8D10C8AEEEF25FDAF646543F6B7547956CE95D45E6B54844D92ACE15
2A417454D57F3670A114C99D3462ECC98425F5BD73B59C5A6CA556CCE5BA046D
B2D0FE5FF8D2BDC0D99B0D184460D68025CC2901CBCF6D06A253B5A3B8F21AD4
1850D46974EF11390B7F33547BCE2BB0F1FAE0DBA571E607F53882E5C09BBAB1
462455E06A8E3FCCAC2C575A01312D8A6E7102AEF5FEA9F6463E0EF9407B7D69
AE0E77E97AB2829531FB2A32A4C0367F3CDAADB9A370228BDD77C46953DAED7A
0061A540F22CB81BC3816E6267EAF1B4168946148D1C44B49B3E630D93483FCA
F22C23187DB4939D2D9611B15992C050DCACF6B74419DC5728FB1849833D3690
1E6B8861CD43BE5EF63B1C4E79B49D41F7072B1C8D4157305A78A54D261EADDC
572908E39D8D1BD66756B94BE826017C5CDB42E46653449EE97229075B9DCC92
0A5FC0D6206DF1B2B7701C20E811C514DEF69335A22D18434271D0E06D33996E
B0F752154192B3D6E82E049F4EDC7D7F5B4F3B5F633645BCB7968B0DF3A85818
2EFCF991147B308723AD733322EAD9EB8BE170C9E6CF1DC60FF4BAC73F7C5BD3
A1B88AD321BBC3325CF2477B4C8C7B949E57280FDE9D07BA71296A32C885F8A8
6E5FC587FA3307FAD9F36AFFFF2D6238D8B0F49B54BB1312183B1F25D02165AC
CC7A020B5EDFACE56A7A1439AF6EE3C895B0BA816AC3DE5DA78D73780DEB4F66
D482BFAFF31B49283090CA40AC9B217421494896DCDF607BAAF60FDA87983BFC
F0A2C86092B1F5FBC8401B751A7BDDC008882333E2EE4CD89E5FB508C1CE812D
1F4F1F7D0987FB43AF8D81CFB3212C8456234629611756BA85754C51C03943DA
8EEE4F07CCB7F474AF1A061CF63076593FA3346CB80DE4EF4E714635FEBD71F5
80F2721B38741BF4AE4295252242552BDAD39476038AAB1103C3CB6D67F7066A
7B2FB4E283880DF51DBB481E1C2BCCE6E48E8041114BFB2FC415C8080753429A
9EE12912A6FAE2A0ED26C2978DB62EB9555CA84B85BF786C23A3614C8E87AA4D
08E546F76531296F15F33584EB82F95B1C65219EB3F54CFA02CD23C4F616D54A
2899D63D7AB42A979B06304BDCB6A0C175A3DAB422D5133FB8A08DCCD7061A0A
DE3C0D40586A60FA42036F0DF03E266E5269A37C0C7A14BA8E4D2F89AF3EF89A
94A5A5C786A964BBDB08D84A43AF4849C11EF4E46FBB112582FA92CD03D05FCC
206B9BFF880644CBC0BCA8F5E0CE1DD74F1C606B3F1CAE7991F5594323FCAA85
C766A5FCB7EC64CCDBF45C7D88C8BA30797AF410175A250D2D670BC2085AEB46
A290D57505E7B93A911742BCF69C55D443A90B01EBA3C898FBF9B183FC48B08D
9412BACBD1692E005E8605C8EC6E23C738CDE72644DC912BA324910BA0735A9A
761249111FD00FE34A5BD504713DB44F0CC8F2FAABC3EB10B101F5FDB7239718
193FD6D5C6D4CC67112DAD77E0CD8AD60F74C756AB028F0022E516375FA04802
CC0DE420F939A1FC7DB687BB015C653A3D7AC65784DC454852F1DFCC14781EDB
6628153FC9B133C219611B5473FD9662B4ADD2E45204A0E5DE3BE54B72E543C5
0528A5CDC0EE803A9FDE9CF03A03A24876C62777032B3BB976AE183091AE4127
B420B2F2853FBE89EC96D69048C1158822800F0182C8B3E35D524C0E8154ECE6
C9088EA765BE29DF549C40249B420B9B2845F3EF9ACA3C20E5F78618E49A07F6
660E6DEC2CF8C27B4C32F87373F57069C9A19C3AF1B0B0ACECFC882EC00630BA
E55C8227476B4C1673C26895C1EFF4AC0A6826BCD89B4D26EB2FD28B5EF74D8A
A2F711B9F7B996F163C9EBBD7953450E59A2AF692ACA494BCF244C089396FFEE
0447098612C6AF54ABA83A6A6D1A1AB5ED8F10E85D599C82A7E177791AF90C1C
180678CF16A8FB9513D743AC3FF7DDB5DA714AFD744D42A5D2CAAABD63C49E66
5E22044DA84F175726FA49659F3BEA690AA392B48631765327666D9314432648
B6E12F4B70BD15309225BF8DA9B3A5D37EF59A290CCC3C67829176E6D7FCB9DC
7BCDC79231DA7F6CD35BEC488112E99CD40B5B5262FA0AAF80443B5A052927BE
B349040A9B6B9CA766B58AB0BF091CA38645E7E9DF59893730F61DF96124F028
DB5863B688FFDB25A094156E1ADC59204E347E3DF0A1598A90C393324A688FF1
7DBBB5FD8C7BF3C9EB78A10B9DDEABD80FB2299875EA41FC74515F728CB22C5A
FCF3EEBCB402B87A2BCF7790681BECEA4A56B3AD7318FD9B3953347F8047E162
E092329D2B00E6290388BE163B3830C989DF4005A65A512B4DAC839D756A5661
FCB051AF6AA5E3F50964A443FF8C46616FFE2CA34F3C77EC0BC878EA4302B15E
8FA2841D43C3015242B452B518F8054B0E0B8F56BC2B339745801E11AEF067F6
1CCD539D4F624140A92D2934C0525E4804F2416B26AC99D6F49993F8B6D5AA3D
CDC42AD9DE493832D8B39E23937A0C18786E138E9611F7CFF347A48FDD3F0605
55B7D9C77628C21D5C380EF63C1A840ED50DF73789B53C67DF3DCD4F06EB195D
876E586F4586BBB8AB0975329109C6A52CB5DBD2B3EB4B06C74790834356C70C
3C18B47CEFC76EC536DEA490C6190EFDE03013BBC2B94BFDEC1D86D284EFF8C6
7D3D564DAE29F3A23117A134AA6B0C63F0CB71BD7158DAC4F55A0A514B8BCC03
E7632581FDA7F4F3ED7098D4191CBBB47BC26301AFB0F02429610C3C0E1FCDFF
3D8ECAD6953FC9C41F293952364A824276DED61EA0116715B204B9F8586B7425
2520FA3A074584AA6AA207C2D49519209C8E63F8A2DFEE037F22E42651DB44BC
63C5E50C50C34CFB441AFCA471A7F4BDB179C20EDCDF9811C81303C1041BB398
55A8695C16A876303E3B50F290EFD0227C58599502EEA85F5EF8019D1E779970
1FF3C53456EB5D270452E9AF434070413701D1C20A9218B9E2F0E42AB1296A12
A69160F4E10D38473361FC74552DCEA20F5EAF7B542C7CFA5D870D1C029D654A
5962753D44FE919694F0FCD5CDA1D9C2E6C4A9D2D5CBF6D7EF865A4ADEFE9237
F35C1BC7C1756E8AEAA873265E96A310B647D9514EE81F6951F5CE8C15EEF844
E6AFF4141E09E9F3177C07412DFA594FFBA64CF61F93885EB2862DA1CAB72981
207BEDCF88068188E0920F96BBFCFBAC95FC4FC9DAB4167C0A622AFC283A9926
D13E3B17162077F61F6B1613FFE44621AFC4FDD9F7F6AC026171E48214D691D0
FC7164047FC046F0DED5FB50AC8ACCC51DFD8D60B1D495C27084B2004540DE07
83D86269D231CB862F811A4E556F87C70F98690B6FF0FE828FB14B7CB89F4A19
5C205DB2CA3BAA3309FAC19A1F1D3F975F2E0D5A6AB3E7FE81DB7A8806C2DC1B
0C63DDCD282FA94C3E7742B5A6311CFB7F7CE43EF25C7CF29AB56DDE66C4B564
7889C5AEA84AA3E03834B915AD718CC5E605CD90A955BC2C85D69C85D0B372B4
E6D4B52DA60A53885DB578BFD261710F3E8C824992AF3E8E419A7F5EDD4ACE2E
E7561CF9193528F838896172584A8B99B197107D3C819699A132D3A4D3AC6BED
98EFC24C351C2F844211CC310D66AEADC245E5BFA40F79EFE25032B293959266
A1124075B46C9DBE8FD2F0C10F2E1DD551851E6845B62769DAEE83C196BE8A2B
CB9017A021FD32252629E3A54487A84A1FE082AF5CE0D3DA1A4F0E3298B31B42
8C04D7D64273799E17E3ACB371DDB2FA2AA7725248318CF83C83317C582EDCBF
D6BA619E12F04930DA24AF94ED60CE5642533ADA34813B1B6C836881C28AA2B0
6F3F5DB8A12BDD494E07A87D4A901E86C87899B08CC60465E954045CB40A204D
8126748060DFBA0296065BF1992599DD6A5A3FCBA7BFD4567EF9A796C290E7E7
939EB14F3B193F56947ADE4D8BE9ADEEDA237EC6D9C2D2683F15A636B6FE7EF2
4C5BE511E575EE5CFA76A1CDCBADFE8BB938140ECF5B3193C5348E9786C8419D
058DD95E77CB9A0EFBDC62DFBDFAB3D0283290C195C3062D7C8C1A8B0A87FDF4
D846A937198A1F297E6C29C75AFC7A554D043343ABC6AC301BA5E707DDB14F28
31ABD0593ECE98C08819BBBD519999C5863EAB0F1032E58FD8889931BD9858E8
B6BE0CC5B550E5F6DBC8980F33618FE2B13391C6C65A967E3D712816226CECFC
3B05D735DAB2D80652224D2F172A6B54CE6877A565102A02A6B0D4F8623D19D8
8E6B9408C807CF497660BD265BCEED292A909832A4E54AE21ABB63C814405BE0
E84F1441CD3C0C23AB92BE0EDF01B16D65B67598BBD384E3D2EDA13FA5BB5801
A6C7CFF6D9315DE24B738F3A71961AD5CEA360879A3304A5516E161A9DA40E75
4D718A14E64FA0720B4778ED9CAD4B5185388397BF789CE65663B2CD97A1B805
5CE8C9D15BB8E85A414C4D73C1F99BD7377EB970A9930477A3A8F15C7C21B3F7
518C1BDA5A1060FEF927FFC4FF52507C34739F04929E7A936BB2C978B26FAFB7
69E50F788EDCD9FDC98368FB02DB524C1447DFD0814CF1A5C079BB08B8A44798
0B09BD7B5CD6636C2C61A97C3250024AF80586CC897B021AB33D0F856BF5E50B
1A9A1BF8FD01127D4B93D5E3E12FED214F594A82447856B36B0F84319A1FC4DF
BAB0DD95F83AE56A2AF9AD6F2AB2DABC0D3BE9FF5BB860DA17EFC454C1809F2A
1008A1C84A5ABD7D553DA75C8D6D64C0E96D89E8D633273A3ECAD05ABA6D4C4F
5B2BBF0083307F0429A3F53B3C8FFBFDDE30D19EE139FDA5A3A367EB1EDE6F0C
01D55DC91F052E43CDBD1F7E5CA8E4F2ADBEDE58923C4C49CFFA51A078A53F5C
8CBBB51A5165A51FDAEC5994545C4435EC2D32EFDEC95FE2620B78F16B9DCE29
B2B7644F983DF495AF6C51155D82A6328688E965E3178D5300BB03B068B465DE
15F3A3BE772527B88F3EBCA7606F4B1DFCC2545923E9C1E660285CD12BA777B3
9F3A1009AA32924FAA4D6FA6701E75CAC55AF5C122E5EDB35CB9A96E47204E08
F731066E1D9E6763F521244B70BDEAF41971F8B5CF945B199CB0A5606302C29B
B1655E53AB42EBE47D7EA06D528F030DC3695A1241AAD33F06EAAB26EAE00922
B0384B36638336DB067BF115851677E53C4FACAC3C21FE9A10BBAF3B514B5C7E
5F24434279C46E11E2829A1C28C6A481D5F9C1BE2D6A41662D5186CFB3C1B79E
D4DCF95CA6772CCA04C469AB848074CB7F61415D21A86A0D5987273C8B2C5600
57E11D4D7B5CC693B780B7FD3362D33710E54B06294D88CC742B18F3F7A96C31
EFDE76C24D7DAC1141988C51E8BEAE336B9607DB86A134E7F8FD48EC48517924
684D8E75ADCEBBFB301E6C81BC7C64851228A9240E9B8AE837B7DDE87B7BE2A1
A9D93B652AA1A1556EE8D6CD9E7FEA906868E295F78431534AE018B1399BE4C7
2B08BE09FDBB29295C2D7628BC4656F1926B0BE5434CCCAF413976A4848CDF20
D90954496491E0884C2822993750F2882A7DBD9A3924FEA13D8AD5DAE7EB58AD
ED77DFE5C222081B86C853F482FC2D60758D88D9980EC59FC33F4BE1113A9EFE
831F36E0EDEFF9D218B00DFC9265762A2DB049B1303527FA256527E90CB4DBF1
9E7D23AFC72B7250C01C96BDCEF0E2BE15692458D1034D72FC4AC492817BAA75
96BDF356ADB7E7D644E9B836CB2D7D48286A2FC207A3267EDDB53CCB618985E2
6B59418099BD71757B2176CD73F03E652D3DD846099D0EAA5515E6B48475B575
BD6B805BE499C0579D039247117E7F5D5A2C6802DF08D6522B1319F1ECE1EBBD
28C89D74894F45027B1F3614D5F804D6EE1F8ACD7A670E3DDF40CCB7AEEA8869
102242A274082BF02CE2F7E8AB4BB4A96695B273105C0DA1AB217F16668CB63C
A25EF8040A5D2B2CEB922E847383FEB7E7DD0225A885FB5265740D5D259BF65B
841617AD961F6D4AD281E50920F1FAC8A14AE2C3AA7663E48AD446EDD97D2C18
0AE99D699170547B846E5339988CFDA047EC3C072366ED7836D61293322C9F6B
8E68BE49CE667807D817D0BF162F62DA4B68F9DFF08D952C558D9B22F9546B5D
4B645429B96C1D885F81ACBBDEA7B5546B610D385A029FF38715BD5BDF3B5028
2C61400D5E0259B887E7B55A1004F4BD081DFA60A9E4AA4F44157E5FB89E1361
5390AFC01F6D3DF5BB1AB8F28BAAB27ECD263D68440AD7F8B2BC0CA8079235EB
86B400E4B672B55C10C6D82E9C31B1E0A48FFC9CC4CA33912D872F10042A9F03
001A947024FFF9BB7DB2AC948FFB7A28C7319428A28FB96C560595931CAB4B50
824239E1472626CA7435E9DFF4960560DDF4E38C99E9778127F7958E0B7B5C34
87E0EE76799B1274B2FAB3E90D2B4C1A837C757E90222E7504CDA274C554B884
C3BDC66F79EBC2B79A94F46EF7234CA7E00213376F3652B534D2FA457B971081
CC0CB168DCA19117F69583A9CDD00385A01EEAC5986BA28A3C04F0D40463AC19
B0E8D884587DE117AE51EB18492BF46C2C44AD72B1DA7FC153565BA0D88F4EE1
01BA31ADEEB20C19B44BC6EA780BC836B4E329AB19079ADDD434E2DB899EC2F3
865449325BE6B7DD2F5BEC79ED2D5B8DC1E1E5D6513F454752BC463733DA1ACC
4001361865E0B7E69CB70831769F8CF7BE06D7AADD9AE25CAB9F9E4F54879BD9
871AC0B38012A27086A6C47C565E49E8696CE1D5121E94CBD3BA0BD3C39CA7A8
3DFB15E8625F8B2157857AEA3FFEA820AC4C39E00126E7D64406628A03D6A608
0B2C7C414081BCE323640709FAC3DB075E5E1947A1A80642E7C8E7500188B07A
8CBF02CC81630B7FE68A6FC0F4747EA3C186DA36A7D085FF0375F68A9A58404C
5F44CD8F774EEF024C85D85ACAFEF5E6872587087D83E3ABFE10AB1C50E8E98A
1FE55BCEEDA8253371DFF8261C6240728E3AC8167A29AFB3B23B1C14E5FB8069
5C0B998142188A968C2F35542927532D3090DD400D9C72E043457F0C269A846C
2870D1C9FAFB61CC2CB401B179D4DD7226841D9E0031888B7D1D315D4A8F098F
257FF232F8A5A35B12B9361B13B4C5CE605ED7D51F0D03881D4E315B1C68D791
C25A8760D9477B99158D58C13FCFE594A7784E7B64438527326050A7EBDEAECB
CA1DE655FC62CCFC7C112013BA9A30229CAEBD2F25496E3D9B8B96976D43F658
60807FA6E04CA50B06A135D85B7BCE864293F60ED6285E188332F4597DE37A60
A09FD4E6AA02F37B2F668A919BEC74250555F1161CBE1A9D3125C71594911B93
AFE66082F914C7A9AF4195D64F9C8DE843E7B7AE50FB0338A0CB25AD1D634F84
435CD31BC3BF86F25C1D1A84324F30BCE12A52688F70F10AE1C332972EB2A450
B87E3628275C10ECAB346EB1CB984B37A59BBDBBF9065DAF5FDFABBF9695E2CE
73198E8443DE65C6A317A8747491069FDF053439C379FFED12EE0C03231E5621
1FF2B3FD1A26FF0DEE0325F2005AF502D7FA800EAB85ADB50ED0C5D326A27989
294C3F0C389E774DD09F7CE27D31C47F7C59E456814371A2FBEF8D31B3F535D6
FB495D4E9FA1846258D2A7C4715976EA556526F5E5F2205D1761AE06899DFDA0
F2BCB998FC0E72E7487D811C6B4D37910A249FC4FFC66454774711EC079F4AAF
7399592FC9B22C18F463349D0312EFC9C2A12FF8845A0BEF06A2349C1A74737B
0B05E154DCA94C710B3FC886F3B776650C835FD5108F4B4E97034FED0F13CB72
A7C36FE07F53A9A6BFA181BF7129D4012DAA7B2629833E5E8F8EEF08360DB8AE
64C0B5DD588F31034A5B31948FA5A7627CBCBBBA17CCA7C07D6B2E99B81DC143
F8BA758D0C6937B4B16882543C6E3E24C42F48292026AD3BBD146EBAD6DFC0AD
D70A42F26F2455EA2921E8A5637889E991B5CAA10AD0E26FDDC9540F6BA85796
045D6B819E5F589F25BF97AC5B2AC57793B274668AAF1379E1E872AB703BA936
7A84745CA184B74F92634CF2533C9346A542366A4D054BB185811F1428BEDDEF
64192FFEB78E48AC1D679EB9D895CDBAF57B8724ECB2119E80B0648E65555CD7
ABE52F360D6CAC723C32D74C8BC681CE9C21D018CE3A21BDA7D005474AE72ABA
297ECE376B8C2896644C8BB02F22A443030617093A3FEFEAA788F07E52501383
E65BAAE541E4AE8D61C8B047025AA478477F7B17FEF0E1AD86F4364CAA868079
E2DFC3667B12D81B14FBDE1A393EA53A6581318C662523F819E8C227F8E54E71
545E1368F8A9E62723E87D7AE04CC27083F69CC1D4079BFA894FCC0A9BCD6FC9
80FD489EF8B6F10DC63A65AC780AD0FE658761C511F88B89525982818C12844C
EA5A502E9E8D48930FA0AE6244A92C37DDA888FF384A417533108B5F2D348899
6A754F4F30C27942521F3E01A6DDC6EFCD4B1A1F464EC83C251F51A60B9B1416
EB1F2D117894DC56327B3E4E2BC67E44108A1A2A180635AA303B8C1197AEF9BF
1B0A77F4BB63F1033644B603C8B485F232FA896601A489262F9BFC474CF6A55D
18452CD712DB8035412217649E76D64C536FB5318F157FC79B6D0C587B17BD70
8965979CAEB8CE69E275D2E4AE708FBAC3C29B51EA98E5EAD32A5C6D4E4886F2
E14AEA913322DFD9A8BC41F47DD5F4214571871C746E50E9B2A6DF6D8733E253
86654AC84FE0C8799B422FD5E382E55176513B917E50A6D0392E01690EE3D097
21DED429AF189C79BDBF168FBDCE9AFBA319928EFD4C822385F71605E7E235ED
C5E16F5C4C5EF58E37EEF30EABB4880B50E37F0FAA824E57B923CA61639A7AA7
25F02365E3BDBB47C0263E3A5C1D5EC6746104D7BC00C3C89F8D3936C90EFFFC
536D3CC5AB709DC045F27B8CFEBF10BCE17B8FAF3A5E81FE49E09ED50B7CBC22
8E7DCA92A72790EE771DF3FF0753646E4AB057BF83BDDC23EA9F3D80399F8863
FC973A60E8051626231A4B746F6D4167F20FFEC827C94B4C47840465CD35A3E6
B7B209703F56C8B3282B1074C36BCA9920C99D6B654240F925A27803CDA28E50
C1D02BB7ED63A5F2A03485C57CF93B4B0A7565E1C6D5DC1B19C7BF1C9306BA75
7969CFD65E472667E6CDD04E98115E167EE5B88E0472A1AABEFBB7CDBBA45CD4
170E4EFA067F63583E6FD07FC3F4EF77F2783FBEE4A0CF42C1953C3FED5F5AE7
73B54BFE9A945C49F326B8AAF0012765824AD5F327E6AF67B1F3EB86D83D142E
FB09C4A3CA34C1A6C31AE100E3685F08BC15F16977B15EFF5F9C4F88EAAA2C1D
26E7F6054C72F97014AC13DDC5D1CE863AE158372A1F272C47E9E5DD4F6175B4
806784A1BB714966B7182BEBF421AD307BBF800BAB3810C50F5607708D48DA83
4C90CE745AC8F4E63D0307E20AEDA90968E0DBA5D7E741E67379060BEC36DD1C
E87311FCCB2C54B51413B2E1FF2514948AC8E043CB4A3F78BA73AE561F254C05
770FE68C1EC713D9299467DA7367DCC2BC982C10EC59EE554E1DDE066E2475F3
7756BBCD03444BE48881B2018F85AAADF7BE3D2D2E7362182ADC03A4B9A2E196
CB972929FC1AA8B698B55D1F8327C1891E9C09FC00A98BA55B07261926148278
AFEF4A237E04B02BB5EB5692A1EBDF71A495AE28BB1D85812A6DF898FC7ED9C7
9402CD37CAE297071A363D32077F426E4DD273A90C011DCF788D8EDA1E482FC6
9440262D01ACFE1A26E63B55BE506D679E05036DD7A4C78664C15DFC54FB991B
A62FE05B896CB627980A4954DA3E2C49DAB24DB5AB8FDF8062C1D79C0D8EFDC6
68D4A8F298164CEDCECA0687B4EE73DD2BCD2C70AF8347575A6832919BD5A3A5
602649054F4306D5EC52BA602838AF7BEA239AA5E4899FFD8BE053609FF0A098
265C0A22567C53E710FC17FF79588A0DBE7A3B7E4274ECAE0E232A4D584D8F46
BC962E93142CB514CA9FA90A79D4175952FEACDB33D373EF57518D958E019DE2
BAA4066D76B88C75EA3BF0F0AEE096455026E80779CB85CDFA020351807E2BB0
68F38CB0398C8D6C0CD0205FD2CA26E4C0855BB6F57609324AD94939D4C76A53
19A78F0189852B709BC6D7B02F61EE9263AB2210794935CC1483ACA7026B1DB5
42D3E062F04BF034519DBFEF26F818F7C88112B946ED73DFC2AC2F0087F3B70B
B4E5B18753CB1E6EE4FD9709E68D613544F3572D394800BB5A7D9CA04845638F
189E8664D1307F3150A970D6EFFDCF4DFCE550BEB1DC57A75B9DD06E1160B711
B651DC64AF75548D1CF6753D15C6A916AC6DEC339D31DB42DE5E91EE002A5877
916E08470E7A697BE405161BA149606A5AB5938BD0828D558D299C8C9F0C4CE8
FE7CF473CD1EADC9E5708969FA557DD87D25E845E0299609BE47E938175358C5
471B775F73A96DC283A034465E936F4B3A0917FA2E996B8A56EAA87D97E2A10C
4A0DB2B2B22076BCE350CEB95897F94EA3A34F1534BCA5BA97D3690FC73EA826
384FB2E29B59D0D5F08322482D20E7FF8587EDFE1A19725B2B03657F0DD5874C
E38317200A2595702812B24D8343F3F79791D6B3CA956AA70F360B88DE11BD54
671B92FF3355953CBEDAF992C0F8570B156A212AA20360EDDF2F3B2CC6730A2A
40BA63D88370C4745382EB17138AA02414C2FF6258F66B2843225B1D389D6F2A
A1D7A679A9420A351390D0ECCAA55195C28E162597AC47CAA3E1F2F24939A09C
C53DDDB72221B4665190B298CF2B7E5156A3995070B35083AF51B4B9DDE9C7F4
720C551F8ADFE65C2DC762973F7E8EA15903D03CDEA9ED4834272343EE31601A
ADB866FD0CE72F679435D9A93F1E0B401408F13EB0610B456D416E3482F640C6
61652EC3B9FC70FE1C0B0F5AC97005FCDD87F2C7172E4212FEADB692DD7EA0E0
5309872EC6AE415CE7AF5AC022EC334256BD561B992099BC1965B60CC033C63A
71BFCB74E2B9A9C618AD3C187F449D57EF3D1C4519F48A28FD337A2CCDD3BA93
720E0A9880F73D11A0774087D3B3C7B4AB03D0D6EC701DE2289A164CA0BD31C3
1BC9B507BB8CE05019C0F937D609BD07F36F26F7FA3C2FFA443BD5E691A8C936
C0AA24CBB6DA7C400E947271025BE0226762D24AE71B79B81C7E9AFB01B0B8BD
631C90800A310B0B4EA4827AA87FB984C15C05ACA58E2569580B78CA9DB2D210
E77F8C3747E75A42435A73403D1DA9777028B8346C47BEC63105420CF6AB8E8F
08CB2B50ECB02233CD5366FDA28662B864409CF1D0EA7032BCE82C8CEB68F1BF
5D4B1D41CCAFA0017735E74A21EEEE049299211FC8A68CE347DBC304F86BAAAB
E4981D8F5D1B8F4CAB74A5F64B97921EA6A09B369DC91DECE803C8B0ACBBBE03
F426E2B11A50CA5EA024C682EA8DF80ACB507353D1B1294FB7112844E5BDAC85
B993ED4DB409FCC09AB76A4498A9902FB2B6646AF5A01BDA301F1ED8F3B5F331
D0B0DD3E8ADDBA64E33CBA1CF5220CC1461385E02E97980F5193682794DBA826
811505453C547E170768E47425CD9054342E4B19F80A6C46556289A50BE92D33
90B584993F676F7E342593E5DE04BEC9D9F011C518C0352C6FDD6249BA846A2F
C15208AE15D7183FC22895EA1782F1E10CC163A6943E4B1AB9161EA37F7B6A14
B5BA9C6C3A7799FAFC3DFBC6B5B871DBD0A2A25CB5C2FE3BA719CD543F481B83
DA6B91387F4A2CE73C0ADED0D49CDD808710AA87958073AD979877DCDAA38794
17D1C90A210CECA5492AEB09375AC588EC82DB9C8122B088799BBA661E6B3A83
1B5DEBBA9326A4EE27B581E17B3391E70CC07111CE3688E1F69419406D2E7596
29C4E242BADD9ED9D66426281950C954319F59D7BC531930BE29FB5C1B1B171A
52AFD8DD7F715113AFDB5DA78B15A7894711FC501F5421C03B1D17ED99F68376
75C3BB8F4372C58D5F095FA6FDE68672554A6F4EED0458467DEF077ACC99E20F
5551A334EB57514FAF278EDA5CF99C32A003C2857D93F9929D84C95EB2F96C76
8B1EDA64596DF7DD5261F26EC7F5E6D29F5C431A0D2A93F3EB3F5F94B508FDC5
FCE41D156814687D95FFB8660EFFBCEC0A1B2419AE879759442EBA24FCDAC188
3F0BD7B6CC30A4F64B3C5F54F3549390D2B59A4F35CA6F52631D4AF4B8BBA73B
4C42C2A6FA5414147C7CCF9003FA5FE9CD5AA6C0338AA8B14717071C9842F8B4
23F8F479F124032569FCAFEE1EA81E4BCD857795E846A74817B43FDA213B9C3B
744BF3BBCEA163584E639EE0C5687F73253B7ED6DD9FEED664341D71AE078F6C
DB5ED333E64C554DEED6F6241A047775B4DC2B604A5B0E4C51E449B2B88694C8
BAD1F63CF6B5F9E06C24D9A2E5FC0B851C1005193A4BCBDA11F0F93958C2F7FE
86A3BD67DCFDD7DD67A4B26716694D6B0C8FBA1F43562612416C60B557B66183
74CA390E7166728184517225CA47DDBBA743F54949E5814A143CA71BC65C4681
3EB44722756BADCF50F76C6357991C48CD0EE24AE82D2823693BE2BF77602736
EBB72ED4B13579BFE058989A59C174B7C8D539743C09AFD2728BA243522E9F05
E8D1A3B77E7024C2EAF64BECB3C4144526FEB900D4B66D08E2C86B45309E8F63
F0E04D626C9035FC81229DE99A3F5EF8D062149A9D1B41A7B2F9C1ED4C0D4596
A2B826FAD6968FA88349E74CEA1952383F85B1D0F1864A73195645D507EDD985
BCA1A29A6392867F2788CDA8212057B2663E3D125B1D5F450A04E0D3775C4C44
DB19E2ABD7BBC66E5CAF06E7059F29DDE96D08F478FDC282FD0B2305DB24720B
099D3F51EB8250B8973B65818439757BCA9EF4436AABFCF4FAF1E31B9BA8B6BD
AF077BC895CBC6B9CB4BD8B480F14B9D9A5BB27D976A8B20C523000AEC65F883
343D9D62706E3E794583F8D0BC9EE04C1BAA2D8F95F57D76F24675F7C85D694A
BD5F5AB7E9C7204F9F7843315780EB53FC4A7943A332E787F143C038FCB574D2
C6F47041F50A7A179D94FC43D03EDF7CC3A552404E4F74A2847A0780AFCDF0AD
367490C3867F7452408F20E93E64F7049AA89E7E1C67B050C665FCE62CD8F4C8
608045C2B7A379A9D9BF81F313C9A3366B79ECE673365850EEFF4C3936BF7E4D
944CC656878D8C519E797F498FAFE1CEB1AC4D99DEACCE9BC0B5BCEBDEF0D83D
31C4F1C4317584F74AAA5F83BD082C83E8478C4BE9D9D15E4802805BCCE34E2D
7B04D43C100ACB1F9DA6B570B44513A0A77751E40694EFBC0C83977A9A93996C
CB0CC80D544030EFCD68A293DBF38940C53FD0F6385C430396E86B923048C53E
94D585F2DE2A3C652EDAC1EE762C4B35C48DECB235D6FE0B89CD35F6C8D58163
5906117BA66D16F005E75AD66B9F252F912773A2EDCE07806732299359C1D8B3
4BD68A7D8F8B0E8CF32696FEC1C050E02DFD04320CFDA0C2CF12CC7023EB4605
98166DA5A74036824BCAB85B91B03BBB90B59ACFCD7CC4E4510FDCEA9B95B7FC
BFD0CF47CB9D10DC724588FA4B898FE4B1A87B1BF87DC97266044FC65C6112CA
37E5011DDB6E13B01D3FC34935C86C18B24B1C5C95BC5B42E7A42CAB0BFECAB8
3B39FDF7E34E887C43310124A1C7913081FA7694A4084F1FC024DE9A7D3C79B0
E7F0FDD56C9EE764ECFB387320AABA933FAD5CC4D944F24FFBFD4E4E45D8B480
F14B9D9A5BCD61BF1850A8959E50BF3D59FF859B398B73D6C1D43D12B9BBE007
B385E4BA020EC60328E05C225D0ABBF34C99DC57672651CDA76FC39A7210DBF0
C11BF374078E00F62548ADAE965FD2EE0DAE4D81FF8012AC770FDC4D19E439C4
43833C39743525C8CBA3B0BCEA458A0C2AB69A5AB337B8B19464AD92166EB741
03A2828F300B2B0556548B65D863F305C6F0009A11CF60A04277EE7EDB02A755
A74403855DAA5383B79838D1CA67D24D7830C8613D10487D65936A6D4C34FD87
E31E93ECBFB4A166EDF87FB520ADF5468B3BDE5A1DE710912F05CA53A9242DFF
55E2F193D8A673E9DBEA41226F05A40B797EB0B2213D27FFE761B353BD1B452E
F9A02C83EDB4E9AEC276A340ACD54A6A0532337CFC201F71644F3340072A2DD8
23238FF9FC49E3D00F052DD43A28C25748F0A6646DE950112C524F4C76A70816
B4F42D5DE5514CC4469D87A203622CBD62930F19126A394BC4E604D00816F239
9B06B5A92A8BF270FBB12FD0D0C256B24D61CA8E22F7F30403220F3019076610
8A7DD46FE5610B30C547B5BC216607F4BD6904992230B6F98D1FF778B76F772C
7D702778F7BF067A13504EEB2DEE4EC183480B4096FA0FFA79B5322565ADF401
D4633DAF260BB1B495AC0D83C68966F5C6A0698AC4E4A2C2726A36B0DFEF7BBF
B0E1FB869B296AEF35EDAE0645F2D64A52A9426ED9E6A6CDB0B8A2FFB3238DFB
04BA7119ECA207C1CBCB5F7BD74B46B7597E20FE06A18CFA275431A40039E9D4
3535175D5D45BAE86E2BAE71B5416B3A5BE0DE7860A88B2334BF99D8E5BE4427
064BF679E8F988047BEFDAE8390E2400D9EE2EA281FAC3BAEE59C7402DEA6783
C62A0B156A7AD8A9CB48C2FAD9767CEA8C20BDE35D69E6F9648DD46890546EE6
B22F632D03B052CB1696C5C9286DCD96F131A9D1DB79ED3FC1908070698E120F
C08FC564189B0D9DDAE00C32AC235EEF3C2C171A6655A7FD80C7BD60CAE1F2C7
61DEE1EBAE7CE5E4B330F9193BE06671869EC67F4820B86527ACD52BE18594E5
073979E6C175D24712FA88F7B64DFAB911C1FD313DFD0B94DEEA76F99070AD3F
CD9559FF11F249E63281B3AF98D5F63EA2987A40E1814727092DBC0E8C601149
2B438CD5253FA77B24D45210D35FFC67A199EA14E489436D9DD8909E74E2A48B
8DBCED391BEB4D0DB6C417ECC0C58277D395DA9615440525BC89FB95B61BFF32
8A79E1C6102785E1DB400547D4A30B754E9F7138C5895B54047917D94FDD4546
0FC756F261B12461546C829A496A989E250E174A36B79254DE2913F90E741799
A043696F431986D13711E2F18D738C2C81E5A54E8A61E865FB18D69A2CB208D2
960E6A5D55E0811E499C038D545578779879A72508FD3FE0BA439E187B4B2BE8
FAE2C0808B66D8F063B2FFACE8924AFA8110A3936081D93B38180A5C93E08471
FFE9253D6224A6954019E5C4889AA59D1FB3AC827B3ABBCA8FA6810D4189D969
BFA4B82DBB585DA06404E9BA71AF55D4549E2F218421101A11F40EFBB5BCAFDC
790E6E2C159C1D8740552F772510072F69F1620E7F2E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /Gamma put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 18 /grave put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 127 /dieresis put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD2E141C0A7B647030FFD1FEAB8CE703C40802E0D32EF0DF87BBD5131CD110D
BF5A11D66FC2087779FCA72E245C6BFA23F60759FECFDF932C3026D4CC21D843
9789FD52FD7A85BEDF58DAB6334F4880C2C99F49C0F64025C76E0550BC4B8AC8
5C7E817DBABA0E78F36954E9922286067E92E69D23E9FD278CD5F26788A7E5D8
476DE8E21397716DBA03B23D85CC8B701EAA654C5EE74F40D6C3AA3F46E30A2E
E663C2CC64E2DA3631AB809AE1B70D89F53B1D72088642CD07D1DC4C7263A7EC
9785A2EBF8CA24D40E2C60CAF478FAFBEA8A27A55CE0320FE47E2512D88D1244
95CBCA87983B8795DBE8C15ECA68CDDBDEB167512E91930A7FB226994EE4487A
D1E69C7E7908AAA5D45BE3B0D1072BF1F36C6368AF31FC583EC20E6634FA5777
5ACA6512C5114593C89A9FA5772BD7C4C2FA987C6CF164C2564BD1502C3042FC
860D2A57D5DD11848588A0264C6A7AF607D175EBC791022DED8909929C00B48C
2CF4EC05B43963F1DD6EAAA0506953CF028F59D81B51256DFEE6967960E4D051
03EA65DA9A2CD6C3FCDF0035EEA5E1DDED3914331792901E33FAA564DD27DEB6
C3C1F3E5D6BFB2FD09F7CF7CA34DD96B23D1CCB82A4941404FB4F247E8CE331A
B10C94D1EBF9CA1F3F3A286EF86EFE1B858C3F0ADDB267A15006C07BB7F6B90B
EF98AECB1100AB5493E0459EAEC97A1913E4FA9AD3FD088EAD905AA049023E6D
85E03E615A60A2AC1D168404FB8322977A15C84E1A7304C6D441972F3A895BDA
F9DDF8DEAAB1BD7E63838DB2EED944F252DBB6C630279F1B9A5CA565A5CF167C
E9B6A004E4CDAF378AC8805E96BCDE44BEDB49997338114EED8E9B747BFD746F
29F4943B0272AC32A30444FECCF8EFF0BFB69F760B08847367D46876697C7F52
4665CD2A082720E55FEFE8273E47D18C597EB486A9AA84DFC45F5F1A8373DB1F
70F23805D95D4C44F4B739329D080DACFDD7EDB53867E3A13A16F672B2FC3176
95123474E0FCFA1C1F1A41CBB5C57EA6E10107092C0D43A0BAD3746E5A4E7AC1
54A9DD65D6CE9119989822B7EB9E04F5714E079C2053A32DCFED251AA565727D
FBEF277A0B88FBFE5BB42A7150737FD56F649B5A2CA9D727DDFB5CAB04EE758D
3C311CD5F947DF2A2D3536D607B5BF38C024989B0A1DE6E1E9311EE9E5F5291B
1A51675CC85AE8434E811AEEFFD2AF3A94D3C8E4416A7858EDC0A4FFA763A55C
5E4F2D5A994AF7ACCB8296C16179957A0FC635A60705999E5EC305A1923EC4FC
AD72231BAA8DC34C31CEBBB099BA53E1DF640E34E1DBBE44EA3F00BCA5CE3D69
50B14171AE075A1A4C5D7CB127F936A180CCC4642FB094074414F8BD4D08C797
DB906EC65DD63342EB4E59B6CF89DB2F8A53D57FDBD68349CB71ADAAD3B764B2
1A7B138BA08F03A5BABCB77D1EF22C84190D41D80AE2084C233958A592A26510
93C52EA00482B68F35B4403B482ECCABCD9119F02F0B751A3879733BBA3B9C46
6A14244235404F494EED68FEB03683A6B5FF23E4D1DDDF485DBAB9277A1916E5
BBE1CDBEE703EB7F10A9A94ED03BBA7D0CB21F41BC80E2DCE1E56E58E0BD9F43
40DA2C17806C9B1115ADBDE1DECA5EC503D50CB0B09FD93C87F60EE28C512439
CBA584C0AD0E9E6C49CCB12D60BD2D9FB6F8459B58F7ECD1CCEA83EF120850CF
5788B4CC02FBE04752AED69C45A4C7ED0B8EFBC77C2E3FA860EB2F1667C90E0C
EA1FB3189BED3C9FC6849B8E54BAB6F6E0171E94D4315D13735C353D1B28BA97
BE8AF584867A8A76D8E86FF2371F922311596E1B13B2182492C4948163F31C81
08A241AD6A3E8B12B0C220EB06166812B20F71A8412228B4CA89ABCD454914EC
3BA2F3EB33DAEC8C98DB89B9F08BB9DD338545A6DC0F6E1C7BEBF67AB6CD98BC
3B8ECD11D3DF6582C92A5E43B3BA3620F37EFDB0990E67A6308B11EF86548965
E080F838519F066C53D480CAE072318FCF89147B8E5E32107CBE6803D3EBCA32
34E17C0BABE740AE95D904D932B705EF295D4C22FC0F6BB4AB2CE1B5B1B1358D
88876F2EBFD7CF2F48DD126825D5882E7EB90835C6EC676BC4D4BA9E823687D0
99DB3A9CFC3BFD6F7EC9B31AF120B69623DE4A54EEAA9B70AB668185E0E745C4
48FB9C3D4BD21DE55090422D1B69DCC0D28BF628BA7B208279D60AFAFE1D2237
C802DFC1C916A0F54990F066B88E15C0A4D866F122079D1DE7CC2BD533A69C42
7BA682685BF94AAFDC74A4F6DE0A17AF8E8C2289567906FECFF95A3E541B5581
50D1F3814C05D6D3B3ABF83273926693816DA9FD4E8C782768871D0EFBBF7A9A
2E289D97F22E1B89B5000BC36E5DDE1E0063DEE8493642EF7E1AB688A6286FF6
7807C251F32E6C0B0A6911C11234EB70499B5A5A97F2B7CF9D3E3C9BEED03778
6FCFB81BF7540A73B9D77C21BAE0C1AE382FCA1091557B13E8D42999FAE6681F
A889AF3AB4896B0486028ADB97E794D297D1222DAB7796973721B7BB0A1F7A4A
047FBEFC605B48404EE873F6F67C667EDF271501EF10109FC0214B5F996A5FC9
FD49355C442D50FF92DE58DA46A733C489E8FCAC6A62FC3EBFABEF5168F41C2A
3A0AFD2FC0C3FD95B35A70090F7C60D312977310FD291871A51622E81EF34488
9A09457A2AF18E87C1FFF04AB9E5BF5585CC343FABBFDA70AD28C038F94CE05C
4DEA3B0C19DC237305478E4591546AB2DB367404F6413C68DC95A42C38CF5CB9
8B78E48E89354CAE495A1BEFA2CACFB330436655528017E55A0CC09CC10E6E1E
402F0FD8AC2F1B1E52453F4B064C5377945680903F62989471FDF572179922F6
E6EB8B22C7876017125F3DF2679109C5BCB744949434242D651BC5B8F4492497
51E262E5EC23E54E2D2E41B96BCBE035D99974A82E8499AB4A58B288C0DD7AEC
8D6A34F5D36EFB22C213F5D3CC1D6077DC66044CB9766826970D7AE83A8DD951
15B008682555188274028D6F17F86E105EBAAD46C1BBD0A6D3F1FC4D89A9D3A3
70D62E2DBE7E35EC4EE82BDF7693801C513C5DC62B722D20FDD70C0C8307DAA2
E810486B0EB0525FE1A4F80216ABCBBD046D3A4517FF40AA4CC3C156E6DB599E
EE128D8ED05DEBEECB6C8A20EEC39327D338D64AF70644250D23356B8FD3E9D6
E78B6744F2169192CADCA72F59FD87C134393C559814A28A4C5B336ED87E46A7
9836991C27DF87859C0F9435B2B6BB46ABA36F0E34FB2D51CEF075227B9C5ECA
9AD2C26CFB2671B7E46EA3C1632AE5D967DBBE857C5D6B7C58A64F990D8F7522
CEC7DCA12A8F136694BBB6F25A3E483EF5ACF753D10039A65E339F348E8D0A47
CE217CE817379335BA02D1917B5A247894A94F80A564841BA7CAC59338115239
908A4F2E8AF81CCAB03988536F114328A2B426EF625C9B2CF87E3639D091922F
833F7FB91F64C9F59DF6E1903C24CB104551DA35D4537A69949B2611282A14EF
FE08528DD1963C8B86ECCF6E7E74918D8DA19F1178915F5EBA251FC586F55A3D
DB220527B63BFE3FAE4C2573F62537F0E27CB0F63E132CDE4797C66ADB41E346
42363DCE9B25CD64E26B571876139752105D613907426CE43D6879B5EEEDA9C6
0653BC2E160AEED8CD8B005BF1075D65EAC8A234CB7144B0418ED4FFC62204EE
59B615B9BC228DE34A48F8CD44EBCE4F32237573948B1998B1F41B3E09AD842C
866EA7EC49F053865D1EE3C93011077704C40A888F4D9C535970EB9AE66C0603
FB6E1E127598DEEBF39948FD02FB3C46E925CDFB43CD103ED7A15045DC23F5F8
D3FA731F13E9970E9F54EBC3D88145EDC1CF9CC9911A89633AFACDF6EF4E8ACB
B78E27C761C3ADB01E2C536BDDDC2C15FA5599C4BAE018CFEC5EEB6DE08FFC8F
31C1AA1C274F75B2AC0A99A8DED0993DC31D453EF2E1A4050B18DC54EBA9A126
C55D861ED537D9F0F7AA076493F7AE1806BE73E7DAD8733B30B30589CA86C7F7
59B241C2DCDB210BB8ACAF33134670A56B4B0022171D65BB9D550DA757F43284
23FDEC009C19BC3D715CF3A6A684DD416726D950C767A18EB4A73126FB9CEF2D
687E57E6209700276667AF6067BB745167EB6430C793305832556D3AACF38D73
FFD676831FDDDB63D65FE9BCD88FF93D2571F0087968CF1D0F160AA959C159A5
2712A1EB7CEE271E01DA12AB7EFD6BEFCDE74C7CF86DE95F31449EF3B85E9923
C16D7CBDCA866B589E8EE301C0C3F78A6CFE82533F70FD2E30D21DDA99A7680D
36799FD2AC502DB291151026063D95FA9C4112695ED7D67E87CD03D10CD6B9C1
353887BF40AF5C6CB3BD1799DA8C23CCC17B771B4BACE9A85A06EA2CD635CBD4
BB35931C6E71CDE36E3B9358A11A64662AC897E70C8C4D6C0EC02B042F79E768
3739172AEA1433330B0297A206C356F1E8A56260FE206AD5E734E2D4AC63BC60
9676B9023459669D524858D19D92670BB848F347BB1729A8C60050DEA918F49D
3A3C667F83DF6672213CB4858546E1D2FF98739616C1B8AC709A6F4CA8DB0A43
D004ED83E7C57540DBA914C9B682E6731B4F6C5FD1F3F0951D1F1361345E8C86
7B2C24B9C5AB066A2340AA317E813E0065A9F726733BB8389E3BFF0B85E55BFE
2BFA16C2D2AF8E5B34F4C319ED9BF90C960B494EA870F56931C966CB8C3D0E66
E1FC5A15D35C56BB30CDD4FA58986F1CADA43BFBE3C389C0F40FC402B82DC4DF
25DF99A390344DFB3303DFC69D41C1F70DE1FBAABFB837720CD7462163685336
5017CA278D37DDB20C5A1396147BF6F55E59A301CD703C32FC99C1091EABAEDA
75AE39BF3015BCCD328C206AAD807009DBB5020A0A7D23A4686A57F418300C43
88119C2EEFCCE2A4929508CDDAA06C54247BD18BD7929F459DA2AE50456E909F
48A9BBEBD7A4026039773D3C5E0E4B988D92FFF5F2C4536E7B552A0D65D52F40
B5E3E9AC3770DC9FF29EA00CADD6DD00D5ED08354512947F2E9232CC9C99CEEB
5A510E7DB8A90C1EB6F3ECECA1778BA791F483338D071456368025F0D5BCAB0D
85300C65A8F6DCD6DA42DBBD9CA9208B55FDCF4C8292BBDBC4D06850974BCAE7
7B3F6DA46031EABCBCE4FFD04B65A90DC27637FA815F804B11561F9255495E27
6FD42CBB287A589532C18C8092731EFFAD79CD0DF76ED812D3CCADB50D682C9D
9C9F4A1E1DEDE52219EBE84EA7456A8928ACD368E4444D51701A891EAD1A470C
FEE399F5083D5C1228DDFE6D029C2F3B2321510EF70C31DAAF85E3579F5F3C56
5169C4AEE3E5C424BC2FEDA4C1355F1C6D0BDCADB474C59F02AA04442B7BE638
1C3D50EB7787FB828E84F36DA22E5075100BF0FD1E9D43C96662185BED6A5627
8E778E2AB2DFE1C966DC632D78B86D87837AB62AB1411A0D3CF71A53C9B51115
0AD8CCF0C65C476AE28E6D76772EC50E23E8C30D74316DE5428F3AE2B1C00129
77850517B304C4EF9631E4FAB9AF8E7B6FB6842EB3DEACE1BEDDBE16D5B3A382
1B2BF989F774E83B86AD1330B1B038F9719FFF3411587C9B4F882495861D8AE0
501B72D16CE5143619F5F336105BE98769A6FB784353B930DF34528BB41344AB
0C4D5067FA9F59757EFAF3F4E035B03092613AB63239A04E6A8F1B9CC9BEEA1E
F533968D5EA2D67FA6E83BEB468EAA8FAFA60F8469E4265B48B71FE1E3D54018
02881DADF17DC9BADEE24E266872CFDA7221342D900C1CAD5252A4A6CDBDCBFC
A5A1B6D5CD5D46AF9B7C3E63DCF8518ACA9DA26EDADA0F9D387BAA6D076DDD2B
8C1FDE64E7247EFC6B98D293E0E1AD434F469CDA4834253CC1B0967D4EBACB5C
387A789EB1E6F3A07BC843D0E3217A59D699A7596DAF3715C1423A07BDADE6EA
9FA085F09B1E71EFA23AEE032B9366603552225764DFE4B61194583BD5975AD9
D38BD9F7D6F2388835C14F92600FC0596C54F34C4CE3C5A9FB33FD8A1CA6C5B5
4D1B84701A80BA4BAC9080AABFA7E7D908B88E5ED56D7E5697A3F31A0CC287BE
900C7E0C422578EA46B3C264ECF59106ECC9A5E58E1139CB6E1BB31E4C91FEA0
551FA9588E490FF120C6DBAECAA5E528513C90CCE5ABDD091D09115473C6E58F
864A1880A07E8BBC086525748785B195CE91E153849010C5CC109E30BCE64833
823046F80E1A6DB731643FA2D4EF08CA4057B05C0D9446C2E91C243E8A9E2306
68B253767707C90CD8280B5BDFAB21F4AA4E4565AB640963E988D4DB38D84703
8D6E711433D674DE6CB9FD3E3756C6F93C6B7AF149A40F90033A0E9FEE3C6BD3
C9C325C1620FE474DEC026381B17CAF2B96CB214C9CA9D87F2628BB1CA12562C
DC71E69DA28A721B958C912937D5374361F56F505862783324C079AD2DC331D2
87A3EC0D18A80E890F0F17C50BB65452A3FEB2C13EA179ED6F97F4BB83BFD84F
5604F3231220F021B087894DC8AD8E0A600B76947BE21AF8C23FA04ADFCAB9EE
46D979B01F6062AE955693F99E17940D4524A43AD3BC25FC7453966BD1CF94C7
0E893C0FEBFA1EDF650E7082661851B3D94D71BB20065BB45D78B28BA6B41DAA
D5C685B385204CCEBB2609887B6C87778CD9E317B4D8CF766FAC0B13656641A8
198267D8B3624F4EEBC57C2ACE3B88F83822E2237F40542ECEC9044CFBDA9C29
11D23B572D2EDA3C1BF3A4AF7756D331A0D16C81C62D56904C38E72966AD60B0
A25AB6E0CC463C75D4A3BFE3968C3C602AB051E8D3D23E92C5BCFA21B63EEB01
29A68E79D80BAC2051C1B84688A7A11D282A5FB792E9EC79DFB8D9C06C551F6E
5386F63973DB393BD9A291573C5D76ED794DFF890B7875476048BE61E9909154
53FABEFEA16E8730FD7766DCCD9B30F171DD478EB0EE8869E09A30A30A6993C2
252EDAAA0E8CD7D72BC6F8BDEEF25D5BE3CB829BDF515E73B1DD6B456DC6DF39
9038226F37D1E01A1F28F3EFECE7A7486EFDF79B5280BA80401322C5F938578E
A24A0B7C4CD6A03549BE56BF23FDCD1A65D43D7938CF084679F3C39A0F9F6159
CA5418F9849B809ADFD884B29F3AA1A83D66B7961AB37583B92D7ACBBE20A3BA
4AC949266B8C73793C6BEAB36DA23A0C9169195A5AB0CD2E925872B74661AEA6
A830BC00A3177A285D51A773A82D1A6D93B57E49985F2784188A2311C2E4B0E4
54320FAC1958CC2A46228F2F649CDA1EB60707AE4550906DDFBF83E0C944A613
283A3AE06221C064DD0EC54E6C0D5127B6AD09C8362A5CE298CD27233D6640E4
58D1F505E6CE8AF36C87E92779E0F0FB273EEB306BD0F99647B7099466A70FEF
CE708AE7F1335B8566833DE7898D6DF059C7D3C9C89E8E9914113E7190CA6A6A
D591EBF84EE845415EB1587520F4AE27E487510116738A58FA5B1D2A8380E74F
8D4D4F655095736A1E406E23B9609354515AA0B9BC75CA6997A8597958DF4FD8
5E59246406595348D17C13FD1111B3928BAD67CEAEF1F9CE518405CFBB0A3A7C
A70E06F7D7C2DC1667750DC192E441E54807DFE54D1CD4782FEC961B121CA780
807CFEF3675516F26CE2435AE530EBB69621C1C8E4C08E4DF88F41D7B549CBD3
338E7905D68590242D4DD037E421FC121459AB521197C025E0EB380F810A7AF2
8801B7E88E6B711FA5428856EA691294ABFEFF3DD39C820E20F572838173E016
301C195A14211C0420B82912C16545B3589D630B96FBA2941F50E1402151716D
F5E919B9FE119CA96F48E893F0E3E4479B84E6DFAF961CA07C046C7A7C18260F
AF3F74CA4E7078F78CAC4C459B2A23FCB83D29DD6A503533029A2AC8F86C27C8
3A56A8BA25972BBDC1B4A9576CCDCAB33F26157C2E8262F4B76619D36D21B4E7
9A80890CF6721B000F727A32E61DC4CCFD701D62CA3B958434AF4CA83BD507AB
18E575BA22395D559C2951DDA7599C1003EAC0199D14480C4605258805E907B5
DC57F8D8CFFBF54EA6EDEB410BA300CC8B10617000061C8B90500E49E17382D0
8C0D5622CDEEE963D68852E85BB90D28263B25036466A6FB7954A121E29A9BA3
1C6F2E18F90BE5C165EBBA542B434DD431C1543F35D35DF726A4DB9637BF8443
8076B180486E2CB6B61BEE18D69DD3BA9D7C814DB6CFEA5591D8A47CC8BF227C
2DF7A0020BECC8EFCFB7BCBE60AF2CF366C01AF7431DBA6E47C7C8C721C7FF29
009CA25149FFDBDCB3DF5679E4F5AE3F22818B6DD879E6E0E29B3168DDF9B515
058D83E244CD7EFB0CED4F37F9AED0A35BB78662E9268563B9257B9474B01C70
236B1EC8B524E5587623629E5F596CFD8B5A892521E44C0490BC3962795B63F5
67947DE38A8838F00B6EF56854606944A8B9B9294AABB328DF0A5213BB4FF631
08BDDBC8D90F84C50785BD1209D752DF4C49FE6D60906BF455ADE0F5C90F0C76
89A067DD916AD7869B18D9841B36B0E690A8C48215153C86ABF2197520623B10
942BCC9C6A85AFB467904DCBB0BD5C88BC32F40F313C69E13979E9D74224B4D8
C9D587E394C6E8089A90A754D137F986C34C3A29B5F8E8D7BCF355B159F391B3
4F09E5AC07A9886FDA4C8F2BF4D9DCAD4E15B3A21A193E69774665F74B4E2E8A
0B5F7B7173848292DEE31055BE3E6E0BBE2BFFACEB0D0EDEA5429BF2A2E4EE28
37BBFBBB26D78BDB9FF79741E8CC8D994670234B48EF8CA08CC66201E2F0C8B8
A401B3683115E2658AA940F9AFEB7F330F0E4065793727753B406BEA1EAC80E4
2B70AF08A71F0CDECBC3DD2B7D3ABB57A8103FADF86F980A9C11F20AD96A98A2
9E225B49693D90702D38817D8349237F01E3CD7A2EB922AD10B8D470AC41FD32
074F47FCF7DFCA37C4B1C45461D098452E8A6359F265221C6EB4E8E080FB9191
FD40D091FEE28A3D26DD27A2638F2CA2D65736B4F1E4DDE4323ACD5386256656
EA504E0EED6597602AC96EF9FEFEDDDA2C28B96BF3D96A152C14A09521108569
DB086BBE5107002FD483AD64D06B9A2E8A325E34E321CEF1A52425B146DB5650
640D810674DC2B066EDACCE620686787BB9762DEE8F3EDC45D6046C9F6294727
371739AB8878AE200FF49F73840EBCAA68C092978B0876AB457C4C2B786F1D52
2A57BC125EB8C309A4EC1D5E7CCBD86562C5A762F606E1997EC2873A80072003
FE150689D8D41AB87D2E0EEEE5BA78F861BCA1BAA562C59464C85A5C26277FA1
03AC6C4B827318B87678DBB0AF95D413DDD7ECC67156F847F3AB8EDE8276D6E8
2FDC734DB1E015E6E6DBAF122BB37A5B6DDE4C7E893B35F7BDA132A0F71BB091
EF6696E3C942B065D38228DE8F46744DDAC95204BF389BCAD03E0B8BBD050872
1197970FA9D3E7D7A3D78E8A10EDDC4FB62AF980AB1E292FBBB86D3FDA5F641E
50E08DD4DA8CECE50609A12A14A930352338DAA65D4E29359B597B72BA5AAB53
8A4DA061AEB40D58F10DC4D84980B3D8EB28AF63B5C6270EB797D28890918980
53E8C0153FF3D5E19CE09D58C04679FB80DE830B3D5A73EF192BA254970B3F4B
74DD2A0CB64955315AD8A7E068E3C99839943BA99838E9C5A98C9B876A607972
7F78B018CAA146BFA4885090D3710ECD38EEE982975D5DE8434F18AE7F331856
8F1FF2F434283A6B7F0AF0439EE1F03583659FFECE6BB55FF92AF29EF6A75FFD
9CF1AC9B698BB667B79E45D9E12AEA77A12B840A55D80B59F25FE652AD1D9283
86135225BBBA9D8102242C2D3DE41D4BE83EEA9242E1370A1DBF8AB88DC5E92E
A328F733C34B9CCFE051C097C5CEE0B423D367BD5ACF690823E284BACF9A6618
E9C6ED68E11A4A59B1F8E08FA7CCAAAAA8FC26145A733498A6F8C5A1F2E6DBE0
8B102B89E79B4D76D4AB705A015CE8AB20DA137AEC93A715D7443032221E9969
89600CF6AA6BBE228AB81C2361A954D6DECFFCE4FF508984119EC4C3F893B5EC
6EAE03392AFD44290250CD2348264F5277BCE19B4593E07687AF1FD381B90091
8646BBEDDDB2B6D783A37AD74FD25EDFDB5B7202355DC65E0EF29B1BD34EE6A7
658563F6CC7E8A6EBD35062F309D923CC52551FBAB385E5519F75B908EEEED67
2146615F50915241E45229E74BADF3296340E5CF8D9F83F2F073461B7A3AD6DE
8E66ACB5AE6B35D5013BA5EC2C9D59EE89877E2E439E6B8AB2B752FB4964D902
77DE869EB37346059CD3BAFDE928697D5C481E64F72E4BB71318E2F40552539B
772791F0BDCB4DC73ECD18E3B12545954A3177B9B65B395570B3691F77D26132
6DCE4A77117E47F698A9AB46B8684006FDC2F7DF4CEB622350E02E9D4C1C96F6
D7E2EA2AC3254C4681220BB40963198A39CBF469F9C02CC68E391F0FB763EDED
36D6A41C91A5400C26FF78AD217ACD92684055C196A28FA8888B3AD4A99FDE56
4EB2D6DA4C5AF4AFCC29341B62186500322CC6B84BE9C3155862BAA8D0835C0C
B388E645355366DDC114CCD588CD917DC0E5FBEBD2811EA97021259D47ABF89C
BAB2639B7F2540730FCF91CDD1A857949EE4AF39E7EBA1033A14A7BE25D490C1
8D501E0B52F4922E42DED7F7BAB897B98A4AC5F7DAA5BB5CEE2704D5648990C2
9D8B3FA1060A40EC3ECC755233892133003E5F8AEB243B07533D4BC5C127243D
B1E5C0ACEEC376A46AD55A42AC887BA780A08C01FDBF09C72BF21FD36A99FCE1
1960061AB2C176EF6A4FBBC6F67EA49B597F07C18E318B9AA935D6BD5FB1719A
3CA943A4175FC787BA84F2C8F92BCF9F28274D34643688D2DEB31DD3366D2788
942F106BCE8FDC92B3C328577A8A9151D87621EB6A7D4880EE67DC706517520C
B01F8ABF13E7F9DFEFD86CDF12007EDEC50F2C1F65B3704A0F80AC1EA5F1B626
9D3CDD57B734DC5D6A39DF0CD05F6976E5D276E71D50974063CFFAF0A7A4B199
129BDD08A10D0BC1203D16821BE6C6B0EA56507C3D9D0FACF41F0EB01756C3B2
A245DC37A0942290850D9C69BDBDB9EAA1672ED8578B7B44630A4F4684D7E1DF
694FE36C55D6154E30B53EDAE61FDD54C721DB105B69FA61788AD17CA0FE57FC
FF5395669AE385D42CE6B2CB1582CE1572728B5D41EBAF65721256BDFC0C92BA
37FC4ECDC885A59504DDD15553271C5C71C2D94C9A0F6EEAF3F6299107E57596
4640C5CD30BDE9E574E7F2844AF248483D7E245DEC8E66D0EAF9C69AE053F2F4
29ACD2F616DFD723D2D3AF351BD79E14DB42A43B51E03AC46D341B8AA4DB4E64
901F2729FFA7CB44407E639F37D70AA372192D345FDF723046EB54F61BA29351
84BCC82061AED8316ED1299FEC4FD201829F5F2220B3599B69C1B23C034FC8AB
0B66198FE0F470D043FF4FDEB4A6D228514D0810BA9E24328E13C758E5D972C0
3B06E1D5FAD04BE7BB39D8506DB002C749F6F265399617EAB8608A0377DF827F
6F5F7EA2AB0E3FE40046CCEC8515940D28BA67525034BDE8AE2CD032FC478D42
EE51D27EF12968734DCF60929177D7242881787395916C421D27476E0E417ED9
A8ADFA459A345F2E7CD84EFA25016979E1EA80C8B1BAC97345FCB5C72672849D
72A0C3FE1691E2259B9CCAB393DA861B4A3B14B408BC130723C89426138F6622
47620C9BEED12F6B23ACB6299816385A1D42188B6FA31CFAF9845C20048E3662
3D54A88F623F4C1A38F0F9DDA24C0EC34BB5589E3DEE6DDE43DEBA68EC7B27F7
90040502A71B25DE416BE0C53F48BB7F2C119EC5D501FA082C37547653CB9E36
C82E3A626F403063AC5953D6862DE492C1ADD4C6A4C94D773549157BB1811592
692FCE29DAD4878CB7F0B04FFDCD71A8665E629F112BCFD867B303764CBF8246
FDB259960B8F5E09438D0619CEF838BCE50EF1BF643B3067A66E460EE082330C
C3A0A7CED679B25D1A087C4D442D620585E0B2A421E67163756E7D6302A48099
A071C019AA695D39BDCBEB134FD927C8B2484DD6D467332005E1CE7E1A29DC1D
DAC30D0632CDFB407D0D566C8AD7A54000D6CF3248F9BC0EB718E3E732703AEE
05607CEFA1BC38256B32AAA42ACF15551FC7012CD3E0C8478D41115AF42266DD
6C59E3E8BF2A26A93FDD8064A718FBBD92634BBF1D50E0545AD7D6D1E0AEDBB4
939112E375A58B0D5B8DF2029870885CA5B3F6E908B30F7A0703A6D7697FE4BA
97F4D89BFDC30AE3CA29C220170E7C2D5FCAFD08679431997019F6BF954D1E7C
0315B464CB6975DEB97750CABA4DD62F9A85D8D2A693FC852F38406AED8F5626
EEAA152B056D03B5DE120265FCEAAEE35A0660E2BE6BA5DBACD93609A652673D
702F020D35857D0C2A40925151282E2ADBD49E282051775B19A0D39A5EC3F5A7
AB5A87AD59E9A4AFB222262410ABAAA84F9B36C88E5F55A2965EA9A6F5825C82
46AF65C0C09E423F3A23CE5576B83EBD610EBDE54973D78E64A2DBF6152A1F34
821006ACBDE624E1A1299E3906C7431C02EFDC8FAA3BC1611F0E8102D45109BB
E762CDDD00DBE62724A87B95A021231A6635349B2206B6480D945EDD5EB69556
2CEDC0DC6BC1D8618E50819AE32CA343946B364E04DC4EEF2BF3326676CA50EC
4456CFFB992C98F917F542A44F56DB1CA4416C53095E165850EB1C195B6CB2BE
B81718A973376CB06E5A6930E2C2FE882B7DE39330AF7350FBD939074C02D840
DF3DD8442EBB0717E1A9256553939F5FD4495ED2CA140BA2A181E2D73B384CF2
CB91D323CA1DAC065D2261A987048B8D3ABC9019A343835CA5B23A2B75E5FDA8
5919056A692882C18E4F17BF8987037942B17AAE117E1D6744BB07CEEB0F0885
2347B1007F623F01BA1BC5BCAF1A13EF30430CBE205D0D5C0772887D2792A486
CD78EF4E1661B31AE741E30CAE2336808E1465CF34AD809E7CCABE89F040732E
CCC956304AE330313403A08CA34B13DB74F6D95666301CD9AAA3305D0F8713FB
E34F250E5A0D4C2F055DEB56447BC88F5F7DD67B4F5DED1A4F62E842E6719B77
574E3FC1AA2A554DDA5DCE7543D623EE509F84E37E4DD87672765FDBC0B17EFB
B0AF68A80D5CC9B45D86C19505F0DE6F0D93D8D92E51C3022844839D501D55B5
B86B2ADB16418E8DDCF9285E70083A2AFC792F5A46F7AA363724BE654598AD93
0B0E8B06F47B388705F91BBBF678FB257AFDEEB7C34213B7B1128BAD9C3D65AB
554720E266A917B512047A4C33AB1E978305A53CF66ED62210BEF1FCE64FC329
029931532A43154F9464583A968BF45F3A3E7B0AF48455ABCFCBF89B0CB31874
157035E007668C7996F38FF7C9AACD25F8A92B0245E1FA0F41D80FA07B11155E
39D3EA9283037C80F6FACC469E57F925C9D66B199AC0CC8CA0B6DDEB74E0FD27
AE419F35BEC93B00D303335690F9C8BD621AB943889E9E81F3DC34E4096CABD8
0846041BBBBE6421C73255C71F67D26CC77517F8E7FD60C374A61AFE8274ABD3
56E89A79C75C7EC6E460C95E3259141F7DEE6553BA479BF595A6FFCAB02446AC
275343361ACD16A629AA086F3DA5B48AD787C5AB2E8EC80E53729172C0F8DFDC
56F507303461B58AD984E125BAB13CCDC566690DFD3D65E2C52DB03494264720
3F08A72E49A95D1FEA56385535B4E11FBD1A952DD5B4D1FD9A508B75F9611723
20F4C29E0135B3890482C784E528D39620FCBFA72476FDFD41C38A9196337DD3
075F39FEE4D2CFCDF3DE81A18471D9C33F25102D2D0543806DF74AA75A6E00EC
7658D59B1D6E66C03F72F43FCC1C94143D84653482548A4F84C5075046959E7B
C543396D2444C0206E571F9CADD4E345615C67D5BFFB7F5915FF366E613105D9
93CE03AC56079E2A178CE8319A456176246D857168A6C9C736F201E0E6445B44
F648A84651AEABB146FB9376BC801C12F79725029E72E1E65A4A0778A01582FC
8505BE7B5EE2B36CFF00F85F7D5621BABD420EF06C7B7A6ACE3DB2E279296DCC
FE9A4E53C140C3210CAA05F2CF23FFA7E4ED58C7107841AFAC1CCD4338BA688A
7D2B5D48969ECA35BE609CB64DCCC5DD3808286EB9EA0F5EF2CE3052284C856E
3B1368AA6EA79EAFFF50F17A274430E109BC0BB9750EFFB4777CABB78E5E6AFF
B2FF5B9306AC20BD41F2F3494B8E011ADDEB528C0870646ED036FA01BBE3F270
5BB4DF44F218464E2ABE0BA3CDE4B1738A49E6302C5063B2674309A54DC2B989
5024FAE6EE3AF85762C3CF0262B1726A8EE9F64AB71892A20615D7287ADE35EE
53873E0B3016E48C3C3E6BF3D98342A9F41931CACE6E6BB3BD8FB9DD94A615D5
00276F07B04B266734026E8A3480FCBA60CBD7B8AE32AD6B8351900FC36459AB
99280ADFB5A864BD065139D3F9009B1C26DCAD1452B7BE17728575860962F06F
EBEAB4B9AEC9B3200AC3ECC792ACBC7837922882013A8FA74147ACB27EFFDA7B
CF0C3314C8A07AD37AD38DD0291EB113273FA28FA9C91ABEFE894F766BE107BA
B38C68039E3C429F978469DB2A6763EC1EA86F7D4B5363EE3DD9E69227D0F5B0
136D5505790961593797C382B1FBBDD8DC6AFCF972192440F64A25684A0B4B32
D869FF87B168B89B0C17E825BAD4F233924615BE3470DD97DA2260C23F33C581
FE5A9310F1F7CDD20A8612ACD7753C748AAA1D654EE7C1BEE6CBFE319D61B8BE
C0FBA1A8F8938C89727A1838EF2935BE1D3C42B0A3D9506D71B6ED9361173E4E
028D117680D0F8A46A330869FED3F3A110F4D97D7DF7DEB0D00E56C99273C5C7
E3F1538C847611A863EF2F03EB86161DB0BA5624FDB50E51C621A17DC8845165
8803F06B0F6392266F212CF5F519D30CD3E0456625617BEB889D3D4EFDA2F3EB
DCA86FD3C41B473CBCB73C582199CAC0F5E2FBF40D46F8BA7722B8197C6185B7
ADC7CCD58F68A72B76DEFB2E76AEFD7323FA93CC77BDA50673F110EC1E1E3D74
346D1DE1546CBE39EB5CEAB37D72D0612C28A398F3486902E8B85F278A2748AF
24A4BAC370382EDAD88C251A8F9B10A1AC0D797E812C3F1FC8E27AD32B5603A8
5F00E2F4F1207095ED190ACD7381B222ED869DD9F551F26C0A0552C20F94082C
03630990FB5824848B198442A5E44757A66ED523012FC45495A59440128BD060
727E4959EE82426DB63FEE07EF3E268D405FC68AFB5D6BB1DCA9FD280D470417
806E8015E59A4BF323BC5D2B66E80F5E30A6CD4023591C0D0241411D688DBEFA
09046DC539246BBD22B023976A73E7BB48072EC0123696EF79AD19E4E1DF6D12
6A3353BCD4A6B44D76B6DD7EBA4AF945A318508CDE5674F1AFA4E8210A70CD8D
FAAA37632208C363A8EB8B2F3E37059ED7195B37D42AB016CC1A385134D4966D
C5F14C6B726F7D155A839CACD852BECA0C79BA3F01679693C0359FD391DCA391
F7DA75E1C22AB074DC3E592A27061C78B4AF4CFADCD6AAABC5B775BDFB46C0F2
5E5213B1B6F09FB71477B150CDB03C1B96F22DEAB43403EFE80780EC5E2D2E82
BA73CE75D5EF6D4B5BB287665BEB222C6F8528BBD7B767217A0914E7D829520A
33221160BF14629B93BD8E7DD6748C89F2EBD72239AC4B85A39E318679E681E2
78B37B2C8CA583A0B77F8B4740BBCAA51CAABE199E0FFE1755C8E8A779A3E22D
BA764712BEDF1F7A93C5608794B2F68E51FF734D9F1FECB3E173C71B444B480F
D1A0994EE77475B1D7F37E8ECEA11E937E05510D9374A92ACA1CFBD0E76167A6
7403ADDDE25715000342E2075C7E459163D582DE4D989D88E041C448C192EB0D
C8ACF808AF8FD7603FB49F9EC377B55D0E234A19890F58BBE3AC622150887C28
0BB3378DB67CA7E35AFA5D9F9E0C3C99F6794AF679AB7181F09BD586F5FC08C7
BA2DA159B90BCC6DE3F4C06BE0EFE292A95329802B063A7AA58F8D9214D2F128
D2A2E5F9AD4DFB1D87226FD479D241F3BB4A31ED2D516100EC77DE8B3B7EA038
8C098D2CFB4AAA1A3BD214C58094F4E887AC6C42956BBAFC3708B3E83D87F303
2A491B8E4091FF4BA380A37DEFE812E6CB938DCB9B5B0D56020364C928881EC0
20864DD3B434BCB9057408A569722B1A672E15AA97D1A0EAB7A1C7B70B208A01
9AD882951B9DD2AC7C0EF72296B666467A6B63A3234E741AE406380920B7ACBF
9D61A3559E1DF6C3BC4796F3FE98C777ED053C7EEEBD0E069C4664B97BA30D04
35EE92CE39236F897F0796C3934663312660BF55589D322D7FB05C08DE65BB04
BA61C55F533DEA35C4AB77E43C6296D31AC77C9C2A9A105FFA531B3A8C5C7964
22335929469BF14F4630B0025ACDF388E115885710951883B78DA70864E46B79
0061F308B21649BD42B7D981F2BF904850C3F692AE8C3C7E37E03A1F409D47F5
FBE78ABC7CA330051BBBBF0D511A166626C5743DCA5FF664C835783D7EC5CC93
514D7130A3CBC0B26E25546ED182CF44C60994052CA6ABB7BA0F34B5F9DF8C62
BD90BF0E5CEF46B0BFDE691ADF5758354943E10259BD7368DF0522B8260B08B8
9BA75466127A6FF6374ABF23F60098902A77C5AD12BDC626A2C58A15B11994F4
260792C83C8D179B2AB6EE7FAA75241EC0C1E856AE3170AEAD7CA0A56F5A0995
385CF931026610EA6C3E835EEE88A71BAD4A9B5A608CA09D60E4753FB22513EB
14B80CF2D1C0743C06AD897B6BBB9A3BF36665834C919B58F2B1A5DDC8A24CF2
32CDE6A072980826DD11659ACD7E48006CC41E29175FE843A0094A982CF98EEE
08D8308E4E5B38C47F0F1B91F1D3CA3FF5C7A2472D2A0A6073BA312F7FD5668D
72BC6A4293FECB113FD04FA98FDEEA965A4ADF0C27B1391102BAE316DD5C4F97
C38761A7597B2F130E12E6F7631A782DD8CE00583A595B8F457AEF61FD4CE1EB
3303E254C6D3ADB33DE0DC4D0777A9C29912929B5A8244B25CECAA7A16398DAC
817B792A3306122C1200632F870CEDEA118CD93958B238F2A42A2D4A2E9ED561
351CC279DA9B50D4CF167ED647A6766918DC724B6B4956630A9A87629ED04E57
2EE4A8210F884594C3C7728F0F57847652C40526C8A41E1FB9D0FD050E565532
CA6A04B70062C170FAAFAF7168EEA1B1602782B51898145F437F5D2BE38BE7E0
18B1B25968873057BC3FF12DB92C4739C0A979051B1E640F6372F80D3DAF4F77
F036647B54FD909A0A813F9CB781AD2D325DA4F3D0B2373A65A4D684953BACE5
D144A14A5CCA864F89B2CE12EC2820117CE8CECB8FEB6EC56B4DBE2EBDAC8119
63C5F397430C3114913C5B45E6F3B64EF37DB2CBABEF789B0CFC2AECF0D5DF87
1FDB42C1FD9247AA93F0C0A2B4F9A89B522F728F171AFD0188BA34883F429F2A
522B637FA313877D87675D89F7E3A4F60C49311ACA3084207F020F3A2DF60FCA
EF835E5B5C45B5253B51CD9D5331FC1B11AE124F237F35E2CED5DB5B6710CFB1
7E26972B93571D1976619FD59637EED7F0677F7D831906828DFBCFD615F06016
0BB067B4F970E53B80B6E53063AF896EA16DE64C2C0902C815F99393F11D62D2
2A81936D0EC9653E4422B59853D9E00DAAEB5ECEB8E3C2FB89D34C5D90DD663E
51015D08C67382C9406ADE5319305A400B904E9BD2465F0D674FDD9C976098BC
E158535374FD1E0340514194F44EF3470CB2F8E5BFF2E260751A7F3BFBEA2DA8
01A69BFB518160625310AFEF192F7A248C7B7F89484A7A6A1744A74063F2ED3E
0598BF1E1F2A273E769112D7F832433E46C9791FF1C7A974E21DBE2B2A20E7C1
AAD5D7E387F9C385C187363D834505DD3088ABF5CE40BF18745C1E0C4A2041C5
28F37AB30FE60F673E0803EF76E396191435D252ACF59E9C5BC45D5CA1EB23B2
EFADD7986737DD6E7BB845A6663DB0BCB2D6902B4873257354FD935630D4BB1D
431EAB59C60B99C8C6671078B60D4D835D9AF20483D97B24A2D8E302F3EFD54F
72DE5DF747C492F42DCD076A6F4F11E6490E86D5FB312C0EE8DC8E63E48108AE
87023F043854E72210B5F1682BA1085B0DD8C13F27A7233204FD4D55083200FC
3C8803D79CBD6D07338A05BC137CB8066BAA338730104B4C89A327E487098C64
8444B1C0F8A7168BCCDE05F2ECECCBAEDFC62BD106372CAC114765D1D1F1CE35
C96B5BB15ECA1E92667505640F5670D7DFF6822BE9AB502E29D7085C3E4DDFA6
D763C4968C1A61E309180D8C56C728560EB5263CCE93E508D259A80A44D14682
997C9EDDEE256A527BFF7D3F2D9E350C375A6C90A47CE55B3722BDE01EE9E74B
98EEEE40D034F590B5BFF88A3523CE374CB692F5A1706F4F334CE3CF979347B5
014C51651DB33789570ED4EC833F4714495C94D6E223813CB509398C4C83B3E3
1D805752FEA993670EF731B2F7C3C98F73E598EF698A7321BD2808C8AE2C0BE1
1167E0529CDA703246E1964A5F405AEF50D6874A76E2514C73C418B8377E0557
8AC4795364EE7B1DBF351FD9556EC4198D43A408AFFED370D24E7BA6683ECDEC
D14FC72F2B43DFE0044E96F3BA5D981C6C63859A1670C1A41060903C9E6D04AA
5CDB29E1655A470380A2F2EB1B5E192F93B7C2575D68549A2EAFBE9EC67CB3DD
96EB028486C3C905F08931B44C8EFEA9640A1D2B7735F47E7AE723717AEFA6C0
C532A5F3CC553B31D3019AA97DF3C5CB345CFB3EC1EEDB6874F880BAFBA0380B
8B35508A3879D28BEAB204096B5B005E152D643E237E016879C1CA4E377DDB2D
1F98F705687062F73BA7C14FC9C0A5515FC89672DD760650BD3B29D7CF75DFC6
3FEC9CCCB2B77D672724E99282C9B4F88D177424B4BF122D09F805D781873586
9B427229C4827CEF808AD72F7C924AC92B3617545D6F4335C839439E09C196D6
72AB2EAF59FD115A6E48071C9AB2BDD685FBEEB8149B5E4F65F089BADE0D95FB
FBF682A77552278407500E9917EA9FAF7C61101B7DCE2744A2991B876A60ABEE
A8B04ABB13203B280E12D94FD7179BEF9D4B423542D600BE897E9534A91E3FB7
0CADEEB1C28AD0553C39CABEA6F8FD5019923875C00C99A18BEC36D83D954A9A
64474EB055B6DF39C7E5AB5B1DCE92E7FF9C67313404963A1DB19A5E5AE5BDB2
99EFE0D0E5A359475E819A3979821EC8EC19972105E5D0D7A8AD690838C384BA
264D9C5F5D93D1FF074DACEA1E1DA557C3E01621A973F2F2F5F58A81AFA2AA8C
13BC9E33D1924E1CFE9C987FB12F1C347A48A3395DBCFBA7AF2B97BF29A65D2D
74BD688744BB8E2E43E8716526220C703A02D0946F40664E2E1757A07CC2DE64
3F70DFD46941CA542DA4211AFEF6D49F9F2DBE3C2C79B5FD6732684B503A954C
20DE06B90194DDD875191FFBA114DDEEB431454D48DD8BAF68453C19BED719B3
354D84A1BAF0712B2DB04CB681D71265DBE5375BA67906E923F0B5ABB1FAF958
E2C0439313ACAD9CCA6B2636DCA695CCF744FCD84AAA6D631EF832225B88D5E5
1DFAC2983C88AA22616F18DF99DD56FBDFE889586505428CDCC0F6BF7221D679
103A3A75661EFC2214D1E096D9427C8FED08E36F65C779F8527BC515826278F8
7A2C26EA18CDF3A3818F63AD429AF697F249402C956921317BDC2C443CF3129E
EB9EDB27D5E172796231CA26AFC48C4742D092CFDF7D8D3D9310CB2FE865075F
D700C90CB700F90654B9DB0150F2DC9F11BF49EDD8ECBC95ECF7F3CB628311D9
F9D2612CFD78A7A193B2D48B6225F298F8D0123B7D7F46ED56A0BCD73A10CA46
97231BC47CF9AD41A388091CE29D7A822579E4BC5DA3FD70212A24298CA4016A
E68E66C0486520A35354ABA75BD413468F21D7F1B23EF86FE1BE2D6E594920D0
D23F931FF2967DD40B87E9C43A866D287258B46B9DC8744E250A99F1D74C59DC
379C5FA12AB0C9149C58D166ACBFE64F817AA53FA3AD9B90AD1DECF93CC7F154
9307C4C14F077FB30BE8DF1A21B7B61EBBCBDC4F5A8ECDA4CF98F59E8AC2C899
1AFF4697E1EA7AC2C7D9CF5C307CB46E6756FDF6F5561D8151258AB0820187EB
BDA6F735DDCCBEE6915816E2E5FB576DAC925787EB31D314F967F803893D96AC
3723F5ED6C6DAD39966038F58BAC48370030817BD011A5782642F6EF8CB31E73
A0A209C4D55F80179AFCB7D3D1A87B7D9AA29D5CE531474D6383E0794F50A6BE
829E3B3FBA9AF6C06131A83E18322CC7F1C7A7264828219B23FD65580D243314
D779D21EBE98611AAAC86B8B7351C774C432B7A54992B05D73E05C27E1CB9030
66E2BA9D78682AE6C54E4EAFA6AE5A3FAB916AC99094AE4FCD4161B887388A25
F6E4CDDEE262017A254469843280DDCD39536426349E2F8CFA3C7AE71543F40B
7B0581896D561F81ACA6FD32C83A4BA1783981A12CCCEEBC51221490FE8709F0
0FB69BD9A0CEDD04B7B35D7722E6135CDC610862665067E7248D47B0D9F5C3B8
9F08F917C4CC5447E8C22FAD84EB9D1A790A521BE56EF651C2E9C2A99CB34BDC
A8D9D9D1B0F479EE2AE28414A28C74B4FD84BC6DD92435C5B2A07FD6231FE6D4
B35D283D00D259A308E31D5B551DFDB53CABB8BF216A3B8EC07E2055E029D30D
68FB38A336E86BEE4AEDF272439B34522DF1E8A3B006634437536462D10557B5
FA309FD4024C8029B10422F935538D612EFC8FC51ADFD2700E064C9555B3B70D
2D3EF4E125EE0181B630B5F8D30F5C6280759C1E37CBA13CBABA33A19B712629
F9AC2837D9C56BAE960590B054FD21F077A509D07C678DBAE2C8F844A5D6C32E
2C85C5B683E664BE851C9FC00DB08A6030C95054EEC80B4F0E476756EA33B3DD
B49A081A3AFC49AD2311EB21056C4F2378E439B390A9C2B78856DB5428E1AB8E
2F50456923AD56DD04E29B39078A40A552751435923A79B29200C3C8215D07AD
988B3BE66B969340322C8DCF8709C6DE96202C7D8398901CE7E5E10330B4C9B1
0CAC225CDACC403A06F5457385E4B733E5C83D091D60FC0AC054F7FDB6B5EFA0
DA79E335EB48A834EF79AFDAAD4735E3487A852523055889B51C4DEEA096F424
988B641C11F1C2D6D7CBB300F6BEDD10B46D12F63020BBA560CD9B7FAFB83BC7
686D9A03098C7D105BBB736666F58F9BB7A8E8CE2C99B04EEAF3D5C546DFDEC7
8BBBE386075FD63D215F34479343ECF632D25B93E1E9850BCF12BF60093F5A1E
8C52BAD6CF3E06C91D009608C636AAD39E7FD394E99E47BCFAC319C706F7A1C2
E2851350C7E1296F641DA34DF06BD925E40CDEE61B80A16740E45C8015CF651C
585E6EA74003EA86F1E5B2FC3FB268F6DE48EB74DBC5F8DDCFE708684E4C1D9B
29C74BFB60D38C2AA5727F3916D1284B8B296D5E029CD9CB6624FB5BAC1FC65C
141447FA169914A79AC55F7D79414B938414C49D630E6E1FB45E005321964A0F
D30ECDCE4035E52286DC389D83FD355D91CA2448F1021EE568FC6768103C36E3
F17A741B8631A37DBFF50E3E358F950E6BEDB707E393F6FAA2A4AEF140B89F7C
8CA820BF168714EB71395DEA2CB9CB69F4F99B035583F106AF5D75F694856B7C
AB0C26ECFEAA52469915A12E090B9C6BDF2BBD6A1F27D2FBA00ECC1B9085C41B
5482571DF89AEAC1B8211CA8EE068D59F61F92827161C3ED3228C4C9367B04AF
4F2114CFDBCA350AAA5EB97BEFD9580EEFC719101846F2A97CA5BDDC587881D6
3F04B06A0A15B9FEF6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.0: CMTI12 003.002
%%Title: CMTI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI12 known{/CMTI12 findfont dup/UniqueID known{dup
/UniqueID get 5000829 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI12 def
/FontBBox {-36 -251 1103 750 }readonly def
/UniqueID 5000829 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI12.) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 14 /ffi put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5E0311AE44B83C3E
4FBCDB0B74ABB18FDD877252FD3501E05E597A77D142BED9940318B98D508672
4ECF79C43A857674E4DCF2556325CA8CC1C432E54543F706987376A084BF512F
0E4C517917FB1D607C83E479DD094240C3F309A57561CDF8496722F1D3EBF6FA
45CD3D7D810E2C07D39BFE08C0A25FD568DD37C2D182E5D30A7B2855BAD24559
D455B29B1F723BE1C4F827D72B1156DC2C1EEA76C9B27733FBB23ED36F61919B
4A6E8253C8C05F3D4BDC64B99B8494F7C37E9C19DB6A9CA8E9B0F9E7E3346EE0
EF416016CEE932E53A26599DD8CD09D77DF591A9D532AAD3E321CDCB28636809
E61D9EC969F2E27190A475407B90211902429778103D18665A681B0DD51F6E92
58D1288E2AB3FAEF05854938FEFFD3B4F376AAD303ECD28B23649E5D4C3CB85A
5C9CDCD1853BBF3282BCB5CF57720C6CF7AE468048D7AE5BCD2F15DEC1B33B5F
9917BF69BB64261CF101BB47A09E47D6508250374D00ACEC3E3FE8C5330AD9DB
9D9F60CC170F2FD6DEA12DA24CEA846E25ED6683A213E4FFD0BA239894C920B0
EFF562ED994A7A46F8EE2AF98F88317E513A06AB82A629979AAD3ACE316E7074
01EAD920A9E1D54E8FBD623773429C58A2964B498990E8420E5F7A45B3D4342C
1AC109FA67D4BF33C9D1E0E2973BB8B2495DDF5A7F8E306A0C712BD7A7FC98C7
44B26D102D3CD44A320FE89CBA6B3AB39627DA4679A5BB7C27276B34ED66260F
DEB659189A797BC41D05323454CA4600A6D840CA3C1DC31BB7FEE8DE367B8177
3F1546C9EA98FA9F7CD61F177CEC2950526D54A6E7A0038F2B20609E7BE31EFB
51FDB6829852937071FEAAA3A0E51E625D7FBF2F7C224467C7DB77F7AFE006A5
418CF691841AB7A9923506845BFE066769A01A51EA48840E898FC6FF0ED9C2A6
1DB61E8840029ED92A129D38CAFAD4084B17679A84A262D2F9376363D4B5E46B
1C94302E5CD24CBE93A27319A8F79138414B2E94CE6F78C6F06B544D5862C2C6
297EFE524BBEF0CC2C32F63CDCE433E19B52BF0C2C7064E3ACD429E2466BB85A
ED82C6EDC8AF5D75855B43A61504128F75C2DAF7F5C4405BE36C136CB809DF31
A40E0DEE80C10F6E6442CDCEDEF8DD0C01FB2C035A1D136693D366552862A421
81A290080EB8A3C5160FC2CD760A69F8254E8B0EC8E7280EC33802EC2668C149
73CADCFBD4E56A1E7A9CDA3F6A50E00AA536B02B4BBF4CE60B7A791098C3E434
B5A7F17D6E461FEE23C6C8C148C54D14345DECB7A619E56268131F65F86C51B0
E45860D46A1A798134AB3283BC8B73D9B39EC5D0C1241A85AA46B02E51DE6433
60BEAC76351AB35D8DBFD60C6F12F8B32E08C671E0269174E1E142E687B1C558
5668FDA480255261DC29288FF5ED56B50DD8512BD4948F31F14C71CB4F8FEFEC
DD8E4F4EBE9C28312640334BE454634EF26B5FD02A93210D487AA4F3AF284479
303995AD31F4A6DD2C2DCDED3380D50EA1D8743A3C6561CBF4DE91634374DE87
FED0CF17C73B49060648AC6AF2921D19FFE1B7C7E76AA84600078A0160160D5B
BFAA2007AE70640698BBBFEBFA5C11F351610023F563840413AF6934156D93B6
551069D681492EE73D480D648503801A921E37868B4ABBB013B628772DAC3683
3E44C318352E7700094ED0FF624AE560D2A783343B266FB925AE0D990B65F8E4
7A9725F23F0A08EFA08F81616A5D51E5EC31CD1BA229A89AB63ED782A6D716C7
1F00BA66A3158CDEAE3399653D7A29193760AD92F65C066A4DF35F91BDE771B1
74E17E4879428B5692343AA963A349064693B52F14B09C5F4B329C4AF4078998
D3F6C1046538F989C8AE84AE032A112C3E657907EE7A844B14C6A0FA8C9A1CD9
797E195186C478057525CBCCAA0FFB09F67F97E69BC402F6199B6900D9F285E6
47D359B1728728770C95B1A85E22D2132FDE7075F8FA1123F62504E53AB106D7
99B33689D55D0BC0C552745C5129CEF9F874850240FA6BF5F4779E35BF15A8F9
F425ED40480C60FE3ED85173E620320A462092834C0BCF6EFF9F1D5912CEB941
9C18D8EED5CA36CF2C7D3965BB0929EDBF7FC997A9CFE79A9FA9C54A11E1F421
7F3FA4ABB80A3C60E9165DBFB0EA765BD21846FD1260F1AA4644CBE05CEC736E
638311023F9F51F4C0166733A32BC1F615C8D9256E44BE8C2FFEC45B7B612FCB
21C52DB57E87EC8E166498AA8A4528B7C612E3BB8117D6BAF5CA8F9D038C1430
B7EA8699F31ACDC03774AEDDF6B73233944A1A89ECBAED2EFBD30DDF42821846
AF828EC54BEA6E7312B3255A7F55783C5D4AF1D9780A9670C9C7E02A50535A13
6D957F895D53E4E18A4B4263695DF2BD9626E717D5C3B80E908E59EF5D093798
7215550A5613AB86D67C1F89C95FBB0E6ACCAAB397479D483AEE4607E111EF34
2FD92DC7F991B6AE84BC7CB982D819A17022ECFEFFB981A6F678655A6278825F
0EFB5733C5F46529EF1FBB01C6BA7413BA9211251C0A70A470F735A96F6E0D45
DB1342D6B97ABC234790D346C74927F5C910F71918D615CA907984F0229E3F54
4F5F75AFF784C7A470DDCFFC308ADF6EF43979DD3B54C6A8DF3B53DB783B81E3
9C57413C3A317419C190F207720743084DC20288C1AD08B8B0FD4ED805FBA8B5
BB874DCE4AE93AE3B8A117612787DA6C8C7512191BC36F6D8AA38F39099474AE
CD570CB5570BBA932C9C7A63DD386CABF1956FF87C266BF145ED5D27547234BD
943841047FE9A41C24B82FD3D3EA49A56C56840B1B359FB2A3F28E10AB09AECA
2FE2520DEE9B5542591E72ACE610DA4BF31C6E204574DC78033008F019519B2F
E45C99F1B938D212602E824CA1CA020211420C77FF545DF586702451B0923EDA
CA15BFF98CF2F0A56404591E57F7C89CAC6D22E0FEF9094770CF003801E5CC08
110B272A50805F89C0BB5C2966B9385C26F4A5008AAD97A29408A5116BE613CD
5ED9F85D2BCDE96FCF3121D5EE1D455A4CB03BF2AC33493FEEBEB955EF737F7A
EABF96C137DD84B3EA39C61CE95B5967405CEF17D9CF1BDD1199346F95E77CB8
5FA2D38D858DAEF10D0DD660211C8C4C69EF58B60DEDE48DF76300EAB8F0A547
6DBC87BEE8DD4EDFE3020BA56F362503AFA62D8C13BB270C3884560E227AFABB
5D810B2B092531A679485FCFFB88BA8313646B644A35C413053DECCD4B371450
18F54701F610E52E727AE8D25A8093B60093FAF775B6414F66F43F517488B4A4
00AA4F672A34A73531218601904A7F50A045E80CD804D028EAFF506EDA1ED998
ECF16435C6CA8E203F2A813506F4B8CDAC0A3D69F4B704AB80F170EC87B7C732
AEFCBA3BF4050A9CFADB87F7AD4B53BECE197C10A2E84571A640328B90E9A294
73F6CDDE4F4AF9F1F3A257BD130454CF95D390ECA95FC4221D5041E71D65FC21
8323BA5A3335E2E905E33D5BA56BBBC9CC30D25764A066D013B116E693C56762
4F683F112A572C2C04ED041CF7BB4FAB0D899B3F2679B431E8993A650184CB4B
1B391B39929AF803F868245A69C964B560A274B07DFCB88A6508082DD6092E38
80D9187A146B60B225CA22F593AA6B4B7EE1EE41A0D375C4FA69EC6C8E02B54F
B855D385C973A7223DE22465D039D213315C35F0D079E8CD030F62993495B2EB
A0F9BA98565F89D2E09BB60D90B0CFFFF1F0845810ED27CC8F1088F74D48A30D
7FA0728498E78A381B0169B7678520EB5769522BB5838212D32C8C1ED5635753
EAA3C14E6640BC34D43EC162711996E0CABBBDE0932FCB6B2838C22C0E42DCE7
1BC85E372F24C1145655D59CCD50EA6E1A673CB0342BB744A43EA1B9104CF736
324E367D82ED67E01B0608294A91386045C1564E4E417E1A62EFBC148C0B4A56
73A98AE2F2433164740B839F851F9C38124B3C01CD976128DF6A06FEFE14B960
4573E748370D70F9FBFDBF875584852E70264766FA5CE893F74D0D5884889178
078CB149821A743D797E9577A7D27E7ED607349CB2CC6968A7CE402DF9A55069
4A985B517B714C603F993944CC64083DE3D5F969F9C5913C297E8493D310CA42
795C94740A5E5D3415CE7B4A5AA11A940D93992329D8B00213244405BBE73958
37CD65B6AEBCCB2263B937F671FFF3C6314D400983E5AEB6A34709D854FDD0AA
3D27A62BB23E253E6E2CA994294009B857B5F1FFB66E772A0BF9D83F4F72B89F
51B125AC9E495343C9D84A4BB4759DA4D2ADA38A195C7905CE288FD8634ED996
9068F0DC8DD08F3D3A1288A271E7F7EC4AF76EF6A78C47BAD95FA14A3AB690E1
19A13639774593D77FC1610D7F1E25A31AF94C5354B35500B8E57B0F65AC82C2
2A519581B587F5E3C941734A4269842D38F74E89C2AADB8ADB3D16542B0485BF
BD4F1EDB4064E96A330D735F73789614C8D606DC553A0A2409CF4C595AE51505
CF203817971BD7F9B3346C036A18FECA44CE1C2042BA4E7FFA3FFEB6371A06F9
30082F47FE87B207E13A68BCA122968AD74CF6A12EF6767988F0EB0CB64981C9
30D9717F6C7D07F4B37CFDD68EE4480C0CA305AFA4BD21DFE131D6715E839973
E1271BF576F70C2F8C6827B3EF02CCA123EA46A02B2722E06078C3D9B3743CDE
45B43B561743264277D0D1FCACDDA80E5C6185E90F82D1DA4DC076B6BE49D2BE
F03EF513F1861CF66D2B7F8D52C7A5C21DF1276B72CC1CDAAB5A16D20722A95F
8B1EB6E6B605D3878831204A0EFC95CB3C5B588D4F0A540D466D13B8468ECDC1
DB08D36E7FA19709A67A0FA08421053EEC9068ED464D29BB1BEDD0BA88882707
9F41334C3BD3F995321711B6ABDE3C12A8907F930F7AF490D774A05398ED03D6
789D91B4DACEA3D8EE11C2CD850A6EF4128B60EDE9BD37710F43836EF6D53FD2
D8123F81EC6F01A93A8B36FAE49692E7276F7CDCCB09F332ECE359E3E7DB2364
A60B192438FD158B18CB3EB40FD28F74A740367F02D5CB6B53959A0D11BDF388
9AAEE02F0E96AE2F802FF08BF778F26DBBAC8F5AA04CF3AEB180235BFDE493DA
4D0B13E0B61696A8ACE4FF7A09956A1896B2875E5B2BDBA09DA08B9589957E85
51084D76A00FB728E286CCFD2F53088158005599835B18F6F5AAAA6051270AF2
59F7BF641B0AF4E79F4491725189B89E57CD10B442B8EF89345D04EE3E18EC98
217D81FFB1B473B9562605F7B0AC3FA8CFB798A988E5FF20F068A6B2399C71B8
2E3C19E58601B0AD3872170B0AE8FA33F3A50EC5E67EC22C00D3DDDCD7B592E1
0D1CF31DAA48D10F7C6A56CA052A5AE914EE08CEE011FFF20D00B46A7738C434
D70F1040C611168D2C1851DBA89DA526428E6D5DDA244AA267AE3559B0C7DC8F
AAE1687F823CE628AAD59999E74DFFACCF7D3412B466F6C3A315D8AA3350FB18
9EBE417717C42F3201D19E1870A2A3424E96F1A9734F32E85DF220E08C4DDF8A
AE6F3491A3C805578924F36C146CBAF1D38C8C18D18E5A9B38236BD3E6B9E5BA
595F66A2A8DE9F52C9DFE00ABA5B99806A87D2EA39EF2C3A8D94FBFCB0CB5345
9AC36328B89AA13E4BBFAD70314009B0A2588847B7092C9EB938DD069CFA3679
73D9CF01F9756B931B34E70F4A5F1C41FC577515A5CDC49FE2C9A13D62E7E612
2AA5969248241BEAEEA5CAD34154EF5F9153D85ACD6FBD6B7F2834BC65C77E27
5ED803220949B14126BFAAC7728CAE16EF205F408232C5D7B83AFDB9C2191997
38005204EF424640DE1163B577274FB455EC0383BC6CC17F35112AB638743DEF
9954A5B2DF6A50DAA8662967E8E2208A9D1E3506309A9EC4C001CF91896E79A1
F3F6FE998DDF7C7971707CF7DF7415F6D42EE28620C0A225A1B9E389F397F972
552E566F748613EA1FD417CAA7B90A2BEC1AB07F44BB8AB6ED829F2D7F4DD597
989617E6BEF5E701498823382DEFC2D5FD078DF888DDCA99E62890AC0E5BE8BE
0CB662B561A49D2221847151D203457C797A904BCB5A1D68A51EEA20A167047C
36FF0FDD999E46C857864D1CE7568CE9518230418124EE5E51FD96C0FD8EB7BC
2A49F49AD72BB71F849B112147271000A77F41CF476AD687E6BC3DFDDE0CDE1D
ABE816BF31348D25FE0A11FE7F5559BEDFC24A14F91BB73BE7F5FA95DA24D705
3DA96E8D05B84A1E5BFB0F15D7D4638CE4C63B74404128CF56A016180EAA054B
85FEE6937681557D0B5BC3C560947D456F48D7F4CB7A5EED52B103281B152E3F
ADCE8B98497B74B05096AABA261D2A2EF56572904ACE2866C6A081C926BAC3E0
DE02EBB63FA29197B3812809F08A9E3D5ECFFF751E60F7082749F57352040E06
CAF9290336395684E85FA2446FBF1D0223F74B0D3464B06975010B83D0975181
3DB6C0E2967CFBDAFBD555018305184953487AFAE112D36E696DB8A18F3E3A74
C8B123F16D077DBBC85A226A26D406F622858EB7F1646BC0093A7C9711A1DCD2
6302B0611AC20A3870195D8BBA4E8E4F2CC73030B2354308CF8C06D68DD7FA14
87CE9D6FC7A8A356AA2DC356231B4993655A0FF55AF67090E2947C2B7FB9E96C
EAAF52A01ABA6D69B738D6E3D4B2CF1E037D991EB5943BB0E6AB3868138CBF20
A112805F4CC00C65A4BE86D7492C23E34CC0BEEFAA0403E2AC21FD33D7A7FD09
9DCAC0BE550881647B322FE5806735FD993F5ED7C62173AB29095F67A626B9F3
20829E4788786C978B4BC9BAB9B3A750F130F9D4AFDA6EA3A7DF09D7615951D1
0C783A653F0BBFC23902019BA276A6D7944F1A34C1EC7E2710091C0B94CC3938
01C50C5E4A9C19F47D69074023F574D7A7302565EF9920A8E2A5076E6E3DDD2F
409CF1AB8BCE348FE63A136E03A520DDACA32571675AEB94D761B7B625AF1626
8BA9ED761E12A52C511890DAF1F790857C3C9FD3FD033A8330CD8E19266FE888
76AB1F3B3C8BA1FFCF3A6CA570290FC1640B6C4231D8346BD346E647D138B2B7
F7861E2C7C7C4431E3E91E318BA1DF8338AD4EB4AC104EBE7AAD8F5A09E6AB3A
48B9EB51A85277B221E3A22AAF38219B681918DBBB2F77FA8AA27F310159C763
A6E66D93879B592289B919B425FD7A367B7820FF430100E1EAE0877F84326FCF
5F1DD99964BC6BEB63528D2B218CCE41024EA2CE703959071A65EDE99127EFB8
0CC01566E5E52DB32D01512383A7711C7770AE17A71E5D95629642AA79CD5F01
D37FC89696F25C2EE4DD70DBDECEFA4FA2CD5D2F8ACE75937D2B1FEC7A31A893
16D314D800AFD3EA28068983A2ED3A7C75A5570F30A2824A47D6A789AC554C3C
A78C2DE9771B86F73C66EF8E1D0FD046DD4F19A31EEAEE04D5F38B73C623F326
F146C7164C9B18B5EED2113363092ADE0ABF0D7BD4C10BE9766F81C34878B236
1A0FD6D8AB4BC7E3C01F1C880C3A9186E4006210D22EB64CD7690FDA750EAE7E
C87A9D29128D49082578ECC0BC977D91E9CBB1ECC0D3527DC0ACAB39402015F1
B067FC5E7705586D97E81F8911FC2BC8E7C077384AAD4DDDEDBEF65CA4B75F6E
39E41528CF53CADA928537D557B518BB740593A6E4D0100ACBF126FF20888342
A0D3D7C201C4CDE8CBF59A1BA4F924E4EBC3E02883D5FDF2C8249AD8117332E1
BB52D2F621115C0F98037D4962EFAC0FA86B14F3C046A1F7085E40E99C0F2841
8B2C299411F9DC8FA0C8C7E5D7822A10D31D881F6C47B6C47CFA943FF9A9F5E8
D5F1C3E6CCFA324059B942FBA2C6D0E9A3D080DA0CD80D8DF76B0FB6BB706F45
C84054E62F75294ED126A95DBB4FA2D09EF80D1F2C507DF980D3DD2BFA3DBF49
6A99DCC954BE39E51507B12ECDD92C397E82B1E979FBFCE731CDDAE1D9147448
8C312DF818A0E08266A2B60C9C0902AE64276F7A1C6D7BB2EDCCB2E3B7659B13
AEA47A527FB302716624B48AB754218E2E3D99115C606CBC90B5EF73B9F99439
6184472986249C8D8E52A404FE76E17FF814D5BDCA95AC580B44DAE8C593939C
9E7C0ED996B9D2B8118F71BC2F0EBBEA6D7E18FC7CCDC78BF05A034BE39DF9EE
C6BDAE8886C7058B15DABA55E85757137873AE811F25AC7EE3A0CCB8649F6095
7249EDD95E20DF06719DE1E109E5BEFC2A4098E77020110C37A90B5BDBF09775
B4356BF8281F2D2B0016B2B29B3D67C267E732A8DDD131B064946D81D83881AE
AD3F826DDE6135241432641F04D3FE4F25E27C2ABE4AE0125D437EA8BE4B8D62
BE229F35324501AEAD94AA78F850536004C9F6BBE03CC7D10417F50D32956010
1378CC2850D82EE1A2F72B4F6B519FB73BA2A718C137174824F59FEE20683537
5E0B9E13B07B4D38BF176C1773536706311D97771C1687BB8C208C8A4A69B763
13CAC04F35C42B4AED55117D0A2A97CCFC802944B65E0FD2FE3681DA2277C359
F2CAA33AFC17B9B81ADB90A5D935783BBEC51E5CCEEA08A9D98A37C8FC2F6384
7F35E56638CD915B9DC8E7A1A3D74EB1666474D68D907E057CF6681B58D7A563
8EFB5C8761DFF643167575C5F4AC3C885A508D2B610CA73DDD46A21D4595E361
AA2A68154E39AB14C297746AD019DFCF37F757B8F85F9CA1870AC424BA7DB9F4
012307F989CB801D2E5A72420B9681242CDE366D98BBC618F97783951CB23F5D
8C2AFD4A8DB38A4B6A7BD8CADD96A16E044CBB83F60FB0D823FCE6ACB24EE4C3
F37760396541D7CBD26C76F10DF47846A4EB1AFC03E60D114348F04ED96FC5F0
61CC31649E55BE99623514A5CDD57774B413989EC2FD214BE52C2E361FBAE99C
0A037CFD6A59815DF43D95BF5CAF9D2260A9D34ACF46D09C5DC9F62FBCA37CD3
BA2F4FE734C7D262EA2D548B9FE0558CBF6601355042A49551BF14FF040BB24D
8EE76D9E9D0680174841EF736063166AA430FF10CCDB488D1E9C0ADC8FB23903
FCBDEA91D1D7C602F8754070C3BC518E8ECB55F33CBC743DC003497FB8431FE2
A53007871FFC12ECDC1425B2EE039E8D4C75A3D41F6F93AE287D0B86794F326E
50F2D616C15F63083783212E070459FC6BB7594035A2EE553F40AE04EA34E1F3
3DAD7351AC3F8B22B1428E951A122A0EA69438D99793799AB898985093137D4A
40EC5967BC9A9D1A4DE41E5C76DE1BEF6E99E20B2CE7D5B5CF39EF8C11079E3A
1F54DFF7C64073EEB430D4E646477AAC2DE7E2173070590D2D988FCC287811A4
A7F9D35694BC0062492474F21401F1321CD97194C736B7AE3A3FEB0BFFE1FB3F
7DEF4B68E74957098BFA67108093FAF936B8F567B5193A85F4BDA9BB8074E284
81D5BD9C8571B7E4FDCCF18F090BA9B83B5F534E68B89D8F693CE7674F45AC60
9BED75FF119F2EC35AEBA0C0B2B22461CA54F5B63CA4E0A4A47F43852F0AFA7D
BFF98A944A457D2EA237062DB986B6C60B3D262F68B837FBD33034375078955E
EBD5C84F4222C66C66D9C59DE669277768564328B1A9AB2612E5873C9CCB9F0B
38F2201FE3C337979217C9EEC7693752D89F024718E895B06FB50783152A4835
B4A0E90DC17814F1098FEAE629DED7BC819D47224BC1A0FB2C6DC1ACE22202F2
56AC2AE00BF63200878C950B4EAB4B0BB8BC10832AA3D6DE426275B0955A3995
A29741461D7B907D172967DD47507FD981DF9ED50BFFEDD443DB908649C63EF6
2BC9E14F30494A029A83034D6B0DDC03FE8AE53D96D5075E008256614ECB90E1
C4D6407404AEC1040C6283E010A2A4296FCF9B7358298A76BD9FDEEF6728E01C
EC68DE7CBFD3FEFD53D109521540F5F62B011E6BDD92C8DE12674D6A20526420
B6DD93D7D04EEF0BE88DCBA802533E4DE2393B4863B1269607F0DDBE864700FB
FFEFDDAC848ED665FB8F33111019047C137809FD39B4341967F59F899ACDCA2F
8AFC5020596EA1FA66514D4D9E27AB6AE7956A2A157E9293AA75AA686EF146D5
8A0A437EAABE877E623E8F28A89512C8A7C422A689E7DC48E38FFD2C38663E1C
5EC043DA823D5164B79036C09B4A08F4BA36665A802C2B3124ED57014D7A844A
AEA45FFB37E18B77CD590024A20A1EEB7475E67E2716C02B2E9FE0492FCCCF09
EC017A4254AA1145CF75EAB6A2AE0C0150B43E8A23FF7110B8EA0319321F2AA5
23BA4ADE32CBE148E1A7B62E6E8D0A849FEE9CD494237F7F0B304B2D732936F8
8F654F1196A28367AAE84413B77F468CA8DCB605DF00EBE60D97A85F533EFA95
FE9A222E8F97DED29363D01EAD156F73D5B3EE964AFCC4FF4BC07437F64A311C
BBE9CDBC8D49D10B53F080C339D4E802FF1CA6064420B5683924169D1F33E47F
ADDE8DB98D81A1253BFF60BC5C239C8F18F2FBD32567D2430BACFB77FFA36475
66609EA2133D88BBDB546A8438217DC9F5FB5E834154D62A4868046B5E9A10D5
74EFBB7CDEA26F751B1AA138EFCEFDE9000D422453A8B525D25B086A6BA75A57
FCB4E8BACEC3F792EFA6D7850F8703D650527EE723CD8635C2D22EB5954C0087
4C472C0A997BAC6B687FE27FB8CBA1FDD5AAB0EC5C0425C6B2B6F4B661FCFDD8
98FB3D5F7A193E313D84839F381F0BB35EA06048110833F9F9825458E28CCFB4
8D42DA2481A0A1BDE1B973A4DC4F3599F605EEEFA076A9255A2DC4FE94B5EE2E
B59AA6A45111E2B547B69BC3750197A952DB5B1424A465CBFD7FC7E8957CA873
2361F6DF65ADAB69CD6C35511ABC86943213D9FD3B1171542F14ADA87E3C372D
F1597F389E1F7D10D128872ED449178860A05545A4A1BDEA2416358C9D2FFC6E
7C31A045F2ECB3226E44431C9BE7A92E611001E647FE11CF1EA05A3E21EE5974
731D1AEB2067D35D62091A876628DFC02DEC41BC6DD8E62FD50A22E38354BA3F
64EE348E48D2D1CEC3F8B33920DB34AD8F3CA8505727D1E1A53CAB5E63825B5B
033550A39AE3DA8173308AE9352CB81095693B578FB90DA67684A901AF3E8903
C85917A0050D820A34BD215ECE7C90281F5ED8CB829CE43B3ABAFA4679FEA59C
0E93F6D5A00D6642F900F720A1BEFDE8C8EBE7028B85983C8CB6D36E16F3D39E
020E72F75DA48B228CF68EE003C93C5E4680F1DCCF5CEA14937DD32EAEDBEBDA
297F4D113BFD686F468E8E3DBE807E24F8476C1FB101039A232D7416510581C0
50843F947BF021491F84433999EC6A4954E65A58276894A737407853115DC66F
42247203E1460669D83F662077D9D6E82E229ECC000E581BA17C6085D2FDAC10
56E0BB0DBD94BFF76A275625D297F5439FBAD59DFDAD10D21BDE4787AAB4B72F
2ADA4325DBAED9F12AFA7E1FC0257FE79C26E2DC27667489B24039D571A2050A
FDCDFFDD2C5F86E707CCE875AADED2190FF506436DB527C2B599D482BBCE88CA
A525B1CED15790CFDE011F43A57ACF0BA0F4B719466BBA59283AC644ED53D6D2
2922C27AF5CE0268FE888A3C86C552C1F94ABA1B7D898A6DD273A3A2CAE07D02
72442D43A60120A4CEC3A4B4F02F0649EFC0880D539E8D62F9801FDFBC8911CD
1AF2002440BBD677A6B395D7E940AF649BD2CC483140BFB256204BFEAF045AD2
2CF738F3EAC85F74B72F468D6B7900CBC4E272A9384AE0201E275EC819E549C9
3DAADE32B6A223044A979636ADF6DB326197D038F2A5F41695B00365230286B2
C3966B8D9D81D825A9E93E107AD338F6BB2B7B6A212491A236FF0C9B26FDB743
6209ED7159366BC4286AB7F4C59CC18B721160D034C264D1E1C18D10AC580CA1
346EAA88FFB127606EB1DA9E63501D6321FBAFB23D2A3A3E355D9E874E5A9523
A6BC35A9CDE46FE45B6FA3D0BD21E5B2BF1B1854F514B46BD658B14C8C92F61E
C4C884B29D68FDA126F8D0749D4BA480F3CD7C4CD1C036797378504B09BEC8E3
05BAE3757B231B45023BF589EC3C12320D5687CD554BFC931D2B41186B32E6A6
E07F9A0ECC52003C8ACC17620FEE748D714F536692227D7585BC8309E5F1FFAF
408EF08B64D3312AFB918985C6DF841D131DEFEED3B6B42A6A3D59FEA974F91C
0A5A14EA360A1ADC32AB0C1042DDA91F11964E08E0EFC07EE6035D7F930F220C
793D6DE1DD2AAA1E70A141450D8E5F35D45F0DB70376A98E9B1B625D562971C8
3ED0B3BAAA23C89554BAD043CE7DA7234126DD89BD3881F4B742756D28CDF60E
EB5EFF5EDD72124239AE97C190C513652F3622D6318D93FE8518AA1016E63A70
F0041B9102A1E8A7B78268276EDE30154481377B7EB0A2ED4B9E9E0426CDF645
4CB86FE75B0A49BBD1129847F7AE462744366295481D059C1DEB4C185DB36F95
C3F2B349F3DFE42EABD1B9723C9A474E485DA9D767A5D3F1EC5A5E7E6BE3D760
D28443F60612D8ED03350977FE4F4C898B362279A73425A5BFBC8DEE8471ED33
C6EBD9218AF48694658DD06018DA2B02214CC8398E63E36063C3EA30BB2DC636
C5891D67619AE4F9B0C1E57D6E52E40EC978F51151CE723849A7CC7F3D0CBE01
254FB0565B8BD7A3B1C2C09BB32025264973B6C63A80BFB76E9D6FA2B88022FE
9F602F3F7A4DB12311FCD037364A81E09C7E2D2320254647D258684DB8233313
4A4E466ADD757FC38AA24E95489A4655974FFD2BBA770B5817CC933F3095824C
86C2C0E5219FE1D8AC6A4D8FF9B4EFB852E992F630A1AD08DB7069DAEB26EBFB
B593FB21567C3F7E2AB031A9ECF09D4B4183072C9A9C50AA45DC9A12B1EC132B
D17963E82973FCFD56BDF0AA7EEDAED32C27B57ECDFAB39B20A967B13BC7B8AE
AB098B5431CCD6D849307F3A92AAD5AEC4A4B8A72D418AF717B0B9774783F2CE
CD333D36D491B98EB58A9D3AAC9798AA8208D0F5DEE3675154450D2BED374944
83413EEC4C14309B0B62CD98A56BF65A500475E9F27595061F7E4506C565CC9D
E1385DDD8765E32A37766942AF2CE724439A935D594BCDA50F9E3244B4D87808
3C2F70CE8158E2481A20C8EEE40E263611B00DA9EEB7699F7577DDFC2F0A801D
A279F522D1FB7FF0F77677BC8A7D5017A28FFB83DA93B60226B70A929F13CAD9
49E45A9C8E4D60EB828FF9F2ABE0B20E63C6706A4E5A5CFD7E93D65AD7711A1C
7F39BEB60737C546E9A01AA509957EC69AF1426D30B25E89E916A570FD9C745C
EE12212F25C01688AD40A2605CC93E9F6EA2D5661B3EBCAC9DD82E71BCCDC256
12F6E244A9F8B9E77D9B48195C805E49353531ECCB3BAA4728A68DEAE570EB51
1A41DB7B2DC241854483D10CA78474CA09806D61C80E2A325A9F9F093C3DEB9A
CD021B7714532EC4AC0A2588E55BCB0598AB829F58F23CDCE6352EA4FA74F96A
9CDA1D86B0A44D523F9DE328F5EDCCA4FC913C9166EE6B4577F2FB520AF3A9BD
5B61CFBE9F51964E4C636E849B37F49FC606F22D632B535D3F23D2F90308AB3C
7BA53DBA346D856B46DE78B661DB498B19B009AA1EB935D2293AAD71825268DD
8E927AAC7E5A343CAFDCA15FDDF4D689D2483F0E12F0EE246C140224446578AE
8103E18D441A293C8EB17BC0DBE85908698AEA6B5C2F8D7D299F24656E9FFC83
68BF322494518184641C07C53CFF74D14761B6BCDE53986147D40A26764E6A79
5BDE9E044C7A9BA12273C14C6A58483F5646BB412B6CEE4A5DB0CC58A0C83615
A81AD67D727787EAF4BDEE368E403B062117ECACBA2C92E9DBFAA23822501F2C
1F8B70C29B7FB54D77E3793D62BEEBCF461AB274CBEA3DA605BE9D3539CC51E9
ABCA641CD91CD24DB86247C11AFE57A2480C9B6197DD1E53FB30C861615DEDC7
599D80CF277F498459881EE1315A771EF1FD2FF815007DCA67E0851AE592F18B
C91EC65FB796CEE596FC53047949930A17B1CEB66383F97BAC6B227947AB7EE8
9C1113663F6266A4343D9BA9F599C8B86D49BC256EFA066E8F29A59299408792
393B6FD28B2A1F8E6D7F088ECC0C85DA8F5A4BF12DB5FF4A2FAF29616C9F8EE4
E8359B8BC9CEF7DC4AB28573F91565E5F75C529D722B2328C06E6DFD596B0CE0
480482227600A6431BD2647D28EEC2D3DBED13B4A3EEDA0B4DE032CEE5C2BC60
A3606A27CF70B0BD2B13F108E04E75801E696BC9B709F52E49302F48DBA9A26D
7DC2CE1313065723B1C1147C06AFE9414F36540A1504EF33C913183B2BE2ADBC
50FF9B248250CCE46E7C4014C84C3CB3086BD03E23F06115686B162655D38A77
5EC3390FF5DE1AC229CB42F186FE4E589B0363DA14396EBCD4751E810317CCA1
80E32F5E50F51B3B768CB198C5ABF38A7F976D4DA11F3EFAF1F5D14464E30235
2EFAAAE2C5539126D8119406076BDDFA0803E1177E81863D941EF1D5912153AF
AC40499EF9E075E39E543E2FA1EFD88EEE52197F6FFF65244803BDF09E1ECF28
2C1D55A56FEB25B0D1CA7701EB5A808B5DA16ADBD9D882BDFF0E795977D0A225
2E7575A690B4B9CCDCCF7D86AE13AD4E96C85227F3C828B45AFA5506F680780F
B37D0101450303396E600CE28824A75A5964843B4141C2B8B8868814F684B272
A1D68E96D3005E4DE09B8715ED825D2A1092C109DDB173978AC7EDB0478EFD22
112B0292B8308F1ED3F8D3D5CFD1EFF91A7EDA89C6F03941CC7CABC5887A70C9
7A7FC3B5DB7BFC3B9D43D65CE604C8B6EC0E3643CEF8F9869E2BE0B7C4980B30
DD1A44E76FF454CF11F9EAFC4E70EDB0DB77187A0FD909F9887BD61682CA3C76
1C946946F965121E9433020848F805006AC7AD1A90B61BDC5961D6B15483F370
A0646B9B7D7F9FAC8ED8AF590428A227006CD07455C28A498ECB9F661C8C419D
0C141486AA4BAA77F8145647B7E6B0DB9F6C11401D190652760566E3FC534EAE
D583BF5EDFB6F62EF8E78BB2F9C04B388EDE632A6FF1FF5ECFE13044A56F5AC0
F7AD0970B53E98906EE497AC507B6AD9E7204BDC1B572FEA7CCC161986F0ADC2
9CC7038F46C29C0315A24CD1D6B148D150CD1B90858CFFD767D64B2830B36883
B1470FA9CA3FB0D8A2EFA78F19FC77ED1267B10C82F06F495B3B445966D90CF1
3419A3FB782047F3DA90C7014E3C4E38EF8752B228908AFF043EA628E111B5C2
82784368E3E09B261EC3CB060773E9031077B6706673398F8F81B9EFABE715E6
2D3489543419CA33BE1B17131B846FD00C9E9A3A29A21212670B5C7C21D584F0
25DF94ABE599190A97A54AC001226EB716D7672EF1CB979D9A1DE33304D632AC
5F8A36D332ECEA1A57D9936C004CDAC17410B9B83E543AFE6E773122766BB95E
8C9A8757FED44BEE779E657A238C56FC0BF4273257F4303FF4779CE35C1CC4A6
960F05E8D6BADCE7FC2EC26DE32541454A5077ECD0DA28FBDA1ADAEA875E1802
4AA1FAE76E08BAA7ED45C17DE0FB08CE8F9792AAC5F5CED3423FD4AFBD3997AE
BC32B4B17985264D196A6B51204F475C6D2259E6390F359CF15738F7CD294215
C2257B0EEEC7ECE2108F8AFBFF0514FF4DD2829C8A9847A59B416ACA355CC4E8
AC3057AE62BA9D1E3A0ECE9269D42795D17B109A9DBFED7DE78B3593FA69A693
9E714C72F175188CD7455CD1818CB0204BCBB349CF6A6FC837B7E8735CF8735E
4FEA82AB8E2E405B15502440CB2DAC1E15FAAA17B91448D84681F29A53164EDF
846033AD85E9755A07F670B88D0EA0E495F71E501326636445BBF11F0708A602
A5925F5E433CA8C567B387949030764D8BB0AE4DF33B1F0C3EE80FAD1A330E4B
70BDF654571215E4021A10458A59018D6C00DD7CBE426981BC6B8A8565B95239
5C2753088285E8B30A95FE7E99018B29953FF51C5199DF3DE90618291D201DFC
AD5E13B4590E57F72FB31A3C1EA0B8E175A9DEE91E0FB089797AAA55775CCEE7
D45C77BCAC3365FA0FF18C61CA3B7D5D903E5A9CCECC3AA683701B9F13395822
32D6A0A991B6201EF1E99D63690E2F4B7041169A332924E46EDE77FE56DC34CE
5A5BD43BF92956921AFC69D98932204B60BEAFE757665FE5EC4BD0F933411B49
E2859EA7DC31196A9CD68932A22163F1E036A46DCA64724B8DAFC89628284461
DD60DEDCD72137C59E267D276781E49D27E21CF4D9D3C31CF5499D882F03F07E
131B0C86D87A89DCBEE98A3677B3FD5C16378F4D38FED205DD09B853F910E0AF
3990C480BA84A84C9BC409C28A5E437823F24466A11CDB35C89174CACEB557AE
6C0486498701832625E898CC5DD1DC66ACAF30EC40BC883A7F928A3102892337
9754460E9EC45E877A6AA188328D4603540A59CE04CF95837CC00627815FBE1A
15524ACAC8D52D79EE4BD0C8C51498005B1A1ADA65A29C41C9F64EDFEEC8E515
E6D950A87DD9B936B5C20BFC7B847CF14E795C67B03878D02BAD5090847AB676
56AE236278754432B6DF26975ACC1091FDF53F04A87B023943140BCEB2E8C7F0
9ADDAD8BA6BFE81B421B301A2813AC725453715DDE8D3E766BA1B312D0FD1DF3
75E4BBEB8D203583EEAD0ADA80F36CA45FB58FB40D0DC58A4A7AB535A15DE19E
1A66E27CA36D32A7151355ACE597058C23D84C0F44D254F465A9FDDF367075A5
9B4A5302FF2A69BC02EBCB2F290EE0DFCC321995B8F7522ED28E15061B64B495
587781D838E6A42F38A8D0C1C0FC7762FE9F218EB58100581C55339652F87ABC
76A8AB32B2D58FD3F83F1A0A0829C528A9E349F6C6673193BBD04D1912063956
652F0C1C4A0DE50CD7329E8AFD402E9A4CFD043049B40804B8D5B5E0B6FD3669
54BC5E7523A6A211E33285E90CB1AED692D774768B5560F90EF59DE4F3A2C1D9
11281F40A2E9F6067720D1FF3D846AD448E46BDB782DD32BE39AAADD7CF33710
01D820787A60171E2077BF681619C101F2AD8D88BB590340603512AB424212F7
7BD4874D960FC87733648AA454BF36EE0A58B0352EBCFB4A9195FD9CE34F3D92
1CB6F073BA4727E9F5D56FFC4D6C55DC117055B038A604B80C7F1F53AE6BCC99
29ED8B3EE8BF3095755C1F28252A6D03DE12F8E9E5B2AF1472166853252B3810
34FDC71F78BA840B39FA8E3D8322EA2A72C1915F55A982E3FC175DB50999EE68
0B35F218C62B366D612F65DE687545CDA90DC1F9416A8D3E3591230D1406D959
47767A7678A55A7DED2B176FBCAD93D96D39A16AC2F94316A360EEE60B4526C5
55AF018334A59EAB9BE31ADE691139A4573D479E66C2D2EAAFAF7A5128B6933B
E79909C3DF471211CA2A93D116363708F89DC86589B6429DA55648675AB62701
CBDB76EAB07CA65A4EFAA9581D9AACE9D597B1581B7C615EE07301FBDD5926F1
EB07982D23D1213326C08A56806261D8FBBD96FBA3E93A884F62C0E8DA938F3B
2BB1942CFEB5B92E39A971FB84F02AC81A5A70CD61C8CF7AA8DE84C78414E0C5
C009DADF744F750020923268371581AF2AF6E4FA8B1753828239EC6E7E16AF2A
4D2C59D645626C454AE8572E74488B46018C86DF39E320E8FF50A1B3F8468FBC
9675FBE431DE7D8F6DF660D50F9A770A44456A647CC5999DFAC83BFEAADD9CC2
A0997295CABF3F6E4DBB66411CF9702DAC01F18D872E4FD629F9A438AEA8624F
6025BAEEEA3F6BB48A64658EE44621138206F566331B52ACA50DB83AD80D5DD1
CB0D93630248D9A659D672AA53A16CF377EAD7D7B615403FADBD3060F41BD4FD
06317456E434C8A33EFF8A4537A6884E79CBEB533A997243BC930B0A737F6992
92FA967526EA2C1605E76D1BC2549003EBB5A9BEFC379C75998558307CB3AA5B
01BE54E2585A912D93D9767B3689EFB67BC234EF3D8B3D0BCA481B4AF37F46B7
B602F5B50E3F24EA68F1D4A622D9D0B177BCDED0602C55C93F166F9BC763323C
8DF5231AEBABC4CF0B417272F3571958BB8AA61FD777AE7BF36F37A31202D4FA
1CF16E518BD36CB470783D3B7354E15C9A7FD38DC7E0728517303AD563FC2487
DD9E566B0FCDEEED032FEF622E94E327D9DA1C10437F80C57E04F45E79C58EEF
32881DEAF7A2D9262E9034ECE986486C3494BDACBB0DB34096A56F871F7DF7A6
93AD405464A22058B71EAF18BA053A333EBFDBAA081C30A8EC6362CE6C6CE974
68D9D0DE44DBD86B335761AE1D38A2E3F008F3CA382B51D48C43490673364D2F
5F08BD631D1191EB1723280C4124F0C1570BF30AA58BC8F0AC357410E688DDAD
5A1386FD5D00C54B9EADA72AC3C70D2E121C9ACF0271A624C170C8978361BC65
BD596539715D336BD91308C6D9306B03824DFEDA6A3FAA5CF521AB2125ABC298
E1C74F1BD4A5C24486471D5AAE1C4D740BA9FDCFDB90C3B8BF14C735651C30E8
CC4820D13AB2DB1F0E68971AFFC28BBB1A7D55AE39AA8757B06D026E1B5910C3
BA9B1D6D986B1601D20B0A91D9E80561DCA14033B4D82AED028974120CF6693F
5C9A5835C8C58396939C962042CE8B6411743AF895749AC57FCE2181C79B8BD3
A7464E021340FA647B9356C1E417FA5FC6FD1AA28E0E963A27CE545839669D3C
E22F97D31E907DD82E1DEC4E7053868CF7B4D1A7FDA93ED48F7BB4910A2E65E9
81DD19402C15532D4DADF5044C201544D2BF5BC78580A7EF796B4D884DAA1B3C
AE541F51E22519653E888000E45DB69A9067D70909ED2A783B084ABD0064500B
17DD00D20F8AA38BB4EF5B5BB8BCB1FBA540BA583D010851BD62963DD9D118F9
45686D39CE4CE72F35BD71DBEEF2D1D0E4C436FB942DFCE5B59640CD57AE9519
EE36A0751EEA913AF6F119A43B8F2915672D21CD801D7ED60D954F44AB3D18D8
8653ED4444FEBCD09ED8F2B63F753E0C231765E5CE95668A97ACB11DB78844FD
D1FE90ADE6CE4B075C0ED8064835BC8D83A7E0FDE76681237B5C7783111166C0
F622BD6C217C77C6CA6A19D2C874C4046C6C7D7D5FF7E2175998CC1C0913D729
24CABC52D496B5FEDC438E7648817892BF612AC4C5CAC4EEB901D0D3E91AAFFE
1524B12C585FA84CF040B382456377A2EE213B6769AB7B3E10B124D4F28B5202
B13E005D2061C7724D1B3E00EFCCDC3DBD679326BBF29245585727C12F16E867
433C53382C7B3050E71CFCFAF5147FEB78D5A6F2F5D2C03C448BD1A78AF85388
DD0562345DE31F97510B5C3B6BDB8E1C8BB0777FB0099AA8F6CA0A635CB443E7
D002368E37753D245C26E2A6805A4B6D7B89331614BC9183C778663CDFE53420
E77D76ED3382C3DC8703EF4DE9853B2073BE4FB15622B39E0538D37B848D2147
0FECEBEC56772110E41A5A920F03B7AF39AE22531E9F6412131D273A0AD9F809
13ECDA44E46C2FAD58980BBA5841CB4C9B5B378E7C7961340E395B7A568FFBD2
D4852940D4E9DD8F79926879843C2888B76ED61D80DC77FBB07E9CC9DF397B22
8A27CE1694BCB6374450F9CD53C5ECA82A78CD736C66B30F5782AFEDAE96F097
062B063EE7CECB3A5C95F42EB0ECBECE73CEF89C44519097DFB3AD7723267540
B34D09E1031067576957A46CB5ADD4674E31DFCDAB9675198E80B945A8F30F0D
4B4B1E987E4E8786412CF0A2F4B497774CCC0BB33636E97C4C77940267BFA533
3D09010528996B881BA0E44676FE67391265957E95D175FF5158984F9AD2AF06
862E0BFB5C0D785BB9C5FB3E119664F8035B31EDDA5FDD8B843921CB29A40D5E
F5F39418188EDC885BDBA644BD8F733F2163CDE70B1FBC69EB849FFB031A9E2E
1D87FC35C0F53E7C3BF880D1B9147A7CAA674F87581FFB843D5C64DD41F3E627
0FA32552B5E33B87FD3B7CB7B0CE2A50ED9B3A3495C99405C37C40AD1DFEEB42
89F1450102709F5E350A785C585E52524FC3A9052E5D41AAEE5A25CE00291279
7BCF4F91758B8F9BF375DE97EEFAD9F0EB25C5BFD307D7C2D01DC06CDC015103
4FEE229E52E7241D17F90259B7770E4B23BA39C952AF78138C8307736D614AA6
CF2D5E996E59EB1D1A2C60317CDB767DEDEF772968C36AF026E25F3508C48A55
E179CD6621AE9CAE6E1D4C51A2A2FD6924CC5C1C8EF0E69CF29926FE0133D1DF
D4C5FD7798A76F544001DE4B3E84C36EF0429049831CEF46A7E08CB2DCDBF415
620358EE40A05E5801977FE60C2345A0379F2BEDA64917CB2C37422E8DFF11A6
2216F26E80CDFEC047E2BD8DC1C64ADBF11DC4018B82D944EE82FF530AFDEAF1
D179F533AD864792CE2D5237413C1902DAA47AB2325DC7FA9AF1DEFBF0CEAB83
E3A99E0B691907BE92898810B61A689CABD6BC4C9E1471C6B2D921CCB4C36D44
C3A9FD63D9A91B713E80CF06997B65BDD5246665255D93839BA7EB79EE9A40B5
72951763D48E3BA5647DA79BA100B8140A461D247274BEC0CEB595C4C8881388
8A023B8731F36928170B246E06FB1BE69114D0BC00216D68012C1E80C17552BC
685C6F1431FE1E277BD0B6FAA29F41B662592A62B1021D53378DD0FF4D882607
423583D76AD426491189D21DEB363B25A70F5B8799B418F3CF98B357FD225DE4
94DBE51EC014CD5768F0F3000A82ECDF54557C2E42B07BDC861B6B15AF994C4B
E27D4E08DBF0406890485430DA42E95E67E29DEDC5920F379852320DD881999C
E5B90422DC50816F6B825F3C1F027BC497B900AFA59B530B77C6A372535E40CD
9487BBA610909BC7D250B78FC82B51740BBF4FF7A0618E7E4A3D78D07E558AFF
53D4EB62DB649F26B7F3FB021D69798234863BED97859E7458C63BBFB7E91C21
61E70CDFDEF629C8D26FCEF845CD5F8C5B100E20B4D2352985022B78768CAA25
F8EE4145E917ECA0CB4EC26F86788F79FB9B4D1D478F05218D14EAFF800AAB12
FE4C71D1567DC5A367599DEEE6838EEBF9BF35142ECE726BE5C62658BFAAA336
06222E872B659512A6ADE57527A04293871FA0ECE9C5A4041ABAB6D72043C1CA
84A39A25A8CAED1400C49C127733026E9E2A746436512A74AEBCE5829FAD3920
9EB474210A0C888B9579D22FDFDEE7EC40A084729FBD73B57EC182035FA77784
598B366154C4533310F4A762B09761485A080469944A5DDAA7B0DCF18D18C3F0
3CF2055B89D2A0F9396116D7A426CFECE63E6A0F733BC060C3B38F9753F3FF2A
FFAA001AE0448AEAF18636C918BF7A476588EB292237D7D5A52AEF6E5F076BBB
C33874DE5D90659D9175136A707A249783E808ABDA0DD1FB8379650A3E5C57BE
63CF69E74BD3893164D131DC671E5EB15A384D48C0D53C43C0D6AFA8AACFB148
6C8E1CD012EAFFD667610ED6A8C526FE62D470955C27411CDD6AEE9ED51D2A22
02D730713ADF20C1F7A30317B78DC95684BACFC278E371F5CE59EBFF062D0AB5
C3647C1B00CD67E28067FF901B66476757E2BDAA0F21A9A36C3902D3E69AB209
1B089E2A6E4A7E40D31A082780976B61CDF136579C0DAD52B5E29F7C6E0F9166
A512B1F37951B61827C7555347E0325BA5AD1E6F8B7F840771BBE43E9E0EB982
0A6EA78EDFE94B8EBB49C998362ADBC26D72DE9980B3D68221AE71E08125EAE2
EB9574D49883421BC3CD3DAE3C820B7ADE8610990D0FC83A447DE2D5031DE7B0
9216EFE87601E7AC2E316E784053F2A1E1A471F793B8E79C65D16814E39F01F8
A23892F564D65D2EE8B25801338AC1DDE48274C7BD77A507F02D80B1BA81ADDA
469144CB5898CB326A4B02E23DE1468A423ED07B7C46D1AB8E5E63AEBE162D09
F17535C4700064B8E0AE9E262E39381D6A984258BC66D49A4D07B75313E31B91
7D02AD52470C60187D25136B60537020CDDEDB87CB464D69EA85F2B6720B2F50
7092FCC6D6AA8BA0744AD8C2EFB58D48CCF43A79871AE3F407A100EFD928D956
50C0F726C70775E38088563A40E44C8C612635F013F39D16A0BFCA7673F4C6ED
10891B93F931BD69416AD3AE85399DC113ED102C1FB898872C0594065867AD13
E26EE7853C91B7E7AD3DA8F242DE636A036B851E877F5E306A90513DD41B7F08
A2E63E16767E40A9A2AD7E3F1CD9C813F61EF5E3942485BEC78C6589F4D4DD00
0CBCBDB4F1237BC902075966DFB88233E9D413B69A3050EFF285B59699F06B47
5256913334E6743D5B3A9946C3BAD318835D9240B46FD7A6BF26B0FBED399A2D
4FE0EA0B273D168EE45943643A208246DCD9255AEEDC6BDE23DFA7E9F3B2369C
F6BF7DAE440328BE4908698381D00FF07DCB6FCD12BE4740388ABDD8EAFF4D93
E800D80ABE511227F05449F5AC65E215E943D197EB3C3E7297771219E08BCAA8
6D54A74467444E898BC7972148247F0E3D033DBC303D867DB8A2AE9DE439F239
0652BC8F00647A877B9001F0E69073B38E8EC302C9FD4449055EBF739A8465C3
960DE98724597604A1BE96CE5F5BB8CEAEE48E7A3D6672A801259B8F0CCFD42F
217F999A3F01D8C0F20818A448CD00D64833AC700F54786838BBB4069AE9A2E7
91D47E1AC68175E197731FE6F46296A266929D4B3277099703FA66E70628C145
1A7B208830FF7B0BA88CCEBA24F99D7272968C9CFAA39E09E0F5BDA2F5A59AF4
021EEF4F66A1D24C465EA05CA8310DA32428BFE9DC70B433B74131B527A9CF79
91B411E2F1ECBB3524EFCBA92510B468D71675B0F48DA2ACC6DD6CCC2627BB13
F302EDDE55BE86DE78296F221590D1F23E3038C452D8328526D3C8818063C98A
33D4C6DA07F8B89492B669AB8E663D0758AC90A16E6A6058B58571CC0C86E465
B720DCA03224F1464D5D4EEA7E38C26B531FBE167BCB48E0B4FC3546F22E408E
8109229A4FBAFC70952358A74F13B01343474F76AE09365135F50A2938570FAD
41FA3CAE73EF965531692A42C84303F38D617F509B170A92DBBCEF756550C96E
D194B2A799C24E7BEA7E2690755779D210B694880D6909D51F12ACE3CBF83F41
AF68447A884EA19B8023A42874ADBA89B5D1A03680D10D98EB937931B737FE59
DF0FDECFF573E63D277FF349B22D764EEB1D5AF596ED01751204E392DF0EC1C9
873F5105A4C6A19F68F0176842B426F6B0DF46F312A72458313B18DB3405C690
179E5FF71D1A078E7F2FBBFFE1A8C3748668198FD29ABF64402B4D9FF77D10F3
50B8EF85203E4D7E5E6D79BCBEA439C187CBEF73C661917350DA8C2556B9BE88
4BA3D9652C3B98A580488D92112782AE4542CCCE63685AEC3FE26417F5AC138F
5853280E7985BDB7B664F779FBDFD760AED8769592512858B4F025623617B2FE
270D7827D76694A60337B5A92CF126C11C4C07D7B25FDD98168F4EF741056399
50F24E6BDABB58C6F892FA51F7C768719B409879E823921031D0A4D706275E88
DD550A9A39D1F3844869140420394BC6221E449DC629E0858BA4271C747533C5
872711053CCA5A478C4AD83E21D0F64BC52A6015C8D80E939149C191EA404641
3BD49D9990D622C0DC09015955D6E98A09AE3816491EAEBA93DA0234DAF7C833
3C895252BAE3EC8023081C5DFE59EAB352017B364D4AD48875010125F620B8AA
8B865493D9B60C816482BF01160C2706052D35323D5DBA2137563A417D0191C2
D7F696C2DADCD9CE749640E087F3BB951475E9409EEDEF33795B5511CF72AE82
BB947AC403CA9FBEA165FAC6B7290B21E990972BB51623F2502E1759D18E1348
5A0D59188DE1A7347DBD65535F46669F9CA83ED2AA40A2620853D8449D434007
264F05F45C99203291FBFFB0EBF468EC39C5621DD2D16C8C21E99D2CECEF60B5
FF6EBF2F0DE4193C7D4164ECD8514B4E94D27D130988C5A19C1A25BDA9CA9333
2A2D51BBC76C4BD5C0433BE603868C396E117A785B723A781A5159263A51C3F0
F3D924ECEA66733B2E02E209056AEB8D396F0B34C29D34E78D72EBF6623A9BFC
725F28E9AF8EDBA821586E17CF9C6D1950F546A202DF9F2F46DB5F388D512C67
776CBFBA41A6A1057F65EF6CD300740D0A67515E8A967C86BCA4949D0FB73021
46F571619E0FDD5B0D926DFEC1D893D8EE8549D959B1CF7BBCD9AA1BD46E593B
A22BC17E73DE15D94D99B54C0ACA3DBFD18BE42F4A0D0A18E8DA4C710B78EC69
76F8B5C6B9B890EBB877788D5DC17CF1E84F56D19F7A7E43C74795C100C9B238
E8DBB33184531C0D257D6C1C4AC9BF0F41510E9C09E3145BD18C5051DA500E44
1E9C0B1F5A201A7F3013DE44ECC85C2FBF5F1FA131D7FA9637B6098F8FEECE31
8CDDFFF5A6C63FB7FFAF998B40A24CCB8572AB250FA808AA565D36C39AF29596
379655086989E86F2175C832FF41CC12686F947457CD9674E3293074D07A006A
E78CB3D0413A5A3C6AFC0935521D221491748C87DC114878E477D64109E0488E
2973F9EE7BAB408AC35C977A5DEB7D2998A213E5E499192C7754E3EFA358FFFA
BC53A36BCF4FBC13BAEF4573C403EC7CB6630554FDCD000F91E7DE10FB16F071
681FA0B7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.0: CMSY8 003.002
%%Title: CMSY8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY8 known{/CMSY8 findfont dup/UniqueID known{dup
/UniqueID get 5096649 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY8 def
/FontBBox {-30 -955 1185 779 }readonly def
/UniqueID 5096649 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY8.) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 3 /asteriskmath put
dup 48 /prime put
dup 50 /element put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 106 /bar put
dup 112 /radical put
dup 120 /section put
dup 121 /dagger put
dup 122 /daggerdbl put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D80B73E7B6CB7548
0E1D77FFC695988391DC44AEED8CC947B3D7E198B9620E2238DB3A2819182F03
14498B8CDFBA48926DA721920B221FB33BC21A8456AF10891403501D0F6415F0
7E041AFFE109F640E54FC1A365674711EFF94E752652A4C8DA62CDB1149DB899
2C4A4BD77A06E81E93C5698C05DD02F74A0756082738BDB53003B483752AE498
DD718AEA8F3FB5A6B7E2D2AE8F309065F3D556F9A34AB90C88833A54295E0982
209C466A301BA3372AABEE20D862C6DC6B6FAC1463C8CBA8AD766ED1B4C9D712
2BECB4E6ABF558D8AB5281C35726BB8D046982C0DDAE17BFFC9394125E4E84C0
B283977D31460B8EED4346CCB09F64DA0ACB640C6DBF32F2DC30D54668C1CC12
24C7280593088E9958C047125C323E9C842801346A9CE5F50413D69F6DE99471
65D2E387765E92EA4C43F17B467DF6E266D92551009C0E52E7219AE9F5E2E8D2
88852086FF3600BFB50AF3EAF8C009D8D5F084B510F792385F328F7EFA8C38AD
CDAB2EEDFBC6AA45F6DD7364C2F02DD2BE6C79C8361E83D4267CEC2407689864
B57B5D967FC80AB3BE8CA43955FB0FD3081D438437559AD24A7ADD484C1E4A77
B00BDCB0D1B121FEE983412E1EA5489BDCE5DCB4A7310135956B230C0DE7BBED
516369A92BC41FAC8D73490984942D930DC193BF0C774C1AEF627B969EE4B001
11381AC57815D7581E2372A1DB740B09F4A7FB4318B765DA4E7B44E8805CEF85
44EC3B10613FE7B397BF91B69A5CB2E9086D1E7A1FAE0A9ABF2A237A2D29ABFF
E392A18AEACBF28274E775D3FBAED4F46B982B9DA4602E24094EDCCBC9D6FC0F
67C60376879245606C0B9C9A678E8917516BE1CF097B1C75C9F0DDAD6899F08F
81FB7A198D45FE060CD2A550D9B8D58B882B969D7BC3EC018A1FE92BDB262835
26516FF97AC387EA525FF987E5EB1EAAE4EA5866C9CC043D183763C530F7D7A1
2070E4044507C4E5611FCC117FBE4396E0B24F672CD53D5FDFA56D561FB86D40
90A52A7C7F29A119DFFB694A8C445367746A49CA5FA83163BE448EB19625DF26
609A8C8672631A10411036CAA3D6C2F822A4B2505DCBE8E1CE6916AE515E78CE
E8C894B134BF811671D17C19248853131DFFAEDB24B15FF17EAC194662460642
48D23515AD434C68DF56753806FE96DB3A29F9D4980E0B6EAED7383F9FAD2584
8F85679D6D1933677ADF5D31FE6E43DABF137E834A1DEA632D36EA5728625159
8F33348893C9D1C510501628E4A9A80587DF6E179FAF68B158406A3EBCD726E2
AC17F2DF8B3607072824D2E5A6479F7BADE32E603E54E7A83BB2DFDEDB0D80CD
1F1BDD4F6C9025CC3A8A3685DF10A8183FA80CE0F0FE2BFF2500F76B1037AE41
56D2D7FB468C3CA7549E3599A2AACF66302572F1B35BC8EF7C23F6FC4B720228
1D673D903111CE378AAE83480B4DEB7EA84BB35F4F7BE997DD4FFF5A9B5E7650
3C7365BA0965B242DC369D03215651184024A08EC284F1798B0726152884B4D8
46411B3BC8F5CB53A70AD53BD7B1AF23528849B56CF2F75609FE715878CF6448
38579380688B47AE3D374B0DB6ECA5B8284414090123D47F3F9DF389E023F431
6B4C0DDEE4190DEEF4CA772742012754DA9A44A8F550FADA6D8FB0C512D5BA2C
BB7DF71B1DA41FB6936BA71B710CC6A80751E43436F0F5888F51AB370DD4A088
40F402661E08732C960705C7E0D29B8DA1A8A3E119409E51EE575E9655F47568
023977917C8EC610BEBDB9C1F4EBC192084D63EAA00EC87B53E86620BB5AE51A
579B0F8E1972CE1DA02832FC75184F45409DD9D413402C2FA27BCB0AE6DB4CE1
5AFB114E23232DE07C4674969A1FC94D152C6D3A611F029ACF4D949A2C0755D0
31C7DACDBB4DFCFAF7E87295CCF5D4AE28D87ABC3533D87EEF1507B9FF9063F7
F007DF03734A20BC3A198B049000C92D2849C62DDAA719FC28EB372793E20128
D786670E08948808BA45C4F6AA0DD8A8357CCC47228A760C5C7864853BD9C9A4
285E446CB72C5C9D3F03FAB000810DC5674061FA116153040743E846506CFA67
FA8770E785D7DBC7293F37389A0859CC22275B23C44B57B92A033A7BD194340A
D6BAC6E103402F8396A5394C617CB2A27D9500921D5DA06115EC81715EA8E360
4A95DCE8689CBE268B8E6C8B806CFB0ECBF634250243C9E1AFFACAD65311FA4C
1DB0988203537E5EF12B86FB454D06CF05E4F4FC4143D62920E99304245B6ABC
82E21192BE94F5E980DB21E07FEDF0EB0CAF4ABDFC20EF08A2A44A7940E2862E
08FABA516152DBA899D6CA561EB08C7C8298DD511084E5230CEBF28AB1D84C85
B5BAF4616C28FE05AFA4BABB3BA03F8CEEF3F3EB0D3034BD3D8D06629B8E9EBD
72484057E71C9EB4DFC7C2CE7749271AC926C2419D618FB0B60FD6F81F0F2C04
E529CC74DCC9E4AF32D935D7CA65FBD0842A7BAF162D08F782E65DF3AD9EFE69
198AFA9208B22BC21BC4ECABB9BFFBA84C8421B74748E1EAAACEB59E566838F2
C439579D6C75074F94493F7D5C8942D881AAE6302C37A61003AF77684EE99AD7
EB5EEEF050C52E75E4E842F8174470FA60CB213BB6F257EEB26CC55D1202931B
B981DE2535A87CF37BFF912220C117EE166CCAE58BBF624170FFBC0716726B36
304D698F2CA131675F7B1199E6581B8C812C4FAF75814282477BE2B7EBCBA7C2
FA6356B2876F89698C6C2493989E9EB252DE03BB374622A7C88B8EE9FEB4851E
02F85CF70CDCA7BED5EC94E81170FB557C3BFC6F32CD70B506E56A2CC5451592
130C6F570C679577C44D60A811DCEFB3535D855259B1021AC168DB76DD38B459
F1813E3DB20AD9275D58880CE94058490ABBBB0D8DD16D4A65F680B30057F15D
07FF54D779CC978E90A850A2D8D79961EE276BB26B594C16F56557435671A3D8
ADD3DD0BC4BC73B0652B9DA8462FE614A14A11ADB2214EC4910823FB4CEC8938
24354C5C62547EE5710FB5ECD93AA45DEA7411F6CA8D5B5FA222685E622AD73C
1BD5DFD1C8F253352D6C7D14FF2FACF07CA5EB11392C6A33E9CABFD99F743BED
55E8DEF49E07B9444171D1780C698E5B65B540F41F845AC188DC7C0C8B5BA5F3
546BEAAA4F29F0DF30D5AC12A60862742623100074457BF2D820DCAAB340C1DF
22FF26992DC02F276B40A7C528C84B72CD189A4088C90070486C49A1014FDDA3
5093FC12DAF309FBC063653E6A33E14EB51B081126AB5BCB8016E975060B796D
6CBFDFE6CB9E191F12E309254BDD6660E3227012F5DADE246B02B6D8127F1EE2
248F48DC5ABBD229748444420C868450602120664984FE3A8B2373232CE5CA15
E67172CAF7EA99F73A66AE33B1EDE5E8351DB02497CE3338930147873D4E46B5
E918F5592A21789FA9F46232BE693DFC33240E2649D6AC1940B101D806089436
F0CE230BF6D0363510378822891DBD3EEF3365430E74FB6C994BB40C8EEDA593
CEDAFEBC3B87C7C04F52FBD7D557A77B44855CDBEC8A8D26F44D66446B5662AD
15B6B79D13BD262D79BF51C09F8F690A61C7F11EC2E05F6BEDA273648E9E1EBC
3D5F1D6ED486797F753064ADDA8494405556D43D395B1487EDE877CCC1EAE954
1AEE2513DDA94897B733609E8179DFE1975590568202EF20D58A89B34874CC3A
A5579473AC65E0EE61545AEF578ADE10BE3FB3E2CDC96678F613E4DEF7BC1B38
8A551C93438A0540E292F65F1FA73D9AB30A5F545284085E4930A570C1807995
7108AA8194607304488616DD4AB189F8EDC5F4507AEFD7847817A8ECFFDD2DD5
DE95E04EAF2774F8AF661827229F01E769A32734097C457EB6FF056D90C46C5E
9F936AA6BF2EE8244BBEDB8862E56423F5845BB10C8809730B011D650EA18945
83C320A3F4ED095A5EF91929FC877ECC28A1C2CE74A53245E629BF46C6534983
307B1C94EB35CECDEE86551F0C308F66690E591C5D9D8FE14F534CF3F5DB6D32
39D7C799F392C4E65759B7BF61F4D8312E3B26C31466206A367A0DD7A90D25E2
805D36ED5CE0A4BEBCAC0A348FADD2D2AAD670E28BE6E33F627B4A9F35078B1D
6688084C4C18840673EF9B3526172EE14EF64E97C8B006C27DF6EF73BA6E6459
3608F10EB1EC4B824DD5360B42AFF2084788B165747AABFB2C9C0EBBA9C6246C
08F28143809315D6268E386F09BBAC54C34213438B56C386B34AA457D149CC39
A3C163F56E3C2E637C63A79CF7F2DE969EF3AAFF75F3F20499A9ACA61279D545
866FFE57D25998244F448AAB042B141952BD653007A889B1A716A4042CBBB827
C1ED5E3C616C22D5FCB39D3B3539F9B71D50D25ECD2E5D953C7A5194C867DDB1
75CE10B2C3A20E8CDE15AAE9F549D034838DC066CA649C31EE365D46450AF18B
893748D055DD88C72391FD92DDF0AA1A1316051BC756F87BC9A425019B2FA7BD
CA9F35E89E2229B3021DD24C9DF0DC3217F44DCF510116DDC9E92EFDA3E0A892
491C8961CA484BA29B8CACD2FED2E246FA7414F892AF7B9F08698FDEC82D2E4D
8C6ED1FD9E0BA2645663E7E97B0F780033D025F2EF3B364574C03F04FFC4E09A
3D4182BBFCCCD8CA54A92434E2208803ED36F931D31C7498B7FCEE4B78AECF11
B27123A10F031F9CBA36066680E4748E346D18FD0EFA395D1A9227530618ADD9
64D96C50A0172F712CB427E8F7170F8A1691FB95B247A271499F0E63676BD64B
167438333A3BD9CD9641AC637E0ADB17F1E394DF34AF5A2BD02030DD087BBA02
E1209338B74075744A9A9966039AB6D223F385E06FF359257913E6C01BF32F5B
A3640C7CA41A6C51F296E50DC1CD1D68491CE5D75E0ABDD4C5C4A97C8BE2BA35
D91AF9F8F38E7AB8C1778B06A212D0416E6137087329AAA2679C51D014CC4DEF
0F1543E2FD97621E552E19B29AA1368CB5046C188BA59B1E1875B25FB269DD2D
C0678A42CD310702465694F2BF302AEBC43F714F7C657505132DDA71CD23D17D
628BF3400EB5DDFCE2850F31B40C5913394649AA4241CF646F3939916C2077AD
C11F8C3E478586AA7931E327333FCD8A2EB31DF4B47AA2F31B999556602DD998
5848143C0CBD0B5187DF08E675550F2384D48C2954EA7D16AD2B94DF97C194D2
302CC47BF968CB1F6C9641A87525D5C6972ACCA1D4A4B4DA8EC54BEA6E7312B3
2737754A9FCBED3BA5F8220B751506BB0A5BB5CF706AFCC04BFD713A3BE3C842
9FFDBAA0CA5691D0FCE76134841A169970903843163DE68FF09649E99945DB64
491FD6D8B2DF237DBAF550D1B74263B3BF1EF6211F40D4DF2DEC46E4DE557088
5D458A7CDC6F34B8C3F5C76582C8B7D24A333AAE0B43CA67436F8ECAD7C50B12
35BAAD521033D8024E4DFCF01580AEC63BD5F8ADB778F822AC4FF0DA608EB7CC
1A52A51B9F38FFADC0D2F4D8394C5D598123B483AE5AC1215F24F2492EBAA134
3C58AD4E3B493AABDF753EBF1F04058C6981C353D6788C2D3294165B667D3765
7883A8493F5D772F789F73979B254BB9397FDE4F8B76CA6FFF312F4B012949F4
3EDCF1AC60FFF2681549DFF430B498405E79CB407DADFCEDCAB1E2FAD3B0F4C7
B575A33EAFF9F67D37F50BB06D06834EA683862991C5BE340D4A7F8D131E733D
289F72977870F9958102F5D835739F0F5A642E7194E8AF7FDA2937E5C0712CE4
EE15CB475725030CE0F238C32775D3EC95CE3D0886046E3EEAE322F59D423E83
DE88DDAB5CE0F70537487EBA5A16A9306BA7DDCA14A85A9F83B3BC3600DC9421
BDADA2704A5A24F7174A3A486ACE68739EC5960038CB44D969A594E97AE1F42C
42C1B7E3A456B3CDFC7683537B337AA8777F18CA45B22C8BEB18877DC624496B
9E8EF9F386B7FE4D94ABD5CE3B5786E76FE04A35909C472C04654A4405932EE6
A4A3E0F6DB088603FDD82F0EFCB85A962002A662D1AD0647A2F484B59075A1FA
9F4327D542ED7962620B998ECC3A95CE736089593461CED9B5AAAB05C2DA3820
5AF29B32904E1EEC357C8E282189C6D8F562DB11291091E6897E24CD8F8E2A34
67F35D261E01336152E69831B0CC6B03FF1AC7EA22B745F513A25FE10F70E74A
3FD71FE1EC9999BEDE7CFA6A97EA2DF621711BE950FF8960965685BAAEA71FA6
36F165573A0A6A92DAEE41A9B0C97BF03419FF6BA1F44524D00FD671EACC4233
9A857680DFD27B9F1E7A760058C8277B3761DB9969241D1824A7DADF70BBFC38
89C6DB9091E3BFCB36851CB9662B365A4B7384BDBA1D385902D1E5DABA72A159
63790096B927EA49299AE03E41C7F593F3B995D1155E91C62D5F68845ED3C797
7798B56858F96C2FE2E37D812873B7801767082A6D6B60602CEB94B7F6D7A142
72814734DC584A18D1FFEA7333D4C7E2DFE5B91E9AD92EB52533CA52FA888980
C79FEEDF0FAFB3B20B497F9AB668BDAFA364B405916526D5C48E57DC30BC35B9
BF684FDFAD199D9A28541327F3899AD505FBBBBB22F419E22E0149EE5FDD2B43
AF442E2724EC16934C307FA731F90AD1C76B74569B78CDEA7C19808233C6364B
D049F3F50A68D3EC5F29F2B96BC58C44AF90FE13F244B7129F14B5DAC3F3F310
B330E67CA4EB76F895DAC8025F11EC7630EEB4826B5721348FA38F28B2AEEB1C
5F7CA413C486C94B1DD96988F07F7A08D3635E28624878E55D4FFBEB5E183CB5
93014D8A272EBCF3A09133603CFFEF43A6FF059BCE525706D3795884FB495748
C8AFB50DB464459A5C36D7CD087631BC09C693A11BDF1C6011D9864FE66EE8C0
4824A42E97D16E017C0BB73732D4537E2A5BB283B3568950E5681364DBC1D6DA
058A122862A44ED85029A7B39F2FA7C362D859D0B429E056891339626AE6091D
74F6110CA32F8F3E9507216997E6AD1A2F1FFBE8B407C9880DE230E234F6FD41
A291851178BEAE5DB9DEB22E3443807E2BCEF12A4AE8C490AA9E3D2918329F47
42314CD258A0760DE5FDAC4AF7209CEB530B8508B278952A3638CA8491C3B493
516F461610DBAF32E923ACB834B15E2D169A10F2609EC0ACDF7BDBC777DD2C19
2DB330FD557D3B06B78824D6AB237D8F2D57A7ED35F02CFA9290ED6893B41657
A2485524A3F1642FF5808FDB77015D9467EDAC4A6BBE8A175833B1225A5554F7
2C60207F7A2632A4023255E8EF1F38C1B8216C9B03319B60BEC9799E5378683F
46E698FA75F2DFD40F17C603F3335F1EC70DBA1449C7A33EDDD46CC3DE4A6557
EE67BF349AA8680FDBF415DC527129288B5879500180F75DF80394EC7CF11BC8
9EE9A4ABD64DE3076A2963F83FA333F19FF74F79ECF36A87A31D6F125FD2415B
3F6A6FC33C179F54CA164835F3C3DB62AF444BDF27AFF23098C7212477F688B8
6F48D9AD080D544D57FEDD33D3D9AED9346CBB644C97C951D4AEEB2BF6F0CB18
E2517BA7ADCFD00FE44E290E731D53E5C0D762FCBA08004562DCE6A5EF2FBB74
B3053CBED3B6E896B1C3356DD9E8FCB69691AAF6BEBA0424D62B9F266D560B40
89E20A9F35AD4A7F65A7183761ABBEE0F7EF26ED3565A25516A3A5A57143979A
1EEED8CD52A69E4E1AE4795F3EE0CA21B9F4D166783A9AF54B08B6C56703932A
310197E328C6E6A6BADAA11D66A952964F31FD690082FA02D1E2A4512A9F2742
33B203FB770A3A1C7490ED630D0FAEB3066429D0237E18818EC368D0DA72EB08
1951C70139EB0DD59EB53AF5039A7618C77F6CED9F0A066FED6FEE0C0E328351
BA39746C1224A29D191D8B86491E0A306ABA070CAA2756C3A33990EB6DDF34E8
06EAAFF94AE6686EEB06A17D6D020D1F4E59428D533DB0EDA6434E6E1A478D5C
2A0D08CB39DA7D5F5200199FFFE3F41729478D4F63AE01FC0BF3B378FF6402D1
CCF25E4D26BAA74C6EC36FD67D9BCED1F8BE9BA26C26B555128D72428C1ADB04
F4C74BE0C74A4DBF2867287E17AB7CFD74E34417D631AFE0BC38C60FC53EA7F5
707BAFE34709C7DDB0345ECFC0AE6B17B2B61DBE361F12D8015D007C62B6085D
8CC47C52C146104BDC0011EC15CD7CB5F78ACEC4A2F59C4F08F66990D8B37599
396DB70424C6A1C107948AEB59C3AA86435B6FA9F9D417B100DBB2D3BBF83F7B
2727D635B05DAD6A9D9D247C56814A100A1FDFF06ECF2E2265C4CC66D701BF18
DBD9E4E9D2C0A41D5465B27A444A3D48CE681F650EE9CC94FC9C7697D0F570FB
8B7C5EDA6B94290AEB7924FC49AFEDA820C4137A80494C40B109C457F406B48B
AEE7631F2E1E238820551B1EEA6074AA55CEEB902DECF35B906483E2EB08616A
EEE0014D06B1A5336068FA138BA1285699F207E899432F803E7C0213FF733AB3
B84ED7A5900028AF52B5D9A541ACB58EDBBFDBC25014AA98D3D0058FCC35C839
7A181D1A786FFF291FAAB868331696B2C6CD259BA5CC61F6698E14EE06AC7ED9
1E069265859E27AC9E3B75EA8C8EC95E96C3D0E0BFB9914C8377956BF3EC7384
FDE82E59379DBB56819033D5FABF940F1596F875B3187BE186AEF937DA90916E
38A833EED28D884288D66B3AA42E0A8035F4501F7AE759827588045043C29253
62304157982319FBC5A802148478BA9AE85EF8427F110D2FC318292267D40305
DAE42A7DA49BEB170C35A556FCAF37DA3D4274AD5C9B770AE62AC7671B107596
F63F6A0F360746EC2707A20D61D30543508F7DBDE9CA5FB7B7F3A2F80D5E6C59
6E8FCA1144C967FDDBAA88E32A3DD0259D8D106B8F4E959104E790FBCA26BB11
9611A7D8FD603174BAA22C4851A4EA838D21901C8348A57189B300A825A122DA
FD45586E6ADDA29564FCDCFCDA7E34CD5358A5E0C70620D51EA2392660580976
7AFCCAF4FDCF713CE65CE192A3632A008745B77685FA009A3DB94B301FFCAAF4
D3CC166E4E22D58BE4F7B3D17E13BC67F74FA8E2121356EBEB0D9B5DAB1CB0A3
A16D855B9240236DF6D42FD3C56B0A4CD6E70EBDFC46610FF68999AF123E569D
CF2E2FE3D87F54EC0389E88CA5E4B84F0346C64787C27C82816DFB41ED6EE7C8
3F83944F1F1293022E80BA8D3A407620C9D498DE2B4BEE7FE146DA6945AD0D09
7449EDF8FCE6C3F28E54FE0A0097DC96D598DCF3E7DE6AC9393A83F5B43EC999
BFD4677A6D2AED7340C0970450BBA413016EAB0DF7DA93EB03EB4B4DAAD07298
6441F993D132A0635F26544D9CFB387C531F3BA697883E1098692CB6034492F6
B0B3FA993F5BED7811962AD08A13D3140A452072BC66B193136B084B4C01314B
C653CF1C5DC7B850A72D3A088665885D7AE28283517E2C5264F580F4F525559D
70C99435001ECA7DAA178E04E6EEF7DFB0DBAC2C75FD1E11A2E4C48EDA17D2FF
864C7E98D27FFDE6DB0A783DC1D7CEDF5B6737A9B926D62F17E70027B7AC1450
2325CDBB918D4CC5F63850057BCAE1EF60BA443FE0DFE31DD666E3E39931340D
B963666849FA7FFC3206AEC7E6DDFD2FAF70D1CD0751EBC4410560266837DCA1
B8CF06F6CB56EE0240D0306933E7AE707FF818159DE1C4E0ED6D03497F100590
BC2CDAEE7C38512A3B6745720EA87F77F67A9326109006075A85350FAAB3F48E
FF790EB1F4B63CFD7B62F461DD2A9B200039252217430FE31BD56480BA2441D4
4E1A7022E146CB5683983CB45C23F5D448C9A66C68586A7C22456DF3E1AE25FC
B98A5814CB5DB63CBA1BAEC7E5F11E5CF7FC8B79C8A4A90E5DE393609904CADB
F578083A78E5834913AA8F3C8F12EDBAC86B03B0183A82A5CFDC0E97C65BC229
EF006D864F17332B3113C32C052D1782E1AC19743D9F2D08C3DE998AD5FA6FC8
080F774804C6E86906EEE672430E637200ADC49B131E7CFE944E4722BF062531
AE5A9E3BE2E5A1377B21364C03C514960D06BE404D15F58CE4871DDA38028B30
65EB5EC210D56CBAF9F075D73964EA3EE71EBA2C3C4A141BF81F1D49D4408384
932C30283DFB30C464EEBA5036711416DBD9DEB1329AB7271C6A0B2FDAA21B66
A378E65D43B5D6AE02438AB06CB03B4A85B1C84362729AF46D5A9C3A166FFCCC
9038890BB2E32A05ACB8855A0C499AA0FF34722AC4AA8CFA76772D207D864E1C
9075879478E678B92BA8D6DD2ADFD9E254CE47D9E750FC6DD0F8F854227C4217
5ED367741B84BF66101CB156D9C4EE450B49065920DED4F9FA25EA9DFD229F9B
BAE03B751FC467B797BE6C2A600235ACFBF78095E4C8831540D8317ADB776197
B97F8B296356EAC4FB870D5306C3986C9548A36CD981678FAFA18F8B7DA4516C
4D304E942703548B2DB357813E742B3BCB2043D77266A6B495480B779721E584
978646C26D0A18066FC91F9311931FEF0F98C3F08690C219893A1CEC02F881CF
60647180D93DC24EB25182D62946DC036A7F52EEFB6842FE365551E6E423BFBA
580C36454C85BED7F6860F4F46FD95A0304A285834D387C5F0F67936CB43184B
36D7823BF60E1E19622D9FDD994F7CD0D7808A0F12280A2A6E60BCEA47DC4451
AC734F3DD43E070F9C692AEEFD2FE7C4C87F7CC8827C9ABB21D46C1BEC41D6E0
590306CB1F97E68529FA2365658A952157E95FF61AE82725094CC3356E22075B
286B46CACAF4F40137232493523114C5A57F77583B6481CF70660805E844F234
24B09DC1A52F50C1067CBB07216059109DD628C7FAAD007A86B02F4DCDE9892F
1A2606D5CCDA44C51E80937FBF761381BDAB5B0D1C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600
(2012-incomput-proofs_PRA-external_Figures.dvi)
@start /Fa 138[48 48 48 48 48 48 48 48 4[48 48 48 1[48
48 48 1[48 14[48 23[48 10[48 48 46[{}19 90.9091 /CMTT10
rf /Fb 170[63 1[51 83[{}2 90.9091 /CMSS10 rf /Fc 149[25
35 104[71{}3 90.9091 /CMSY10 rf /Fd 150[22 74[37 30[{}2
49.8132 /CMMI6 rf /Fe 255[48{}1 49.8132 /CMSY6 rf /Ff
170[66 1[54 83[{}2 99.6264 /CMSS12 rf /Fg 205[30 50[{}1
49.8132 /CMR6 rf /Fh 154[51 101[{}1 90.9091 /CMEX10 rf
/Fi 134[59 59 2[62 44 44 46 1[62 56 62 93 31 2[31 62
56 34 51 1[50 1[54 12[78 5[88 106 7[74 1[81 15[56 56
56 2[31 37 3[44 44 40[{}30 99.6264 /CMBX12 rf /Fj 158[33
97[{}1 58.1154 /CMR7 rf /Fk 135[52 1[44 32[62 1[56 15[65
7[25 59[{}6 90.9091 /CMMI10 rf /Fl 142[100 100 10[55
17[83 2[105 12[87 87 87 87 1[89 1[89 1[89 1[89 6[87 87
30[59 59 14[46 46{}19 99.6264 /CMEX10 rf /Fm 140[28 4[39
4[20 7[35 35[55 5[35 35 35 35 35 35 35 7[27 27 40[{}14
66.4176 /CMR8 rf /Fn 133[45 48 55 1[47 3[44 43 49 47
58 3[40 33 2[48 45 1[42 41 51 11[66 57 60 74 1[63 6[43
5[70 4[76 49 76 27 27 18[64 6[63 1[58 4[55 6[45 5[55
62 11[{}35 99.6264 /CMMI12 rf /Fo 143[83 1[50 3[28 39
39 50 50 10[66 11[79 11[52 12[0 3[66 16[100 11[77 77
1[77 77 1[50 8[77 3[77 28 77{}22 99.6264 /CMSY10 rf /Fp
133[33 1[40 6[32 36 34 43 3[29 24 3[33 1[31 30 37 29[50
7[20 19[46 6[46 1[42 4[41 6[33 5[40 45 11[{}21 66.4176
/CMMI8 rf /Fq 173[72 14[72 67[{}2 99.6264 /MSBM10 rf
/Fr 134[55 55 76 55 58 41 41 43 55 58 52 58 87 29 55
1[29 58 52 32 48 58 46 58 51 7[79 1[108 79 80 73 58 78
79 71 79 82 99 63 82 1[40 82 82 66 69 80 76 74 79 7[52
52 52 52 52 52 52 52 52 52 1[29 35 32[58 12[{}60 90.9091
/CMBX10 rf /Fs 133[30 30 30 116[34 3[{}4 58.1154 /CMSY7
rf /Ft 129[42 3[37 44 44 60 44 46 32 33 33 44 46 42 46
69 23 44 25 23 46 42 1[37 46 37 46 42 12[60 46 2[57 65
2[52 65 7[60 1[62 65 4[23 23 1[42 42 42 42 42 42 2[42
42 23 28 23 31[46 12[{}49 83.022 /CMR10 rf /Fu 131[93
2[44 1[60 42 49 30 37 38 1[46 46 51 74 23 42 1[28 46
42 28 42 46 42 42 46 11[68 65 51 66 70 62 70 68 82 57
1[48 35 68 70 59 2[65 64 68 7[46 2[46 1[46 46 1[46 2[28
33 28 31[51 12[{}50 90.9091 /CMTI10 rf /Fv 139[46 46
46 14[52 65 59 31[88 65[{}7 119.552 /CMR12 rf /Fw 134[47
45 65 45 52 32 40 41 45 50 50 55 80 25 45 30 30 50 45
30 45 50 45 45 50 6[60 2[97 72 72 70 55 2[66 1[72 1[61
2[38 72 3[74 70 69 72 7[50 50 1[50 1[50 50 50 50 50 50
30 35 30 2[40 40 25[86 1[55 12[{}56 99.6264 /CMTI12 rf
/Fx 133[31 31 31 7[59 5[20 27 27 53[47 1[19 44[35 2[55{}11
66.4176 /CMSY8 rf /Fy 128[49 2[98 49 43 51 51 70 51 54
38 38 38 51 54 49 54 81 27 51 30 27 54 49 30 43 54 43
54 49 3[27 49 27 60 73 1[100 73 73 70 54 72 76 66 76
73 89 61 76 50 35 73 77 64 66 75 70 69 73 1[46 1[76 1[27
27 49 49 49 49 49 49 49 49 49 49 49 27 33 27 76 1[38
38 27 4[49 15[49 3[81 54 54 57 10[61{}86 99.6264 /CMR12
rf /Fz 134[71 2[71 75 52 53 55 1[75 67 75 112 37 71 1[37
75 67 41 61 75 60 75 65 12[94 75 100 101 5[105 1[50 27[45
45[{}28 119.552 /CMBX12 rf /FA 128[45 3[45 40 48 48 66
48 51 35 36 36 48 51 45 51 76 25 48 28 25 51 45 28 40
51 40 51 45 3[25 45 25 56 68 68 93 68 68 66 51 67 71
62 71 68 83 57 71 47 33 68 71 59 62 69 66 64 68 1[43
4[25 45 45 45 45 45 45 45 45 45 45 45 25 30 25 71 1[35
35 25 4[45 10[68 2[45 45 2[25 2[51 51 53 11[{}85 90.9091
/CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray 2588 -208 a FA(CDMTCS)30
b(preprin)m(t)f(nr.)40 b(422/2012)p Black 0 TeXcolorgray
51 83 a Fz(Ko)t(c)l(hen-Sp)t(ec)l(k)l(er)45 b(Theorem)g(Revisited)i
(and)d(Strong)h(Incomputabilit)l(y)1200 307 y(of)g(Quan)l(tum)g
(Randomness)532 585 y Fy(Alastair)c(A.)f(Abb)s(ott,)1388
549 y Fx(\003)1469 585 y Fy(Cristian)h(S.)f(Calude,)2296
549 y Fx(y)2375 585 y Fy(and)g(Jonathan)g(Conder)3317
549 y Fx(z)671 768 y Fw(Dep)-5 b(artment)43 b(of)g(Computer)h(Scienc)-5
b(e,)44 b(University)g(of)f(A)n(uckland,)980 951 y(Private)k(Bag)g
(92019,)i(A)n(uckland,)h(New)d(Ze)-5 b(aland)1695 1229
y Fy(Karl)56 b(Sv)m(ozil)494 1411 y Fw(Institute)41 b(for)g(The)-5
b(or)g(etic)g(al)40 b(Physics,)j(Vienna)d(University)i(of)f(T)-7
b(e)i(chnolo)g(gy,)710 1594 y(Wie)g(dner)44 b(Hauptstr)-5
b(asse)44 b(8-10/136,)h(1040)e(Vienna)g(,)k(A)n(ustria)3140
1558 y Fx(x)1375 1824 y FA(\(Dated:)42 b(No)m(v)m(em)m(b)s(er)32
b(30,)f(2012\))1720 2044 y Fv(Abstract)91 2225 y FA(The)23
b(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)i(theorem)f(sho)m(ws)g(the)g(imp)s
(ossibilit)m(y)h(for)f(a)g(hidden)f(v)-5 b(ariable)25
b(theory)f(to)h(consisten)m(tly)0 2406 y(assign)45 b(truth)e(v)-5
b(alues)45 b(to)g(certain)g(\(\014nite\))g(sets)g(of)f(observ)-5
b(ables)45 b(in)f(a)g(w)m(a)m(y)i(that)e(is)h(non-con)m(textual)h(and)0
2586 y(consisten)m(t)28 b(with)d(quan)m(tum)h(mec)m(hanics.)40
b(If)26 b(w)m(e)h(require)e(non-con)m(textualit)m(y)-8
b(,)31 b(the)26 b(consequence)h(is)f(that)h(man)m(y)0
2767 y(observ)-5 b(ables)26 b(m)m(ust)f(not)g(ha)m(v)m(e)i
(pre-existing)f(de\014nite)f(v)-5 b(alues.)40 b(Ho)m(w)m(ev)m(er,)28
b(the)e(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)g(theorem)g(do)s(es)0
2947 y(not)34 b(allo)m(w)i(one)e(to)h(determine)f Fu(which)42
b FA(observ)-5 b(ables)35 b(m)m(ust)f(b)s(e)f(v)-5 b(alue)35
b(inde\014nite.)51 b(In)34 b(this)g(pap)s(er)f(w)m(e)h(presen)m(t)0
3128 y(an)g(impro)m(v)m(emen)m(t)i(on)e(the)g(Ko)s(c)m(hen-Sp)s(ec)m(k)
m(er)h(theorem)g(whic)m(h)f(allo)m(ws)i(one)e(to)h(actually)h(lo)s
(cate)g(observ)-5 b(ables)0 3308 y(whic)m(h)30 b(are)h
Fu(pr)-5 b(ovably)34 b(value)f(inde\014nite)p FA(.)91
3489 y(V)-8 b(arious)28 b(tec)m(hnical)h(and)d(subtle)h(asp)s(ects)h
(relating)g(to)g(this)f(formal)g(pro)s(of)g(and)f(its)i(connection)g
(to)g(quan)m(tum)0 3670 y(mec)m(hanics)k(are)g(discussed)e(in)h(the)g
(clear)h(formal)g(framew)m(ork)f(w)m(e)h(pro)m(vide.)43
b(This)30 b(result)h(is)g(then)g(utilised)h(for)0 3850
y(the)h(prop)s(osal)f(and)h(certi\014cation)h(of)f(a)h(dic)m(hotomic)g
(quan)m(tum)f(random)f(n)m(um)m(b)s(er)f(generator)j(op)s(erating)f(in)
g(a)0 4031 y(three-dimensional)e(Hilb)s(ert)f(space.)0
4298 y Ft(P)-7 b(A)n(CS)27 b(n)n(um)n(b)r(ers:)37 b(03.67.Lx,)25
b(05.40.-a,)g(03.65.T)-7 b(a,)26 b(03.67.Ac,)g(03.65.Aa)0
4528 y(Keyw)n(ords:)46 b(Ko)r(c)n(hen-Sp)r(ec)n(k)n(er)31
b(theorem,)j(quan)n(tum)g(v)-5 b(alue)33 b(inde\014niteness,)i(quan)n
(tum)e(randomness,)g(quan)n(tum)h(inde-)0 4709 y(terminism,)28
b(random)e(pro)r(cesses)p 0 TeXcolorgray 0 4990 300 4
v 17 5067 a Fs(\003)83 5097 y Ft(a.abb)r(ott@auc)n(kland.ac.nz)21
5191 y Fs(y)83 5222 y Ft(cristian@cs.auc)n(kland.ac.nz;)f(h)n
(ttp://www.cs.auc)n(kland.ac.nz/~cristian)21 5316 y Fs(z)83
5346 y Ft(jcon068@auc)n(klanduni.ac.nz)21 5441 y Fs(x)83
5471 y Ft(sv)n(ozil@tu)n(wien.ac.at;)h(h)n(ttp://tph.tu)n
(wien.ac.at/~sv)n(ozil)p 0 TeXcolorgray 0 TeXcolorgray
1870 5774 a Fy(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 83 a Fr(I.)104 b(LOCA)-9 b(TED)34 b(QUANTUM)h(V)-12
b(ALUE)35 b(INDEFINITENESS)0 425 y Fy(While)f(Bell's)g(theorem)g([1])g
(expresses)i(the)d(imp)s(ossibly)i(for)e(a)g(lo)s(cal)g(hidden)h(v)-5
b(ariable)34 b(theory)g(to)e(giv)m(e)0 600 y(the)27 b(same)g
(statistical)g(results)g(as)g(quan)m(tum)g(mec)m(hanics,)j(the)d(Ko)s
(c)m(hen-Sp)s(ec)m(k)m(er)h(theorem)f([2,)g(3)o(])g(pro)m(v)m(es)0
774 y(the)34 b(imp)s(ossibilit)m(y)h(for)e(a)g(hidden)i(v)-5
b(ariable)33 b(theory)h(to)f(ev)m(en)i(assign)f(truth)g(v)-5
b(alues)34 b(to)f(certain)h(\(\014nite\))0 948 y(sets)d(of)f(observ)-5
b(ables)31 b(in)f(a)g(w)m(a)m(y)h(that)f(is)g(non-con)m(textual)h(and)f
(consisten)m(t)i(with)f(quan)m(tum)g(mec)m(hanics.)0
1123 y(More)i(precisely)-8 b(,)35 b(it)d(expresses)k(a)c(con)m
(tradiction)i(b)s(et)m(w)m(een)g(the)f(follo)m(wing)g(presupp)s
(ositions:)p 0 TeXcolorgray 8 1451 a(\(P1\))p 0 TeXcolorgray
50 w(the)g(set)g(of)f(observ)-5 b(ables)35 b(in)d(question)j([4)o(])e
(ha)m(v)m(e)h(pre-assigned)g(de\014nite)g(v)-5 b(alues,)p
0 TeXcolorgray 8 1735 a(\(P2\))p 0 TeXcolorgray 50 w(the)32
b(outcomes)g(of)e(measuremen)m(ts)k(of)d(observ)-5 b(ables)33
b(are)e(non-con)m(textual;)i(that)d(is,)i(they)h(are)e(in-)249
1909 y(dep)s(enden)m(t)g(of)e(whatev)m(er)i(other)e(co-measurable)i
(observ)-5 b(ables)31 b(are)e(measured)i(alongside)f(them,)0
2237 y(along)35 b(with)g(the)h(requiremen)m(t)h(that)e(the)h
(relationship)g(b)s(et)m(w)m(een)h(hidden)f(v)-5 b(ariables)36
b(asso)s(ciated)g(with)0 2412 y(sets)49 b(of)d(co-measurable)j(observ)
-5 b(ables)49 b(b)s(eha)m(v)m(e)g(quasi-classically)-8
b(,)53 b(as)48 b(is)g(exp)s(ected)h(from)e(quan)m(tum)0
2586 y(mec)m(hanics.)k(This)36 b(requiremen)m(t)h(means)e(that)f(in)h
(an)m(y)g(\\complete")h(set)f(of)f(m)m(utually)h(co-measurable)0
2760 y(y)m(es-no)45 b(prop)s(ositions)f(\(represen)m(ted)j(b)m(y)e(m)m
(utually)g(orthogonal)e(pro)5 b(jectors)45 b(spanning)g(the)f(Hilb)s
(ert)0 2935 y(space\))34 b(exactly)g(one)e(prop)s(osition)h(should)h(b)
s(e)e(assigned)i(the)f(v)-5 b(alue)33 b(\\y)m(es".)0
3159 y(Thereb)m(y)-8 b(,)55 b(the)49 b(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)i
(theorem)e(do)s(es)g Fw(not)h(explicitly)f(identify)g
Fy(certain)g(particular)g(ob-)0 3333 y(serv)-5 b(ables)38
b(whic)m(h)h(violate)e(one)g(or)g(more)g(of)f(these)i(presupp)s
(ositions.)58 b(Indeed,)40 b(the)d(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)0
3508 y(theorem)f(has)g(not)f(b)s(een)i(designed)g(to)e(actually)h
Fw(lo)-5 b(c)g(ate)35 b Fy(the)h(particular)f(observ)-5
b(able\(s\))37 b(whic)m(h)g(w)m(ould)0 3682 y(violate)30
b(the)g(assumptions.)44 b(This)31 b(is)f(not)f(seen)i(as)f(a)f
(de\014ciency)j(of)d(the)h(theorem,)h(b)s(ecause)g(its)f(con)m(ten)m(t)
0 3856 y(su\016ces)38 b(for)d(the)h(man)m(y)h(\(mostly)g(metaph)m
(ysical\))h(purp)s(oses)f(it)e(has)i(b)s(een)f(designed)h(for)f(and)g
(applied)0 4031 y(to.)0 4255 y(In)i(what)f(follo)m(ws)h(w)m(e)g(shall)g
(pursue)g(a)f(threefold)h(agenda.)58 b(First,)38 b(w)m(e)g(shall)g(mak)
m(e)g(explicit)h(and)e(for-)0 4429 y(malize)30 b(the)g(ph)m(ysical)h
(notions)e(in)m(v)m(olv)m(ed,)k(in)c(particular,)i(v)-5
b(alue)29 b(\(in-\)de\014niteness)j(and)d(con)m(textualit)m(y)-8
b(.)0 4604 y(W)g(e)29 b(shall)f(thereb)m(y)i(remain)f(within)g(the)g
(formalism)g(of)e(quan)m(tum)j(logic,)f(as)g(outlined)g(b)m(y)g
(Birkho\013)f(and)0 4778 y(v)m(on)33 b(Neumann)h([5,)e(6],)h(as)g(w)m
(ell)g(as)g(b)m(y)h(Ko)s(c)m(hen)f(and)g(Sp)s(ec)m(k)m(er)h([7,)f(8].)0
5002 y(This)f(enables)g(us)f(to)f(sp)s(ecify)i(exactly)g(the)f(actual)f
Fw(lo)-5 b(c)g(ation)33 b(of)f(br)-5 b(e)g(akdown)32
b(of)h(classic)-5 b(ality)29 b Fy(within)j(the)0 5176
y(set)f(of)e(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)k(observ)-5
b(ables;)32 b(that)e(is,)h(w)m(e)g(iden)m(tify)h(the)e(observ)-5
b(ables)32 b(for)e(whic)m(h)h(classicalit)m(y)0 5351
y(indadv)m(ertedly)k(renders)f(complete)f(con)m(tradictions,)h(no)e
(matter)h(what)f(their)h(\(classical\))h(outcome)f(or)0
5525 y(v)-5 b(alue)25 b(ma)m(y)g(b)s(e.)41 b(In)25 b(order)f(to)g(do)h
(this,)i(w)m(e)e(pro)m(v)m(e)h(a)e(mo)s(di\014ed)h(v)m(ersion)h(of)e
(the)h(original)f(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)p 0 TeXcolorgray
1870 5774 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 83 a Fy(theorem)29 b(in)f(whic)m(h)h(w)m(e)g(obtain)e(a)
h(con)m(tradiction)h(b)s(et)m(w)m(een)g(the)g(presupp)s(osition)g
(\(P2\))f(and)g(a)f(crucially)0 257 y(w)m(eak)m(er)34
b(v)m(ersion)h(of)d(\(P1\).)0 482 y(Second,)g(w)m(e)h(will)e(clarify)h
(in)f(what)g(sense)i(the)f(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)h(and)e
(Bell-t)m(yp)s(e)h(theorems)h(imply)f(the)0 656 y(violation)42
b(of)g(the)g(non-con)m(textualit)m(y)i(assumption)f(\(P2\).)71
b(F)-8 b(ormalization)42 b(has)g(b)s(ecome)h(necessary)0
830 y(b)s(ecause)25 b(in)f(the)h(literature)f(the)g(term)h(\\con)m
(textualit)m(y")g(is)g(often)f(iden)m(ti\014ed)h(with)g(violations)f
(of)g(certain)0 1005 y(Bell-t)m(yp)s(e)29 b(inequalities)i(on)d(single)
h(quan)m(ta)g([9{12)o(])g(in)f(the)h(absence)h(of)d(strict)i(lo)s
(calit)m(y)g(conditions)h([13)o(].)0 1229 y(W)-8 b(e)58
b(p)s(oin)m(t)g(out)g(that,)63 b(while)c(from)f(a)f(purely)i(logical)f
(p)s(oin)m(t)g(of)f(view,)65 b(violation)58 b(of)g(the)g(non-)0
1403 y(con)m(textualit)m(y)41 b(assumption)f(\(P2\))f(is)g
Fw(su\016cient)f Fy(to)h(in)m(terpret)h(the)f(Ko)s(c)m(hen-Sp)s(ec)m(k)
m(er)i(theorem,)g(it)e(is)0 1577 y(b)m(y)31 b(no)e(means)i
Fw(ne)-5 b(c)g(essary)29 b Fy(for,)h(or)g(implied)h(b)m(y)-8
b(,)31 b(the)f(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)j(theorem.)43
b(Indeed,)32 b(violation)e(of)0 1752 y(the)36 b(primary)h(assumption)g
(of)e(v)-5 b(alue)37 b(de\014niteness)h(\(P1\))e(presen)m(ts)i(a)e
(viable)h(\(alb)s(eit)f(also)f(not)h(neces-)0 1926 y(sary)-8
b(,)32 b(as)f(other,)h(more)g(exotic,)g(p)s(ossibilities)h
(demonstrate;)g(e.g.,)f(Ref.)43 b([14]\))31 b(option)g(to)g(in)m
(terpret)h(the)0 2100 y(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)j(theorem.)0
2325 y(Third,)c(w)m(e)g(shall)g(also)f(consider)h(whic)m(h)h
(collections)f(of)f(observ)-5 b(ables)31 b(do)f(not)g(render)h(Ko)s(c)m
(hen-Sp)s(ec)m(k)m(er)0 2499 y(con)m(tradictions.)59
b(Restricting)38 b(ourselv)m(es)i(to)d(these)i(v)m(ery)g(limited)f
(collections)h(w)m(ould)f(allo)m(w)g(main)m(te-)0 2673
y(nance)i(of)f(assumptions)i(\(P1\))f(and)f(\(P2\))h(ab)s(out)f(quan)m
(tized)i(systems,)j(but)39 b(w)m(ould)i(also)e(reduce)i(the)0
2848 y(domain)33 b(of)f(conceiv)-5 b(able)34 b(observ)-5
b(ables)34 b(dramatically)-8 b(.)0 3072 y(The)38 b(results)g(presen)m
(ted)i(can)d(b)s(e)g(in)m(terpreted)i(as)e(one)g(natural)g(consequence)
j(of,)e(and)f(adv)-5 b(ancemen)m(t)0 3246 y(b)s(ey)m(ond,)30
b(the)e(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)j(theorem.)43 b(They)29
b(ma)m(y)g(b)s(e)f(particularly)h(imp)s(ortan)m(t)f(if)f(w)m(e)i(in)m
(v)m(estigate)0 3421 y(the)47 b(concrete)h(\\underpinning")g(of)e(the)i
(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)h(theorem:)72 b(exactly)49
b(wh)m(y)f(and)f(where)h(a)0 3595 y(quan)m(tized)34 b(system)h(disob)s
(eys)f(classicalit)m(y)-8 b(.)0 3819 y(Apart)32 b(from)f(foundational)h
(issues,)i(there)f(is)f(also)g(a)f(concrete)i(application)g(whic)m(h)g
(pro\014ts)f(from)g(suc)m(h)0 3993 y(quan)m(tum)39 b(information)f
(theoretic)i(\014ndings.)61 b(Con)m(temp)s(orary)39 b(quan)m(tum)h
(random)e(n)m(um)m(b)s(er)i(genera-)0 4168 y(tors)33
b(can)g(no)g(longer)g(b)s(e)g(based)h(up)s(on)f(and)g(certi\014ed)i(b)m
(y)f(our)f(con)m(viction)h(in)f(the)h(quan)m(tum)g(p)s(ostulate)0
4342 y(of)i Fw(c)-5 b(omplementarity)36 b Fy(alone.)57
b(They)39 b(should)e(also)g(b)s(e)h(certi\014ed)g(b)m(y)g(strictly)g
(stronger)f(forms)g(of)g(non-)0 4516 y(classicalit)m(y)c(than)d
(complemen)m(tarit)m(y)-8 b(,)33 b Fw(quantum)g(value)g
(inde\014niteness)c Fy(b)s(eing)h(one)h(of)f(them)h([15)o(].)43
b(F)-8 b(or)0 4691 y(these)47 b(purp)s(oses,)j(the)c(Ko)s(c)m(hen-Sp)s
(ec)m(k)m(er)i(theorem,)h(as)d(w)m(ell)h(as)e(other)h(Bell-t)m(yp)s(e)g
(theorems,)51 b(serv)m(e)0 4865 y(merely)34 b(as)e Fw(indic)-5
b(ations)31 b Fy(that)h(quan)m(tum)h(v)-5 b(alue)33 b(inde\014niteness)
i(p)s(ossibly)f(\\happ)s(ens)f(somewhere")h(b)s(e-)0
5039 y(cause)24 b(it)f(cannot)g(b)s(e)g(excluded)j(that)c(particular)i
(individual)g(quan)m(ta)g([16)o(])f(could)h(still)f(b)s(e)h(v)-5
b(alue)23 b(de\014nite.)0 5264 y(Unfortunately)-8 b(,)53
b(b)m(y)c(their)g(v)m(ery)h(design,)k(these)c(theorems)f(cannot)g
(guaran)m(tee)g(that)f(a)g(particular)0 5438 y(observ)-5
b(able)32 b(actually)f Fw(is)f Fy(v)-5 b(alue)31 b(inde\014nite.)44
b(One)31 b(could,)h(for)e(instance,)i(not)e(exclude)j(that)d(a)g
(\\demon")p 0 TeXcolorgray 1870 5774 a(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 83 a Fy(could)46 b(act)f(in)g(suc)m(h)h(a)f(w)m(a)m(y)h
(that)f(all)g(observ)-5 b(ables)46 b(actually)g(measured)g(w)m(ould)g
(b)s(e)g(v)-5 b(alue)45 b(de\014nite,)0 257 y(whereas)34
b(other)f(observ)-5 b(ables)34 b(whic)m(h)g(are)f(not)f(measured)i(w)m
(ould)g(b)s(e)e(v)-5 b(alue)34 b(inde\014nite.)0 482
y(Ho)m(w)m(ev)m(er,)j(for)d(quan)m(tum)i(random)e(n)m(um)m(b)s(er)i
(generators)f(w)m(e)h(need)f(certi\014cation)g(of)f(v)-5
b(alue)35 b(inde\014nite-)0 656 y(ness)25 b(on)f(the)g
Fw(p)-5 b(articular)27 b(observables)e(utilise)-5 b(d)27
b(for)g(that)g(purp)-5 b(ose)p Fy(.)40 b(Th)m(us,)27
b(one)d(needs)i(a)d(di\013eren)m(t,)k(in)d(the)0 830
y(sense)38 b(of)f(lo)s(catedness)h(of)e(violation)h(of)f
(non-classicalit)m(y)-8 b(,)40 b(stronger)d(t)m(yp)s(e)g(of)g(theorem)g
(than)g(Ko)s(c)m(hen)0 1005 y(and)c(Sp)s(ec)m(k)m(er)i(presen)m(t,)f
(an)f(argumen)m(t)g(that)g(could)g(\(formally\))g Fw(assur)-5
b(e)32 b Fy(that,)h(if)f(quan)m(tum)i(mec)m(hanics)0
1179 y(is)40 b(correct,)i(the)e(particular)f(quan)m(tum)i(observ)-5
b(ables)41 b(used)g(for)e(the)h(generation)f(of)g(random)h(n)m(um)m(b)s
(er)0 1353 y(sequences)31 b(are)d Fw(pr)-5 b(ovably)29
b(value)h(inde\014nite,)e Fy(hence)h(the)f(measured)h(quan)m(tum)g
(sequences)i(cannot)d(refer)0 1528 y(to)k(an)m(y)h(consisten)m(t)i
(prop)s(ert)m(y)e(of)g(the)g(measured)h(quan)m(ta)f(alone.)0
1752 y(This)46 b(comm)m(unication)h(presen)m(ts)g(suc)m(h)g(an)e
(argumen)m(t,)k(whic)m(h)e(will)f(b)s(e)f(utilised)i(for)d(a)h(dic)m
(hotomic)0 1926 y(quan)m(tum)29 b(random)f(n)m(um)m(b)s(er)h(generator)
f(op)s(erating)g(in)g(a)f(three-dimensional)j(Hilb)s(ert)e(space.)43
b(By)29 b(no)m(w)0 2100 y(it)42 b(should)h(b)s(e)f(clear)h(that)e(suc)m
(h)j(a)d(device)j(w)m(ould)f(b)s(e)f(strictly)i(preferen)m(tial)f(to)f
(previous)h(prop)s(osals)0 2275 y(using)38 b(merely)h(quan)m(tum)g
(complemen)m(tarit)m(y)-8 b(,)42 b(or,)c(in)g(addition)g(to)f(that,)i
(some)f(t)m(yp)s(e)g(of)g(non-lo)s(cated)0 2449 y(violations)33
b(of)f(global)h(v)-5 b(alue)33 b(de\014niteness.)0 2673
y(In)j(what)h(follo)m(ws)f(w)m(e)i(shall)e(\014rst)h(presen)m(t)g(the)g
(basic)g(de\014nitions,)h(then)f(state)f(and)g(pro)m(v)m(e)i(the)e
(afore-)0 2848 y(men)m(tioned)f(result,)f(and)f(subsequen)m(tly)j
(apply)e(this)f(result)h(to)f(the)g(prop)s(osal)g(of)f(a)h(quan)m(tum)h
(random)0 3022 y(n)m(um)m(b)s(er)49 b(generator)f(based)g(on)g
Fw(lo)-5 b(c)g(ate)g(d)48 b(quantum)h(value)g(inde\014niteness)d
Fy(whic)m(h)j(pro)s(duces,)j(as)c(w)m(e)0 3196 y(pro)m(v)m(e,)34
b(a)e(strongly)h(incomputable)h(sequence)i(of)c(bits.)0
3788 y Fr(I)s(I.)104 b(DEFINITIONS)0 4137 y(A.)h(Notation)34
b(and)h(formal)g(framew)m(ork)0 4479 y Fy(As)j(usual)g(w)m(e)h(denote)f
(the)g(set)g(of)f(complex)i(n)m(um)m(b)s(ers)h(b)m(y)e
Fq(C)f Fy(and)h(use)h(the)f(standard)f(quan)m(tum)i(me-)0
4653 y(c)m(hanical)k(bra-k)m(et)f(notation;)k(that)c(is,)j(w)m(e)e
(denote)f(v)m(ectors)i(in)e(the)g(Hilb)s(ert)g(space)h
Fq(C)3324 4617 y Fp(n)3413 4653 y Fy(b)m(y)g Fo(j)o(\001i)p
Fy(.)71 b(W)-8 b(e)0 4828 y(will)31 b(ha)m(v)m(e)g(particular)g(in)m
(terest)g(in)f(the)h(pro)5 b(jection)31 b(op)s(erators)f(pro)5
b(jecting)31 b(on)f(to)f(the)i(linear)f(subspace)0 5002
y(spanned)c(b)m(y)g(a)f(non-zero)g(v)m(ector)h Fo(j)o
Fn( )t Fo(i)p Fy(,)h(namely)f Fn(P)1828 5017 y Fp( )1908
5002 y Fy(=)2021 4955 y Fx(j)p Fp( )r Fx(ih)p Fp( )r
Fx(j)p 2021 4979 192 4 v 2031 5036 a(h)p Fp( )r Fx(j)p
Fp( )r Fx(i)2223 4995 y Fy(;)2275 5002 y(w)m(e)g(will)f(use)h(this)g
(notation)e(for)h(pro)5 b(jection)0 5176 y(op)s(erators)35
b(throughout)g(this)h(pap)s(er.)51 b(W)-8 b(e)36 b(brie\015y)g(note)f
(that)g(in)g(this)h(pap)s(er)f(w)m(e)i(only)e(consider)i(pure)0
5351 y(quan)m(tum)31 b(states,)g(and)f(will)g(accordingly)h(not)e
(explicitly)j(sp)s(ecify)f(quan)m(tum)g(states)g(as)e(pure)i(states)f
(as)0 5525 y(opp)s(osed)j(to)f(mixed)i(states.)p 0 TeXcolorgray
1870 5774 a(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 83 a Fy(In)30 b(order)g(to)g(discuss)i(hidden)f(v)-5
b(ariable)30 b(theories)h(precisely)h(and)e(without)g(an)m(y)h(of)e
(the)h(am)m(biguit)m(y)i(that)0 257 y(is)27 b(common)f(in)h(suc)m(h)g
(discussion,)j(w)m(e)d(presen)m(t)h(an)e(explicit)i(formal)d(framew)m
(ork)j(in)e(whic)m(h)i(w)m(e)f(will)f(w)m(ork)0 432 y(in.)0
656 y(W)-8 b(e)42 b(\014x)g(a)g(p)s(ositiv)m(e)h(in)m(teger)f
Fn(n)p Fy(.)71 b(Let)42 b Fo(O)k(\022)d(f)p Fn(P)1814
671 y Fp( )1910 656 y Fo(j)f(j)p Fn( )t Fo(i)h(2)g Fq(C)2338
620 y Fp(n)2385 656 y Fo(g)f Fy(b)s(e)g(a)f(nonempt)m(y)i(set)f(of)g
(pro)5 b(jection)0 830 y(observ)-5 b(ables)34 b(in)e(the)g(Hilb)s(ert)h
(space)g Fq(C)1461 794 y Fp(n)1540 830 y Fy(and)f Fo(C)i(\022)28
b(ff)p Fn(P)2083 845 y Fm(1)2122 830 y Fn(;)17 b(P)2229
845 y Fm(2)2268 830 y Fn(;)g(:)g(:)g(:)f(P)2506 845 y
Fp(n)2553 830 y Fo(g)27 b(j)h Fn(P)2749 845 y Fp(i)2804
830 y Fo(2)g(O)36 b Fy(and)d Fo(h)p Fn(i)p Fo(j)p Fn(j)6
b Fo(i)27 b Fy(=)g(0)33 b(for)f Fn(i)c Fo(6)p Fy(=)0
1005 y Fn(j)6 b Fo(g)47 b Fy(a)f(set)i(of)e(measuremen)m(t)k(con)m
(texts)e(o)m(v)m(er)g Fo(O)s Fy(.)87 b(A)47 b(con)m(text)h
Fn(C)59 b Fo(2)52 b(C)i Fy(is)47 b(th)m(us)h(a)f(maximal)g(set)h(of)0
1179 y(compatible)25 b(\(i.e.)41 b(they)24 b(can)g(b)s(e)g(sim)m
(ultaneous)i(measured\))f(pro)5 b(jection)25 b(observ)-5
b(ables.)42 b(Let)24 b Fn(v)31 b Fy(:)d Fo(f)p Fy(\()p
Fn(o;)17 b(C)7 b Fy(\))27 b Fo(j)0 1353 y Fn(o)k Fo(2)g(O)s
Fn(;)17 b(C)38 b Fo(2)31 b(C)39 b Fy(and)32 b Fn(o)f
Fo(2)g Fn(C)7 b Fo(g)1146 1297 y Fp(o)1119 1353 y Fo(\000)-77
b(!)30 b(f)p Fy(0)p Fn(;)17 b Fy(1)p Fo(g)34 b Fy(b)s(e)g(a)g(partial)h
(function,)g(i.e.)g(it)g(ma)m(y)g(b)s(e)f(unde\014ned)j(for)d(some)0
1528 y(v)-5 b(alues)48 b(in)g(its)g(domain.)88 b(F)-8
b(or)47 b(some)h Fn(o;)17 b(o)1601 1491 y Fx(0)1676 1528
y Fo(2)54 b(O)c Fy(and)e Fn(C)r(;)17 b(C)2323 1491 y
Fx(0)2398 1528 y Fo(2)53 b(C)h Fy(w)m(e)48 b(sa)m(y)h
Fn(v)t Fy(\()p Fn(o;)17 b(C)7 b Fy(\))52 b(=)g Fn(v)t
Fy(\()p Fn(o)3576 1491 y Fx(0)3599 1528 y Fn(;)17 b(C)3720
1491 y Fx(0)3743 1528 y Fy(\))48 b(if)0 1702 y Fn(v)t
Fy(\()p Fn(o;)17 b(C)7 b Fy(\))p Fn(;)17 b(v)t Fy(\()p
Fn(o)475 1666 y Fx(0)497 1702 y Fn(;)g(C)618 1666 y Fx(0)641
1702 y Fy(\))28 b(are)h(b)s(oth)f(de\014ned)j(and)d(ha)m(v)m(e)i(equal)
g(v)-5 b(alues.)43 b(If)29 b(either)g Fn(v)t Fy(\()p
Fn(o;)17 b(C)7 b Fy(\))28 b(or)g Fn(v)t Fy(\()p Fn(o)3352
1666 y Fx(0)3375 1702 y Fn(;)17 b(C)3496 1666 y Fx(0)3519
1702 y Fy(\))29 b(are)g(not)0 1876 y(de\014ned)34 b(or)e(they)h(are)f
(b)s(oth)g(de\014ned)i(but)f(ha)m(v)m(e)h(di\013eren)m(t)f(v)-5
b(alues,)33 b(then)g Fn(v)t Fy(\()p Fn(o;)17 b(C)7 b
Fy(\))27 b Fo(6)p Fy(=)h Fn(v)t Fy(\()p Fn(o)3291 1840
y Fx(0)3314 1876 y Fn(;)17 b(C)3435 1840 y Fx(0)3458
1876 y Fy(\).)43 b(W)-8 b(e)33 b(will)0 2051 y(call)i
Fn(v)j Fy(an)d Fw(assignment)h(function)p Fy(,)f(and)g(it)f(expresses)k
(the)d(notion)g(of)f(a)h(hidden)g(v)-5 b(ariable:)49
b(it)34 b(sp)s(eci\014es)0 2225 y(in)f(adv)-5 b(ance)33
b(the)g(result)h(obtained)f(from)f(the)h(measuremen)m(t)i(of)d(an)g
(observ)-5 b(able.)0 2449 y(An)23 b(observ)-5 b(able)25
b Fn(o)i Fo(2)i Fn(C)h Fy(is)23 b Fw(value)j(de\014nite)k
Fy(in)24 b(the)f(con)m(text)i Fn(C)30 b Fy(under)24 b
Fn(v)j Fy(if)c Fn(v)t Fy(\()p Fn(o;)17 b(C)7 b Fy(\))22
b(is)i(de\014ned.)42 b(Otherwise)0 2623 y Fn(o)35 b Fy(is)g
Fw(value)i(inde\014nite)42 b Fy(in)35 b Fn(C)7 b Fy(.)51
b(If)35 b Fn(o)f Fy(is)i(v)-5 b(alue)35 b(de\014nite)i(in)e(all)g(con)m
(texts)i Fn(C)h Fo(2)33 b(C)41 b Fy(for)34 b(whic)m(h)j
Fn(o)32 b Fo(2)g Fn(C)42 b Fy(then)0 2798 y(w)m(e)36
b(simply)i(sa)m(y)e(that)f Fn(o)h Fy(is)f(v)-5 b(alue)36
b(de\014nite)h(under)f Fn(v)t Fy(.)52 b(Similarly)-8
b(,)37 b(if)f Fn(o)f Fy(is)h(v)-5 b(alue)36 b(inde\014nite)h(in)f(all)f
(suc)m(h)0 2972 y(con)m(texts)48 b Fn(C)53 b Fy(then)47
b(w)m(e)h(sa)m(y)f(that)f Fn(o)h Fy(is)g(v)-5 b(alue)46
b(inde\014nite)i(under)f Fn(v)t Fy(.)85 b(The)47 b(set)h
Fo(O)h Fy(is)e Fw(value)g(de\014nite)0 3147 y Fy(under)30
b Fn(v)i Fy(if)d(ev)m(ery)i(observ)-5 b(able)30 b Fn(o)e
Fo(2)g(O)k Fy(is)d(v)-5 b(alue)30 b(de\014nite)g(under)g
Fn(v)t Fy(.)42 b(This)30 b(notion)f(of)f(v)-5 b(alue)30
b(de\014niteness)0 3321 y(corresp)s(onds)d(to)e(the)h(classical)g
(notion)g(of)f(determinism:)42 b(an)25 b(observ)-5 b(able)27
b(is)e(v)-5 b(alue)26 b(de\014nite)h(if)e Fn(v)k Fy(assigns)0
3495 y(it)24 b(a)f(de\014nite)j(v)-5 b(alue|i.e.)24 b(w)m(e)h(are)f
(able)g(to)f(predict)i(in)f(adv)-5 b(ance)25 b(the)f(v)-5
b(alue)24 b(obtained)h(via)f(measuremen)m(t.)0 3719 y(An)35
b(observ)-5 b(able)36 b Fn(o)c Fo(2)g(O)38 b Fy(is)d
Fw(non-c)-5 b(ontextual)44 b Fy(under)36 b Fn(v)i Fy(if)d(for)f(all)h
(con)m(texts)i Fn(C)r(;)17 b(C)3024 3683 y Fx(0)3078
3719 y Fo(2)32 b(C)41 b Fy(with)35 b Fn(o)d Fo(2)g Fn(C)r(;)17
b(C)3863 3683 y Fx(0)0 3894 y Fy(w)m(e)41 b(ha)m(v)m(e)f
Fn(v)t Fy(\()p Fn(o;)17 b(C)7 b Fy(\))39 b(=)g Fn(v)t
Fy(\()p Fn(o;)17 b(C)1088 3858 y Fx(0)1111 3894 y Fy(\).)64
b(Otherwise,)43 b Fn(v)g Fy(is)d Fw(c)-5 b(ontextual)p
Fy(.)64 b(Note)40 b(that)f(an)g(observ)-5 b(able)41 b(whic)m(h)g(is)0
4068 y(v)-5 b(alue)40 b(inde\014nite)h(in)f(a)g(con)m(text)h(is)f(alw)m
(a)m(ys)h(con)m(textual)g(ev)m(en)h(if)d(it)h(tak)m(es)h(the)f(same)g
(v)-5 b(alue)41 b(in)f(ev)m(ery)0 4242 y(con)m(text)f(in)f(whic)m(h)h
(it)f(is)g(v)-5 b(alue)38 b(de\014nite.)60 b(On)38 b(the)g(other)g
(hand,)h(if)e(an)h(observ)-5 b(able)39 b(is)f(v)-5 b(alue)38
b(de\014nite)0 4417 y(in)j(all)g(con)m(texts)i(that)e(it)g(is)g(in,)j
(it)d(can)g(b)s(e)g(either)h(con)m(textual)h(or)d(not)h(\(and)g(in)h
(the)f(latter)g(case)h(its)0 4591 y(v)-5 b(alue)34 b(is)g(constan)m(t)g
(in)g(all)f(con)m(texts)i(con)m(taining)f(it\))f(dep)s(ending)i(on)e
Fn(v)t Fy(.)46 b(The)34 b(set)g(of)f(observ)-5 b(ables)35
b Fo(O)i Fy(is)0 4765 y Fw(non-c)-5 b(ontextual)49 b
Fy(under)40 b Fn(v)j Fy(if)d(ev)m(ery)h(observ)-5 b(able)40
b Fn(o)g Fo(2)f(O)k Fy(whic)m(h)e(is)f(not)f(v)-5 b(alue)40
b(inde\014nite)h(\(i.e.)f(v)-5 b(alue)0 4940 y(de\014nite)41
b(in)f Fw(some)46 b Fy(con)m(text\))41 b(is)f(non-con)m(textual)h
(under)g Fn(v)t Fy(.)64 b(Otherwise,)43 b(the)d(set)h(of)e(observ)-5
b(ables)41 b Fo(O)0 5114 y Fy(is)h Fw(c)-5 b(ontextual)p
Fy(.)72 b(F)-8 b(urther,)44 b(w)m(e)f(sa)m(y)g(that)f(the)h(set)f(of)g
(observ)-5 b(ables)43 b Fo(O)i Fy(is)e Fw(str)-5 b(ongly)43
b(c)-5 b(ontextual)53 b Fy(under)0 5289 y Fn(v)44 b Fy(if)c(ev)m(ery)j
(observ)-5 b(able)41 b Fn(o)g Fo(2)g(O)j Fy(is)d(con)m(textual)g(under)
g Fn(v)t Fy(.)67 b(Non-con)m(textualit)m(y)42 b(corresp)s(onds)g(to)e
(the)0 5463 y(classical)29 b(notion)e(that)g(the)h(v)-5
b(alue)28 b(obtained)g(via)g(measuremen)m(t)h(is)f(indep)s(enden)m(t)i
(of)d(other)g(compatible)p 0 TeXcolorgray 1870 5774 a(5)p
0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 83 a Fy(observ)-5 b(ables)34 b(measured)g(alongside)g
(it.)0 307 y(Ev)m(ery)g(strongly)e(con)m(textual)h(set)g(of)e(observ)-5
b(ables)34 b(under)e Fn(v)k Fy(is)c(con)m(textual)h(under)g
Fn(v)t Fy(,)f(pro)m(vided)h(that)f Fn(v)0 482 y Fy(is)e(not)g
(unde\014ned)i(ev)m(erywhere.)46 b(Ho)m(w)m(ev)m(er)32
b(the)e(con)m(v)m(erse)j(implication)e(is)f(false,)h(as)f(w)m(e)h(will)
g(discuss)h(in)0 656 y(Section)h(I)s(I)16 b(C.)0 880
y(If)40 b(an)h(observ)-5 b(able)41 b Fn(o)g Fy(is)g(non-con)m(textual)g
(then)g(it)g(is)g(v)-5 b(alue)41 b(de\014nite,)i(but)e(this)g(is)g(not)
f(true)h(for)f(sets)0 1054 y(of)34 b(observ)-5 b(ables:)50
b Fo(O)37 b Fy(can)e(b)s(e)g(non-con)m(textual)h(but)f(not)g(v)-5
b(alue)35 b(de\014nite)h(if)e(it)h(con)m(tains)h(an)e(observ)-5
b(able)0 1229 y(whic)m(h)34 b(is)f(v)-5 b(alue)33 b(inde\014nite.)0
1453 y(An)g(assignmen)m(t)h(function)f Fn(v)k Fy(is)c
Fw(admissible)38 b Fy(if)32 b(the)h(follo)m(wing)g(hold)g(for)f(all)h
Fn(C)h Fo(2)28 b(C)6 b Fy(:)p 0 TeXcolorgray 149 1978
a Fo(\017)p 0 TeXcolorgray 50 w Fy(if)32 b(there)i(exists)g(an)f
Fn(o)27 b Fo(2)h Fn(C)40 b Fy(with)33 b Fn(v)t Fy(\()p
Fn(o;)17 b(C)7 b Fy(\))27 b(=)g(1,)33 b(then)g Fn(v)t
Fy(\()p Fn(o)2385 1942 y Fx(0)2408 1978 y Fn(;)17 b(C)7
b Fy(\))27 b(=)h(0)k(for)g(all)g Fn(o)3110 1942 y Fx(0)3161
1978 y Fo(2)c Fn(C)h Fo(n)22 b(f)p Fn(o)p Fo(g)p Fy(,)p
0 TeXcolorgray 149 2509 a Fo(\017)p 0 TeXcolorgray 50
w Fy(if)32 b(there)i(exists)g(an)f Fn(o)27 b Fo(2)h Fn(C)40
b Fy(suc)m(h)34 b(that)e Fn(v)t Fy(\()p Fn(o)1838 2473
y Fx(0)1861 2509 y Fn(;)17 b(C)7 b Fy(\))27 b(=)h(0)k(for)g(all)h
Fn(o)2564 2473 y Fx(0)2614 2509 y Fo(2)c Fn(C)g Fo(n)22
b(f)p Fn(o)p Fo(g)p Fy(,)32 b(then)h Fn(v)t Fy(\()p Fn(o;)17
b(C)7 b Fy(\))27 b(=)g(1.)0 3034 y(In)k(the)g(discussion)i(of)d(hidden)
i(v)-5 b(ariables,)32 b(w)m(e)g(do)e(not)h(concern)h(ourselv)m(es)h
(with)e(the)g(mec)m(hanism)i(of)e Fn(v)t Fy(,)0 3209
y(but)h(rather)g(with)h(its)f(p)s(ossible)h(existence)i(sub)5
b(ject)33 b(to)f(certain)g(constrain)m(ts)i(\(sp)s(eci\014cally)-8
b(,)34 b(the)e(admis-)0 3383 y(sibilit)m(y)j(of)d Fn(v)t
Fy(|w)m(e)h(justify)h(this)g(more)f(fully)h(in)f(Section)h(I)s(I)s
(I|requires)g(that)f(functions)h(of)e(the)h(v)-5 b(alues)0
3557 y(asso)s(ciated)45 b(with)g(compatible)h(observ)-5
b(ables)46 b(satisfy)f(the)g(predictions)h(of)e(quan)m(tum)i(theory\).)
79 b(The)0 3732 y(notion)36 b(of)f(admissibilit)m(y)j(serv)m(es)g(as)e
(an)g(analogue)g(to)f(the)h(notion)g(of)f(a)g Fw(two-value)-5
b(d)38 b(\(disp)-5 b(ersionless\))0 3906 y(me)g(asur)g(e)47
b Fy(that)41 b(is)g(used)h(in)f(quan)m(tum)g(logic)g([17{22)o(],)i(the)
e(di\013erence)h(b)s(eing)f(that)f(the)h(de\014nition)h(is)0
4081 y(sound)29 b(ev)m(en)h(when)g(not)f(all)f(observ)-5
b(ables)30 b(are)f(v)-5 b(alue)29 b(de\014nite.)43 b(This)30
b(distinction)g(is)f(subtle)h(but,)f(nev)m(er-)0 4255
y(theless,)h(will)e(allo)m(w)g(us)g(to)f(form)m(ulate)h(kno)m(wn)h
(results,)h(suc)m(h)e(as)g(the)g(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)i
(theorem)e([3],)g(as)0 4429 y(w)m(ell)i(as)g(the)f(stronger)h(results)g
(whic)m(h)h(w)m(e)f(will)g(presen)m(t)h(in)e(this)h(pap)s(er.)43
b(Ho)m(w)m(ev)m(er,)32 b(w)m(e)e(stress)h(that)e(this)0
4604 y(is)e(still)g(a)g(purely)h(formal)e(framew)m(ork)h(and)g(that,)h
(in)f(order)g(to)f(mak)m(e)i(a)e(connection)i(to)e(ph)m(ysical)i
(realit)m(y)-8 b(,)0 4778 y(further)40 b(assumptions)i(m)m(ust)f(b)s(e)
f(made,)j(sp)s(eci\014cally)f(p)s(ertaining)e(to)g(the)g(nature)g(of)g
(measuremen)m(t;)0 4952 y(w)m(e)34 b(defer)f(this)g(connection)h(to)e
(ph)m(ysical)i(realit)m(y)g(to)e(Section)i(I)s(I)s(I.)0
5176 y(W)-8 b(e)25 b(brie\015y)g(note)g(that)f(this)h(formal)f(framew)m
(ork)h(could)g(b)s(e)g(presen)m(ted)h(in)f(an)f(ev)m(en)i(more)e(more)h
(abstract)0 5351 y(setting)39 b(without)f(reference)h(to)f(Hilb)s(ert)g
(spaces,)j(but)d(for)f(the)h(sak)m(e)h(of)f(concreteness)i(w)m(e)f(a)m
(v)m(oid)g(this)0 5525 y(here.)p 0 TeXcolorgray 1870
5774 a(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 83 a Fr(B.)105 b(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)36
b(theorem)0 425 y Fy(Using)42 b(the)g(framew)m(ork)h(dev)m(elop)s(ed,)j
(the)c(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)i(theorem)f([3],)h(whic)m(h)f(w)m
(e)g(outlined)f(and)0 600 y(discussed)31 b(in)d(the)g(in)m(tro)s
(duction,)i(can)e(b)s(e)g(presen)m(ted)i(in)e(the)g(follo)m(wing)h
(more)f(rigorous)g(form:)40 b(if)28 b Fn(n)g(>)g Fy(2)0
774 y(there)33 b(exists)i(a)d(set)i(of)e(pro)5 b(jection)33
b(observ)-5 b(ables)35 b Fo(O)g Fy(on)e Fq(C)2163 738
y Fp(n)2243 774 y Fy(and)f(a)h(set)g(of)f(con)m(texts)j(o)m(v)m(er)f
Fo(O)h Fy(suc)m(h)g(that)0 948 y(there)44 b(is)g(no)f(admissible)j
(assignmen)m(t)f(function)f Fn(v)j Fy(under)d(whic)m(h)h
Fo(O)h Fy(is)e(b)s(oth)f(non-con)m(textual)h(and)0 1123
y(v)-5 b(alue)40 b(de\014nite.)65 b(This)41 b(pro)m(v)m(es)g(that)e(it)
h(is)g(imp)s(ossible)h(for)e(all)g(pro)5 b(jection)40
b(observ)-5 b(ables)41 b(to)e(b)s(e)h(v)-5 b(alue)0 1297
y(de\014nite)34 b(and)f(non-con)m(textual.)0 1778 y Fr(C.)104
b(Strong)35 b(con)m(textualit)m(y)g(can)h(not)f(b)s(e)f(guaran)m(teed)0
2120 y Fy(Ho)m(w)j(strong)g(is)g(the)g(incompatibilit)m(y)h(b)s(et)m(w)
m(een)h(non-con)m(textualit)m(y)g(and)d(v)-5 b(alue)37
b(de\014niteness)j(stated)0 2294 y(in)j(the)g(Ko)s(c)m(hen-Sp)s(ec)m(k)
m(er)i(theorem?)74 b(The)43 b(theorem)h(tells)f(us)g(that)g(not)f(ev)m
(ery)j(observ)-5 b(able)43 b(can)g(b)s(e)0 2469 y(b)s(oth)48
b(non-con)m(textual)g(and)g(v)-5 b(alue)49 b(de\014nite,)j(but)d(giv)m
(es)g(us)f(no)g(information)g(as)g(to)f(ho)m(w)h(far)g(this)0
2643 y(incompatibilit)m(y)35 b(go)s(es.)44 b(Here)34
b(w)m(e)g(sho)m(w)g(that)f(this)g(incompatibilit)m(y)i(cannot)e(b)s(e)g
(maximal:)45 b(no)33 b(set)h(of)0 2817 y(observ)-5 b(ables)31
b(is)e(strongly)g(con)m(textual)i(under)e(ev)m(ery)i(admissible)g(v)-5
b(alue)29 b(de\014nite)h(assignmen)m(t)h(function)0 2992
y(on)39 b(it.)64 b(In)39 b(other)h(w)m(ords,)i(for)d(an)m(y)h(set)g(of)
f(con)m(texts)i(o)m(v)m(er)f(an)m(y)g(set)g(of)f(observ)-5
b(ables,)42 b(there)e(exists)h(an)0 3166 y(admissible)e(assignmen)m(t)f
(function)g(under)f(whic)m(h)i(the)e(set)g(of)g(observ)-5
b(ables)38 b(is)g(v)-5 b(alue)37 b(de\014nite)h(and)f(at)0
3340 y(least)c(one)g(observ)-5 b(able)34 b(is)f(non-con)m(textual.)0
3739 y(More)28 b(precisely)-8 b(,)31 b(let)c Fo(O)k Fy(b)s(e)d(a)f(set)
h(of)f(pro)5 b(jection)28 b(observ)-5 b(ables)29 b(and)f
Fo(C)33 b Fy(a)28 b(set)g(of)f(con)m(texts)i(o)m(v)m(er)f
Fo(O)s Fy(.)42 b(Then)0 3913 y(for)34 b(ev)m(ery)i Fn(a)31
b Fo(2)h(O)37 b Fy(there)f(exists)g(an)e(admissible)j(assignmen)m(t)f
(function)f Fn(v)j Fy(suc)m(h)e(that)e Fn(v)t Fy(\()p
Fn(a;)17 b(C)7 b Fy(\))31 b(=)g(1)j(for)0 4087 y(ev)m(ery)43
b(con)m(text)f Fn(C)48 b Fo(2)42 b(C)47 b Fy(with)42
b Fn(o)f Fo(2)h Fn(C)7 b Fy(,)43 b(and)e Fo(O)j Fy(is)d(v)-5
b(alue)41 b(de\014nite)h(under)g Fn(v)t Fy(.)68 b(T)-8
b(o)41 b(see)g(this,)j(consider)0 4262 y(the)36 b(set)g
Fn(S)386 4277 y Fp(a)460 4262 y Fy(=)d Fo(f)p Fn(C)39
b Fo(j)32 b Fn(C)40 b Fo(2)33 b(C)39 b Fy(and)32 b Fn(a)h
Fo(2)g Fn(C)7 b Fo(g)33 b(\022)g(C)41 b Fy(of)35 b(con)m(texts)i(in)f
(whic)m(h)h Fn(a)f Fy(app)s(ears.)52 b(If)36 b(w)m(e)g(de\014ne)h(the)0
4436 y(assignmen)m(t)d(function)f Fn(v)931 4451 y Fp(a)1006
4436 y Fy(for)f Fn(C)i Fo(2)29 b Fn(S)1414 4451 y Fp(a)1488
4436 y Fy(b)m(y)1372 4938 y Fn(v)1419 4953 y Fp(a)1461
4938 y Fy(\()p Fn(o;)17 b(C)7 b Fy(\))27 b(=)1836 4704
y Fl(8)1836 4794 y(>)1836 4824 y(<)1836 5003 y(>)1836
5033 y(:)1924 4851 y Fy(1)p Fn(;)98 b Fy(for)32 b Fn(o)27
b Fy(=)h Fn(a)p Fy(,)1924 5060 y(0)p Fn(;)98 b Fy(for)32
b Fn(o)27 b Fo(6)p Fy(=)h Fn(a)p Fy(.)0 5351 y(It)41
b(is)f(clear)h(this)g(satis\014es)1026 5276 y Fl(P)1131
5380 y Fp(o)p Fx(2)p Fp(C)1288 5351 y Fn(v)1335 5366
y Fp(a)1377 5351 y Fy(\()p Fn(o;)17 b(C)7 b Fy(\))40
b(=)h(1,)h(for)e(all)g Fn(C)48 b Fo(2)42 b Fn(S)2482
5366 y Fp(a)2524 5351 y Fy(.)67 b(F)-8 b(or)39 b Fn(C)48
b Fo(2)42 b(C)34 b(n)27 b Fn(S)3249 5366 y Fp(a)3291
5351 y Fy(,)42 b(the)f(function)0 5525 y Fn(v)47 5540
y Fp(a)123 5525 y Fy(can)35 b(b)s(e)g(de\014ned)h(in)f(an)m(y)h
(arbitrary)e(con)m(textual)j(w)m(a)m(y)e(to)g(satisfy)g(admissibilit)m
(y)-8 b(.)53 b(The)35 b(function)h Fn(v)3844 5540 y Fp(a)p
0 TeXcolorgray 1870 5774 a Fy(7)p 0 TeXcolorgray eop
end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1243 1500 a @beginspecial 71 @llx 541 @lly 239 @urx 721
@ury 1680 @rwi @setspecial
%%BeginDocument: 2012-incomput-proofs_PRA-Figure1.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 1.pdf
%%Creator: Adobe Acrobat 10.1.4
%%For: b
%%CreationDate: 29.11.2012, 22:48:59
%%BoundingBox: 71 541 239 721
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2
	ps_level 2 ge
def
/level3
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space
		version cvr 2012 lt
		level2 and
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
		userdict/Adobe_AGM_OnHost_Seps known
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name
										CSA map_csa
										MappedCSA
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop
		ColorSpaceFamily/Separation eq
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq
		currentdict/Components known and
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if
		0 exch rlineto
		currentfile token pop dup type/stringtype eq
			{pop exit}if
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc
	{
	 dup stringwidth 0 0 moveto
	 2 index true charpath pathbbox
	 0 -1
	 7 index 2 div .88
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc
	{
	 dup stringwidth
	 pop 2 div neg -0.88
	2 copy
	moveto
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup
				_setwidthProc
				3 copy
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		
				3 copy
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse
		 exch
	}
	forall
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin
		ct_CopyFont
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
		/ct_SyntheticBold true def
		currentdict
		end
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict
begin
	 /.notdef 0 def
	 currentdict
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		
	/GlyphDirectory
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup
   length 1 add dict
   begin
		ct_CopyFont
		/Encoding Encoding dup length array copy
		dup
		4 -1 roll
		0 exch put
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph
{
 	gsave
	8 -1 roll pop
	7 1 roll
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
	dup  9 1 roll
	{
		currentdict /StrokeWidth 2 copy known
		{
			get 2 div
			0 ct_FontMatrix dtransform pop
			5 1 roll
			4 -1 roll 4 index sub
			4 1 roll
			3 -1 roll 4 index sub
			3 1 roll
			exch 4 index add exch
			4 index add
			5 -1 roll pop
		}
		{	
			pop pop
		}
		ifelse
	}
    if
	setcachedevice
        ct_FontMatrix concat
        ct_PSPathOps begin
		exec
	end
	{
		currentdict /StrokeWidth 2 copy known
			{ get }
			{ pop pop 0 }
  	    ifelse
		setlinewidth stroke
	}
	{
	    fill
	}
	ifelse
    grestore
} def
/ct_PSPathOps 4 dict dup begin
	/m {moveto} def
	/l {lineto} def
	/c {curveto} def
	/cp {closepath} def
end
def
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc
{
   2 index findfont dup length 4 add dict
   begin
	ct_CopyFont
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def
         currentdict
      end
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore
		ct_MakeGlyphProc
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM
{
556 0 24 -19 541 703
	{
	541 628 m
	510 669 442 703 354 703 c
	201 703 117 607 101 444 c
	50 444 l
	25 372 l
	97 372 l
	97 301 l
	49 301 l
	24 229 l
	103 229 l
	124 67 209 -19 350 -19 c
	435 -19 501 25 509 32 c
	509 131 l
	492 105 417 60 343 60 c
	267 60 204 127 197 229 c
	406 229 l
	430 301 l
	191 301 l
	191 372 l
	455 372 l
	479 444 l
	194 444 l
	201 531 245 624 348 624 c
	433 624 484 583 509 534 c
	cp
	556 0 m
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM
{
500 0 10 -12 484 692
	{
	347 298 m
	171 298 l
	170 310 170 322 170 335 c
	170 362 l
	362 362 l
	374 403 l
	172 403 l
	184 580 244 642 308 642 c
	380 642 434 574 457 457 c
	481 462 l
	474 691 l
	449 691 l
	433 670 429 657 410 657 c
	394 657 360 692 299 692 c
	204 692 94 604 73 403 c
	22 403 l
	10 362 l
	70 362 l
	69 352 69 341 69 330 c
	69 319 69 308 70 298 c
	22 298 l
	10 257 l
	73 257 l
	97 57 216 -12 295 -12 c
	364 -12 427 25 484 123 c
	458 142 l
	425 101 384 37 316 37 c
	256 37 189 84 173 257 c
	335 257 l
	cp
	500 0 m
	}
ct_PSBuildGlyph
} def
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and
		Name()ne and
		Name(All)ne and
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys
								}{
								currentoverprint not
									{
 									gsave
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint
					MappedCSA 0 get/DeviceCMYK eq and
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys
							}{
							currentoverprint not
								{
	 							gsave
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor
			/AGMIMG_k xdf
			/AGMIMG_y xdf
			/AGMIMG_m xdf
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for
			put	setcolorspace
		}if
		currentdict
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get
			255 exch sub
			2 index
			3 1 roll
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf
					Adobe_AGM_Image/AGMIMG_y xddf
					Adobe_AGM_Image/AGMIMG_m xddf
					Adobe_AGM_Image/AGMIMG_c xddf
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf
				Adobe_AGM_Image/AGMIMG_y xddf
				Adobe_AGM_Image/AGMIMG_m xddf
				Adobe_AGM_Image/AGMIMG_c xddf
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 759 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2012-11-29T22:48:22+01:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2012-11-29T22:48:22+01:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-2.4-1.40.13 (TeX Live 2012/W32TeX) kpathsea version 6.1.0"
   pdf:Producer="pdfTeX-1.40.13"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
















<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
.99628 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
148.522 161.024 mo
88.3893 100.891 li
false sop
1 0 1 0 cmyk
@
1.99255 lw
127.6 181.946 mo
169.444 181.946 li
169.444 140.102 li
127.6 140.102 li
cp
@
121.444 130.958 mo
121.444 129.307 120.106 127.969 118.456 127.969 cv
116.805 127.969 115.467 129.307 115.467 130.958 cv
115.467 132.608 116.805 133.947 118.456 133.947 cv
120.106 133.947 121.444 132.608 121.444 130.958 cv
cp
@
91.3781 100.891 mo
91.3781 99.2406 90.04 97.9025 88.3893 97.9025 cv
86.7386 97.9025 85.4005 99.2406 85.4005 100.891 cv
85.4005 102.542 86.7386 103.88 88.3893 103.88 cv
90.04 103.88 91.3781 102.542 91.3781 100.891 cv
cp
@
1 0 1 0 cmyk
%ADOBeginSubsetFont: HFABAA+CMMI12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HFABAA+CMMI12 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI12.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
def
/UniqueID 5087386 def
/FontBBox {-31 -250 1026 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [22] def
/StdVW [65] def
/StemSnapH [22 29] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/C <1C60D8A8C9B6317DF6DDBD86C7212DE4863F7C5C0964ACEE7B74B9276893
56AFC0B596838B466B1CF29A6F395E5A6DFA5042CC522453552400AF1554282E
5B87AD58E242FEC54F03FF853F059E2775B6F12C16E705E66681B10DF5E49EC8
4BD5766BFA6879F5EF07C28E739C1D7957BA018F5D3A91A81494E71DC8206045
F1373C117C389328FFDBBB729CFCA4FD1D81B29BDE> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZDR+CMMI12 /HFABAA+CMMI12 findfont ct_VMDictPut
/ODKZDR+CMMI12*1
[67{/.notdef}rp /C 188{/.notdef}rp]
ODKZDR+CMMI12 nf
ODKZDR+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
92.651 95.817 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JUHBAA+CMR8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/UniqueID 5000791 def
/FontBBox {-36 -250 1070 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE5298
51B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3
286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E65
2D787177BE307207126057745DD2D6A7D78294> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZDS+CMR8 /JUHBAA+CMR8 findfont ct_VMDictPut
/ODKZDS+CMR8*1
[49{/.notdef}rp /one 206{/.notdef}rp]
ODKZDS+CMR8 nf
ODKZDS+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
101.026 97.61 mo
(1)sh
.99628 lw
148.522 161.024 mo
148.522 75.9836 li
.47 .91 0 .08 cmyk
@
1.99255 lw
130.589 178.957 mo
166.455 178.957 li
166.455 143.091 li
130.589 143.091 li
cp
@
151.511 118.504 mo
151.511 116.853 150.173 115.515 148.522 115.515 cv
146.871 115.515 145.533 116.853 145.533 118.504 cv
145.533 120.155 146.871 121.493 148.522 121.493 cv
150.173 121.493 151.511 120.155 151.511 118.504 cv
cp
@
151.511 75.9836 mo
151.511 74.3329 150.173 72.9948 148.522 72.9948 cv
146.871 72.9948 145.533 74.3329 145.533 75.9836 cv
145.533 77.6343 146.871 78.9724 148.522 78.9724 cv
150.173 78.9724 151.511 77.6343 151.511 75.9836 cv
cp
@
.47 .91 0 .08 cmyk
ODKZDR+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
153.447 85.843 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A563
37D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86
BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1D
CB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7
F5FA2E61175441FDD6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDS+CMR8 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ODKZDS+CMR8*1
[49{/.notdef}rp /one /two 205{/.notdef}rp]
ODKZDS+CMR8 nf
ODKZDS+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
161.822 87.637 mo
(2)sh
.99628 lw
148.522 161.024 mo
208.655 100.891 li
0 .61 .87 0 cmyk
@
1.99255 lw
133.578 175.968 mo
163.466 175.968 li
163.466 146.08 li
133.578 146.08 li
cp
@
181.577 130.958 mo
181.577 129.307 180.239 127.969 178.588 127.969 cv
176.938 127.969 175.6 129.307 175.6 130.958 cv
175.6 132.608 176.938 133.947 178.588 133.947 cv
180.239 133.947 181.577 132.608 181.577 130.958 cv
cp
@
211.644 100.891 mo
211.644 99.2406 210.305 97.9025 208.655 97.9025 cv
207.004 97.9025 205.666 99.2406 205.666 100.891 cv
205.666 102.542 207.004 103.88 208.655 103.88 cv
210.305 103.88 211.644 102.542 211.644 100.891 cv
cp
@
0 .61 .87 0 cmyk
ODKZDR+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
211.936 113.323 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7883CBAA92B92A60ED97CC7706D34A36348BC2B93805C
7C1833580FAA27E95855649C4EE0492E1681D62AEDB7EC0D4D44FE91FF7AD466
5FD8D6994E56FB00B47353D8538086D2C46021ADFB3F80264F6C2EF23799D21E
81ACDE63FE62C97F7BE27D7DCE3B9BAF5B096FE9F9E10574C4FE3C149B03DD0A
59DE10D784DCCBFDFC6D3C5399775DC28DB91A04691B5B8F3D1C009DFAB49BB8
18D90EA7C1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDS+CMR8 /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ODKZDS+CMR8*1
[49{/.notdef}rp /one /two /three 204{/.notdef}rp]
ODKZDS+CMR8 nf
ODKZDS+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
220.311 115.116 mo
(3)sh
.99628 lw
148.522 161.024 mo
233.562 161.024 li
1 1 0 0 cmyk
@
1.99255 lw
136.567 172.979 mo
160.477 172.979 li
160.477 149.069 li
136.567 149.069 li
cp
@
194.031 161.024 mo
194.031 159.373 192.693 158.035 191.042 158.035 cv
189.391 158.035 188.053 159.373 188.053 161.024 cv
188.053 162.675 189.391 164.013 191.042 164.013 cv
192.693 164.013 194.031 162.675 194.031 161.024 cv
cp
@
236.551 161.024 mo
236.551 159.373 235.213 158.035 233.562 158.035 cv
231.912 158.035 230.574 159.373 230.574 161.024 cv
230.574 162.675 231.912 164.013 233.562 164.013 cv
235.213 164.013 236.551 162.675 236.551 161.024 cv
cp
@
1 1 0 0 cmyk
ODKZDR+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
218.765 174.119 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7883C47E9695598D0AF3A7007C55B549EB9B3F3F461046
52844342745D2B91FB2D0F00634244F88463533B1B57C29F84779340190813A1
C1D067290CD1A5A15C3546B4439E2525D45177EB37490815EF6B6C58818E7C9C
DA495E2BF3E7B45D1B291D529E999804ECD42D22A6077E492DD51C0EA4F3AC64
7B0CA8614C7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDS+CMR8 /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ODKZDS+CMR8*1
[49{/.notdef}rp /one /two /three /four 203{/.notdef}rp]
ODKZDS+CMR8 nf
ODKZDS+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
227.14 175.912 mo
(4)sh
.99628 lw
148.522 161.024 mo
208.655 221.157 li
0 0 0 1 cmyk
@
1.99255 lw
139.556 169.99 mo
157.488 169.99 li
157.488 152.058 li
139.556 152.058 li
cp
@
181.577 191.09 mo
181.577 189.44 180.239 188.102 178.588 188.102 cv
176.938 188.102 175.6 189.44 175.6 191.09 cv
175.6 192.741 176.938 194.079 178.588 194.079 cv
180.239 194.079 181.577 192.741 181.577 191.09 cv
cp
@
211.644 221.157 mo
211.644 219.506 210.305 218.168 208.655 218.168 cv
207.004 218.168 205.666 219.506 205.666 221.157 cv
205.666 222.807 207.004 224.146 208.655 224.146 cv
210.305 224.146 211.644 222.807 211.644 221.157 cv
cp
@
0 0 0 1 cmyk
ODKZDR+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
191.285 232.608 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7883CBAA92BB8F04ADF0CA94FD08BC440200536D203E6D
D6DA1AA4E24085E351E5B7C415E93A6939C0F28260B2D42E565E41E47CAD8C4E
0FB90A5F0EBE143B4D47059097939838CB5B3014789C985B5F61B6EFFE42818F
5880DA935C9BED05A3F418BBE57B46C9A1FD27EC9ABE0648F3A246130B19CCAE
C5E002CEF22BC7D01B0678313CD88BAB34203C2F1276DBDF05750AA0AA265A31
22096D5835D96AA3CB4F3086139CF8051057195072A2049B20B1C013E0278E05
89660283087653BEDD3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDS+CMR8 /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/ODKZDS+CMR8*1
[49{/.notdef}rp /one /two /three /four /five 202{/.notdef}rp]
ODKZDS+CMR8 nf
ODKZDS+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
199.66 234.401 mo
(5)sh
.99628 lw
148.522 161.024 mo
148.522 246.064 li
0 1 1 0 cmyk
@
1.99255 lw
142.544 167.002 mo
154.5 167.002 li
154.5 155.046 li
142.544 155.046 li
cp
@
151.511 203.544 mo
151.511 201.893 150.173 200.555 148.522 200.555 cv
146.871 200.555 145.533 201.893 145.533 203.544 cv
145.533 205.195 146.871 206.533 148.522 206.533 cv
150.173 206.533 151.511 205.195 151.511 203.544 cv
cp
@
151.511 246.064 mo
151.511 244.414 150.173 243.076 148.522 243.076 cv
146.871 243.076 145.533 244.414 145.533 246.064 cv
145.533 247.715 146.871 249.053 148.522 249.053 cv
150.173 249.053 151.511 247.715 151.511 246.064 cv
cp
@
0 1 1 0 cmyk
ODKZDR+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
130.489 242.581 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7883CBAA92BB7052CB3D025D26C786B134C7D4D024227A6
CF5116B65C7F3EDCBB046A6D5B58FC55EB7A6349771E207AC0F1620248BBC827
65A477B525CA3035D65AD150E1FA66D14C00F4D62FA003E8267DAD2E0BC6EB42
8EE745E8A441D5D96DA8071D8B76F53B9FED393417E799F3B539D42A45B55E05
75B899A9FA1CBDD41774F8FB6DCE28637A97B1A33161930CB80D70A25BF74CEB
E689B485DF0013312A677C6070E950F089378CB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDS+CMR8 /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/ODKZDS+CMR8*1
[49{/.notdef}rp /one /two /three /four /five /six 201{/.notdef}rp]
ODKZDS+CMR8 nf
ODKZDS+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
138.864 244.375 mo
(6)sh
.99628 lw
148.522 161.024 mo
88.3893 221.157 li
.94 .11 0 0 cmyk
@
1.99255 lw
145.533 164.013 mo
151.511 164.013 li
151.511 158.035 li
145.533 158.035 li
cp
@
121.444 191.09 mo
121.444 189.44 120.106 188.102 118.456 188.102 cv
116.805 188.102 115.467 189.44 115.467 191.09 cv
115.467 192.741 116.805 194.079 118.456 194.079 cv
120.106 194.079 121.444 192.741 121.444 191.09 cv
cp
@
91.3781 221.157 mo
91.3781 219.506 90.04 218.168 88.3893 218.168 cv
86.7386 218.168 85.4005 219.506 85.4005 221.157 cv
85.4005 222.807 86.7386 224.146 88.3893 224.146 cv
90.04 224.146 91.3781 222.807 91.3781 221.157 cv
cp
@
.94 .11 0 0 cmyk
ODKZDR+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
72 215.102 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7883CBAA0E9EE3E9878E92C520C469EC550617F372CF6
CA5D43E72582F1BD093E9D7DAA7EDD2F6BB550EA4501C1EA826B22107B5CA25D
E8B7AF5DB0572443CFC499D5C45E776EECEE105C833F431B4C6FDD6941D58AF0
005EC01E26F455F0A416837339F206571B57278CA105> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDS+CMR8 /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/ODKZDS+CMR8*1
[49{/.notdef}rp /one /two /three /four /five /six /seven
200{/.notdef}rp]
ODKZDS+CMR8 nf
ODKZDS+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
80.375 216.895 mo
(7)sh
/0
<<
/Name (Black)
/1
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4
/Components [ 0 0 0 1 ]
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HFABAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDR+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7B9B9A72E7DE322C6832BE644423B0A88991AD27EBB446C4B
78A15D1551E0041671A94D00FAC341F63F9F6BD0BD1F7E1159EBC4D3A51076CB
AD3084D7BB435F13C64A1022F92EAF97A9B9FAB89D5EF4E00013898C527E1024
1850938E8A18F13139220B05353D163E079F72D46D074AF4BE0712F52399BD5B
FEDD0FF6EDB7D541DC9FE47616272E42EA7EC15CA1C36E943C9AE8E71D7BF511
B93807535299A1710F16F2B27DB38539B4CC43D74740BCDB557F037C4BE96327
1D0813FE14E2562EE6FDE375> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDR+CMMI12 /Encoding get
dup 97 /a put
pop
%ADOEndSubsetFont
/ODKZDR+CMMI12*1
[67{/.notdef}rp /C 29{/.notdef}rp /a 158{/.notdef}rp]
ODKZDR+CMMI12 nf
ODKZDR+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
117.968 163.598 mo
(a)sh
93.6854 170.869 mo
93.6854 170.318 93.2394 169.872 92.6891 169.872 cv
92.1389 169.872 91.6929 170.318 91.6929 170.869 cv
91.6929 171.419 92.1389 171.865 92.6891 171.865 cv
93.2394 171.865 93.6854 171.419 93.6854 170.869 cv
cp
f
92.8247 161.024 mo
92.8247 160.474 92.3786 160.028 91.8284 160.028 cv
91.2782 160.028 90.8321 160.474 90.8321 161.024 cv
90.8321 161.574 91.2782 162.02 91.8284 162.02 cv
92.3786 162.02 92.8247 161.574 92.8247 161.024 cv
cp
f
93.6854 151.18 mo
93.6854 150.629 93.2394 150.183 92.6891 150.183 cv
92.1389 150.183 91.6929 150.629 91.6929 151.18 cv
91.6929 151.73 92.1389 152.176 92.6891 152.176 cv
93.2394 152.176 93.6854 151.73 93.6854 151.18 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/ODKZDS+CMR8*1 uf
/ODKZDS+CMR8 uf
/JUHBAA+CMR8 uf
/ODKZDR+CMMI12*1 uf
/ODKZDR+CMMI12 uf
/HFABAA+CMMI12 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources:
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures:
%%DocumentSuppliedFeatures:
%%DocumentCustomColors:
%%CMYKCustomColor:
%%RGBCustomColor:
%%EOF

%%EndDocument
 @endspecial 0 1789 a FA(FIG.)40 b(1.)69 b(\(Color)40
b(online\))g(Greec)m(hie)h(orthogonalit)m(y)h(diagram)2245
1756 y Fm(a)2324 1789 y FA(of)e(the)g(con)m(texts)h(in)e
Fk(S)3142 1803 y Fp(a)3223 1789 y FA(with)g(an)h(o)m(v)m(erlaid)0
1969 y(v)-5 b(alue)29 b(assignmen)m(t)h(re\015ecting)g(the)f(argumen)m
(t)g(against)h(strong-con)m(textualit)m(y)i(b)s(eing)d(guaran)m(teed.)
41 b(Di\013eren)m(t)0 2150 y(con)m(texts)32 b Fk(C)424
2164 y Fp(i)483 2150 y FA(are)e(dra)m(wn)g(in)g(di\013eren)m(t)h
(colours,)g(circles)g(represen)m(t)g(the)f(v)-5 b(alue)31
b(0)g(and)f(squares)g(the)g(v)-5 b(alue)31 b(1.)18 2334
y Fj(a)83 2365 y Ft(Observ)-5 b(ables)26 b(are)h(represen)n(ted)f(b)n
(y)h(circles/squares,)e(con)n(texts)i(b)n(y)g(smo)r(oth)h(line)g
(segmen)n(ts.)p 0 TeXcolorgray 0 2760 a Fy(is)39 b(then)f(admissible)i
(and)f(assigns)g(a)f(de\014nite)h(v)-5 b(alue)38 b(\(namely)i(1\))d(to)
h(the)g(observ)-5 b(able)40 b Fn(a)e Fy(\(whic)m(h)h(w)m(as)0
2935 y(arbitrarily)33 b(c)m(hosen\))h(in)f(a)f(non-con)m(textual)i(w)m
(a)m(y|i.e.)g Fn(v)2148 2950 y Fp(a)2189 2935 y Fy(\()p
Fn(a;)17 b(C)7 b Fy(\))28 b(=)f(1)33 b(for)f(all)g Fn(C)j
Fo(2)28 b Fn(S)3193 2950 y Fp(a)3234 2935 y Fy(.)0 3159
y(Note)39 b(that)h(the)f(con\014guration)h(of)f(con)m(texts)i
Fn(S)1803 3174 y Fp(a)1884 3159 y Fy(=)e Fo(f)p Fn(C)46
b Fo(j)39 b Fn(C)46 b Fo(2)40 b(C)e Fy(and)33 b Fn(a)39
b Fo(2)h Fn(C)7 b Fo(g)39 b(\022)h(C)45 b Fy(amoun)m(ts)c(to)e(a)0
3333 y(\\star-shap)s(ed")30 b(Greec)m(hie)i(orthogonalit)m(y)e
(diagram,)g(with)h(the)f(common)h(observ)-5 b(able)31
b Fn(a)g Fy(at)e(the)i(cen)m(tre)0 3508 y(of)h(the)h(star,)g(as)g
(depicted)h(in)f(Fig.)f(1.)0 3732 y(Indeed)50 b(this)g(should)g(not)f
(b)s(e)g(surprising)h(in)f(view)i(of)d(the)i(predictions)g(of)f(quan)m
(tum)h(mec)m(hanics.)0 3906 y(Sp)s(eci\014cally)-8 b(,)48
b(for)42 b(a)h(ph)m(ysical)j(system)f(prepared)f(in)f(the)h(state)g
Fo(j)o Fn( )t Fo(i)p Fy(,)i(the)e(Born)f(rule)h(predicts)h(that)0
4081 y(measuremen)m(t)h(of)e(the)h(pro)5 b(jection)44
b(observ)-5 b(able)46 b Fn(P)1932 4096 y Fp( )2028 4081
y Fy(should)f(giv)m(e)g(the)g(v)-5 b(alue)44 b(1)g(\(non-con)m
(textually\))0 4255 y(with)d(probabilit)m(y)h(1.)68 b(Nev)m(ertheless,)
46 b(it)41 b(is)g(imp)s(ortan)m(t)g(to)g(place)g(a)g(b)s(ound)g(on)g
(the)g(degree)g(of)g(non-)0 4429 y(classicalit)m(y)34
b([23,)e(24])g(that)g(w)m(e)h(can)f(guaran)m(tee.)44
b(In)32 b(fact,)g(it)g(is)h(p)s(ossible)g(to)f(go)f(further)i(than)f(w)
m(e)h(ha)m(v)m(e)0 4604 y(and)28 b(de\014ne)g Fn(v)508
4619 y Fp(a)577 4604 y Fy(to)f(non-con)m(textually)i(assign)g(the)f(v)
-5 b(alue)27 b(0)h(to)f(eac)m(h)h(observ)-5 b(able)29
b(app)s(earing)e(on)g(a)g(\\ra)m(y")0 4778 y(of)h(the)h(star)g(in)g
(Fig.)f(1.)42 b(This)30 b(is)f(a)f(consequence)k(of)c(the)h(fact)g(no)g
(t)m(w)m(o)g(observ)-5 b(ables)30 b(on)f(di\013ering)g(\\ra)m(ys")0
4952 y(are)k(compatible.)0 5176 y(Ho)m(w)m(ev)m(er,)c(in)c(the)g(follo)
m(wing)g(w)m(e)h(sho)m(w)g(that)f(one)g(cannot)g(go)g(m)m(uc)m(h)h
(further)f(than)g(this.)42 b(Sp)s(eci\014cally)-8 b(,)28
b(in)0 5351 y(what)c(are)f(the)h(main)g(theoretical)g(results)h(of)e
(the)h(pap)s(er,)h(w)m(e)g(sho)m(w)f(that)f(there)h(are)g(pairs)g(of)f
(observ)-5 b(ables)0 5525 y(\(b)s(elonging)37 b(to)f(di\013eren)m(t)j
(con)m(texts\))f(suc)m(h)g(that)f(at)g(most)g(one)g(of)g(them)g(can)g
(b)s(e)g(assigned)i(the)e(v)-5 b(alue)p 0 TeXcolorgray
1870 5774 a(8)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 83 a Fy(1)38 b(b)m(y)i(an)e(admissible)j(assignmen)m(t)f
(function)f(under)h(whic)m(h)g Fo(O)h Fy(is)e(non-con)m(textual.)63
b(This)40 b(\014nding)f(is)0 257 y(somewhat)31 b(stronger)f(than)g(a)f
(similar)h(result)h(b)m(y)g(Ko)s(c)m(hen)f(and)g(Sp)s(ec)m(k)m(er)h
([3,)f(21])f(deriv)m(ed)j(from)d(the)h(\(as)0 432 y(Sp)s(ec)m(k)m(er)36
b(used)g(to)e(call)g(them)h([25]\))f(\\bug"-t)m(yp)s(e)g(orthogonalit)m
(y)g(diagrams)h(\(a)f(sub-diagram)g(of)g(their)0 606
y(diagram)c(\000)438 621 y Fm(1)478 606 y Fy(\),)h(as)f(not)h(all)f
(observ)-5 b(ables)33 b(are)d(assumed)i(to)f(b)s(e)f(v)-5
b(alue)31 b(de\014nite.)45 b(Instead,)32 b(an)e(observ)-5
b(able)0 780 y(is)33 b(only)g(deduced)i(to)d(b)s(e)h(v)-5
b(alue)33 b(de\014nite)g(where)h(the)f(admissibilit)m(y)i(of)d
Fn(v)37 b Fy(requires)d(it)f(to)f(b)s(e)h(so.)0 1005
y(This)56 b(di\013erence)g(allo)m(ws)g(us)f(to)f(deduce)j(an)d(ev)m(en)
j(stronger)e(result,)61 b(with)55 b(particular)g(relev)-5
b(ance)0 1179 y(to)44 b(quan)m(tum)h(random)f(n)m(um)m(b)s(er)h
(generators:)67 b(there)45 b(are)f(pairs)g(of)g(observ)-5
b(ables)45 b(suc)m(h)h(that,)g(if)e(one)0 1353 y(of)g(them)h(is)g
(assigned)g(the)g(v)-5 b(alue)45 b(1)f(b)m(y)h(an)f(admissible)j
(assignmen)m(t)f(function)f(under)g(whic)m(h)h Fo(O)h
Fy(is)0 1528 y(non-con)m(textual,)c(the)e(other)f(m)m(ust)h(b)s(e)f
Fw(value)i(inde\014nite)p Fy(.)65 b(This)41 b(is)g(the)f(b)s(est)h
(guaran)m(tee)g(of)e(lo)s(cated)0 1702 y(v)-5 b(alue)42
b(inde\014niteness)i(one)e(could)g(hop)s(e)f(for,)j(and)d(w)m(e)h(will)
h(mak)m(e)f(use)g(of)f(it)h(in)f(our)h(prop)s(osal)f(for)g(a)0
1876 y(quan)m(tum)33 b(random)e(n)m(um)m(b)s(er)h(generator.)43
b(The)33 b(pro)s(of)d(relies)i(on)g(the)f(w)m(eak)m(er)i(result)f
(describ)s(ed)h(ab)s(o)m(v)m(e,)0 2051 y(so)d(w)m(e)i(demonstrate)f
(that)f(\014rst,)h(and)g(deduce)h(the)e(main)h(result)g(as)f(a)g
(corollary)-8 b(.)43 b(Note)30 b(that)g(there)h(are)0
2225 y(larger)i(v)-5 b(alues)34 b(than)854 2186 y Fm(3)p
807 2202 130 4 v 807 2212 a Fx(p)p 865 2212 71 3 v 865
2267 a Fm(14)979 2225 y Fy(for)f(whic)m(h)i(these)f(results)h(are)e
(true.)46 b(Ho)m(w)m(ev)m(er,)36 b(this)e(n)m(um)m(b)s(er)h(is)f(more)f
(than)0 2399 y(su\016cien)m(t)c(for)e(our)f(purp)s(oses,)k(and)d(the)g
(larger)g(v)-5 b(alues)28 b(w)m(e)g(found)f(require)i(signi\014can)m
(tly)g(longer)e(pro)s(ofs.)p 0 TeXcolorgray 0 2748 a
Fi(Theorem)36 b(1.)p 0 TeXcolorgray 40 w Fw(L)-5 b(et)34
b Fo(j)o Fn(a)p Fo(i)17 b Fn(;)g Fo(j)o Fn(b)p Fo(i)28
b(2)g Fq(C)1246 2712 y Fm(3)1319 2748 y Fw(b)-5 b(e)32
b(unit)i(ve)-5 b(ctors)33 b(such)g(that)g Fy(0)28 b Fn(<)f
Fo(jh)p Fn(a)p Fo(j)p Fn(b)p Fo(ij)g(\024)3005 2709 y
Fm(3)p 2958 2725 130 4 v 2958 2735 a Fx(p)p 3017 2735
71 3 v 55 x Fm(14)3097 2729 y Fw(.)3160 2748 y(Then)33
b(ther)-5 b(e)33 b(exists)0 2922 y(a)e(set)h(of)f(pr)-5
b(oje)g(ction)30 b(observables)g Fo(O)k Fw(c)-5 b(ontaining)31
b Fn(P)1939 2937 y Fp(a)2012 2922 y Fw(and)f Fn(P)2260
2937 y Fp(b)2295 2922 y Fw(,)i(and)e(a)h(set)h(of)f(c)-5
b(ontexts)31 b Fo(C)38 b Fw(over)31 b Fo(O)s Fw(,)h(such)0
3097 y(that)g(ther)-5 b(e)32 b(is)g(no)f(admissible)f(assignment)h
(function)g(under)h(which)f Fo(O)k Fw(is)c(non-c)-5 b(ontextual)31
b(and)g Fn(P)3684 3112 y Fp(a)3726 3097 y Fw(,)h Fn(P)3851
3112 y Fp(b)0 3271 y Fw(have)i(the)h(value)g(1.)p 0 TeXcolorgray
0 3632 a(Pr)-5 b(o)g(of.)p 0 TeXcolorgray 49 w Fy(W)d(e)34
b(\014rst)f(sho)m(w)h(that)e(the)i(theorem)f(holds)h(under)f(the)g
(equalit)m(y)i Fo(jh)p Fn(a)p Fo(j)p Fn(b)p Fo(ij)27
b Fy(=)3191 3593 y Fm(3)p 3144 3609 130 4 v 3144 3619
a Fx(p)p 3203 3619 71 3 v 55 x Fm(14)3283 3613 y Fy(,)3343
3632 y(and)33 b(then,)g(b)m(y)0 3807 y(means)h(of)e(a)g(reduction)i(to)
e(the)h(case)g(of)f(equalit)m(y)-8 b(,)35 b(sho)m(w)e(it)g(also)f
(holds)i(for)e(0)27 b Fn(<)h Fo(jh)p Fn(a)p Fo(j)p Fn(b)p
Fo(ij)f Fn(<)3480 3767 y Fm(3)p 3433 3784 130 4 v 3433
3794 a Fx(p)p 3492 3794 71 3 v 55 x Fm(14)3572 3788 y
Fy(.)0 4031 y(By)38 b(c)m(ho)s(osing)g(the)f(basis)h(appropriately)-8
b(,)40 b(without)d(loss)h(of)f(generalit)m(y)i(w)m(e)f(ma)m(y)g(assume)
h(that)e Fo(j)o Fn(a)p Fo(i)f(\021)0 4205 y Fy(\(1)p
Fn(;)17 b Fy(0)p Fn(;)g Fy(0\))31 b(and)i Fo(j)o Fn(b)p
Fo(i)28 b(\021)830 4166 y Fm(1)p 782 4182 130 4 v 782
4192 a Fx(p)p 841 4192 71 3 v 55 x Fm(14)922 4205 y Fy(\(3)p
Fn(;)17 b Fy(2)p Fn(;)g Fy(1\).)42 b(Let)33 b Fo(j)o
Fn( )t Fo(i)28 b Fy(=)f(\(0)p Fn(;)17 b Fy(1)p Fn(;)g
Fy(0\))31 b(and)i Fo(j)p Fn(\036)p Fo(i)27 b Fy(=)g(\(0)p
Fn(;)17 b Fy(0)p Fn(;)g Fy(1\).)0 4429 y(In)23 b(T)-8
b(able)24 b(I)f(w)m(e)h(de\014ne)g(24)e(con)m(texts)j
Fn(C)1401 4444 y Fm(1)1440 4429 y Fn(;)17 b(C)1554 4444
y Fm(2)1593 4429 y Fn(;)g(:)g(:)g(:)f(;)h(C)1882 4444
y Fm(24)1956 4429 y Fy(,)25 b(whic)m(h)g(are)d(n)m(um)m(b)s(ered)j(b)m
(y)f(the)g(column)f(headings.)0 4604 y(Eac)m(h)33 b(ro)m(w)f(v)m(ector)
h Fo(j)p Fn(')p Fo(i)e Fy(in)i(the)f(table)g(is)h(de\014ned)g(relativ)m
(e)g(to)f(the)g(afore-c)m(hosen)h(basis)g Fo(fj)o Fn(a)p
Fo(i)17 b Fn(;)g Fo(j)o Fn( )t Fo(i)g Fn(;)g Fo(j)o Fn(\036)p
Fo(ig)p Fy(,)0 4778 y(and)32 b(is)h(understo)s(o)s(d)f(to)g(represen)m
(t)i(the)e(corresp)s(onding)h(pro)5 b(jection)33 b(observ)-5
b(able)33 b Fn(P)3128 4793 y Fp(')3178 4778 y Fy(.)43
b(F)-8 b(or)32 b(brevit)m(y)-8 b(,)33 b(w)m(e)0 4952
y(ha)m(v)m(e)39 b(omitted)g(commas,)h(brac)m(k)m(ets)g(and)d
(normalisation)i(constan)m(ts)g(from)e(these)i(v)m(ectors,)i(and)d
(used)0 5127 y(the)33 b(notation)h Fl(e)-57 b Fn(n)28
b Fy(=)g Fo(\000)p Fn(n)p Fy(.)44 b(As)33 b(an)f(example,)j
Fn(C)1713 5142 y Fm(1)1779 5127 y Fy(=)28 b Fo(f)p Fn(P)1996
5142 y Fp(a)2037 5127 y Fn(;)17 b(P)2144 5142 y Fp( )2197
5127 y Fn(;)g(P)2304 5142 y Fp(\036)2349 5127 y Fo(g)p
Fy(.)0 5351 y(No)m(w)42 b(let)f Fo(C)48 b Fy(=)42 b Fo(f)p
Fn(C)718 5366 y Fm(1)757 5351 y Fn(;)17 b(C)871 5366
y Fm(2)910 5351 y Fn(;)g(:)g(:)g(:)e(;)i(C)1198 5366
y Fm(24)1273 5351 y Fo(g)40 b Fy(and)h Fo(O)k Fy(=)1803
5276 y Fl(S)1886 5302 y Fm(24)1886 5380 y Fp(i)p Fm(=1)2021
5351 y Fn(C)2091 5366 y Fp(i)2119 5351 y Fy(.)69 b(Supp)s(ose)42
b(there)f(exists)i(an)e(admissible)i(as-)0 5525 y(signmen)m(t)d
(function)g Fn(v)i Fy(under)e(whic)m(h)g Fo(O)i Fy(is)d(non-con)m
(textual)h(and)f Fn(v)t Fy(\()p Fn(P)2713 5540 y Fp(a)2754
5525 y Fn(;)17 b(C)2868 5540 y Fm(1)2907 5525 y Fy(\))38
b(=)h Fn(v)t Fy(\()p Fn(P)3250 5540 y Fp(b)3284 5525
y Fn(;)17 b(C)3398 5540 y Fm(2)3436 5525 y Fy(\))39 b(=)f(1.)62
b(By)p 0 TeXcolorgray 1870 5774 a(9)p 0 TeXcolorgray
eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 151 a FA(T)-8 b(ABLE)30
b(I.)g(Assignmen)m(t)g(table)g(con)m(taining)i(the)d(represen)m(tation)
i(of)f(observ)-5 b(able)30 b(prop)s(ositions)f(\(pro)5
b(jectors\),)0 332 y(together)32 b(with)e(the)g(con)m(texts)j(in)d
(whic)m(h)g(they)g(app)s(ear.)40 b(See)31 b(Fig.)h(2)e(for)h(an)f
(illustration)h(of)g(these.)p 128 607 3630 4 v 126 788
4 181 v 153 733 a Fk(v)p 223 788 V 109 w FA(1)p Fk(;)15
b FA(2)p 516 788 V 149 w(3)p Fk(;)g FA(4)p 783 788 V
138 w(5)p Fk(;)g FA(6)p 1050 788 V 149 w(7)p Fk(;)g FA(8)p
1342 788 V 127 w(9)p Fk(;)g FA(10)p 1610 788 V 72 w(11)p
Fk(;)g FA(12)p 1882 788 V 115 w(13)p 2149 788 V 114 w(14)p
Fk(;)g FA(15)p 2421 788 V 52 w(16)p Fk(;)g FA(17)p 2693
788 V 53 w(18)p Fk(;)g FA(19)p 2965 788 V 52 w(20)p Fk(;)g
FA(21)p 3237 788 V 52 w(22)p Fk(;)g FA(23)p 3509 788
V 105 w(24)p 3756 788 V 128 791 3630 4 v 126 971 4 181
v 154 917 a(1)p 223 971 V 74 w(1)30 b(0)h(0)p 516 971
V 83 w(1)g(0)g(0)p 783 971 V 60 w Fr(2)g(1)g(1)p 1050
971 V 72 w FA(2)g(1)g(1)p 1342 971 V 73 w Fr(2)g(0)f(1)p
1610 971 V 63 w FA(2)h(0)f(1)p 1882 971 V 2149 971 V
343 w(1)h(1)g(0)p 2421 971 V 65 w Fr(1)f(1)h(1)p 2693
971 V 65 w FA(1)g(1)g(1)p 2965 971 V 65 w Fr(1)g(0)f(1)p
3237 971 V 65 w FA(1)h(0)g(1)p 3509 971 V 3756 971 V
126 1152 V 154 1098 a(0)p 223 1152 V 63 w Fr(0)g(1)g(0)p
516 1152 V 62 w(0)g(1)f(1)p 783 1152 V 61 w FA(1)893
1078 y Fh(e)895 1098 y FA(1)969 1078 y Fh(e)971 1098
y FA(1)p 1050 1152 V 73 w Fr(1)h(0)1255 1078 y Fh(e)1254
1098 y Fr(2)p 1342 1152 V 73 w FA(1)g(0)1528 1078 y Fh(e)1531
1098 y FA(2)p 1610 1152 V 63 w Fr(1)f(1)1805 1078 y Fh(e)1804
1098 y Fr(2)p 1882 1152 V 2149 1152 V 322 w(1)2261 1078
y Fh(e)2260 1098 y Fr(1)h(0)p 2421 1152 V 65 w FA(1)2533
1078 y Fh(e)2536 1098 y FA(1)g(0)p 2693 1152 V 65 w Fr(1)f(0)2888
1078 y Fh(e)2887 1098 y Fr(1)p 2965 1152 V 65 w FA(1)h(0)3153
1078 y Fh(e)3156 1098 y FA(1)p 3237 1152 V 65 w Fr(1)g(1)3432
1078 y Fh(e)3431 1098 y Fr(1)p 3509 1152 V 3756 1152
V 126 1333 V 154 1278 a FA(0)p 223 1333 V 63 w Fr(0)g(0)g(1)p
516 1333 V 62 w(0)g(1)708 1259 y Fh(e)707 1278 y Fr(1)p
783 1333 V 61 w FA(0)f(1)969 1259 y Fh(e)971 1278 y FA(1)p
1050 1333 V 83 w(2)1173 1259 y Fh(e)1175 1278 y FA(5)h(1)p
1342 1333 V 83 w(0)g(1)g(0)p 1610 1333 V 73 w(1)1722
1259 y Fh(e)1725 1278 y FA(5)1798 1259 y Fh(e)1800 1278
y FA(2)p 1882 1333 V 2149 1333 V 343 w(0)g(0)g(1)p 2421
1333 V 75 w(1)g(1)2609 1259 y Fh(e)2612 1278 y FA(2)p
2693 1333 V 75 w(1)2805 1259 y Fh(e)2808 1278 y FA(2)g(1)p
2965 1333 V 75 w(0)g(1)g(0)p 3237 1333 V 75 w(1)3349
1259 y Fh(e)3352 1278 y FA(2)3425 1259 y Fh(e)3428 1278
y FA(1)p 3509 1333 V 63 w(1)f(1)3685 1259 y Fh(e)3687
1278 y FA(1)p 3756 1333 V 126 1513 V 223 1513 V 516 1513
V 783 1513 V 1050 1513 V 1342 1513 V 1610 1513 V 1882
1513 V 2149 1513 V 2421 1513 V 2693 1513 V 2965 1513
V 3237 1513 V 3509 1513 V 3536 1459 a(1)3609 1440 y Fh(e)3611
1459 y FA(1)h(0)p 3756 1513 V 126 1694 V 154 1640 a(1)p
223 1694 V 74 w(3)f(2)h(1)p 516 1694 V 83 w(3)g(2)g(1)p
783 1694 V 60 w Fr(3)g(2)g(0)p 1050 1694 V 72 w FA(3)g(2)g(0)p
1342 1694 V 73 w Fr(3)g(1)1535 1620 y Fh(e)1534 1640
y Fr(1)p 1610 1694 V 63 w FA(3)g(1)1798 1620 y Fh(e)1800
1640 y FA(1)p 1882 1694 V 63 w Fr(1)g(1)f(0)p 2149 1694
V 63 w FA(1)h(1)g(0)p 2421 1694 V 65 w Fr(2)f(1)2616
1620 y Fh(e)2615 1640 y Fr(1)p 2693 1694 V 65 w FA(2)h(1)2881
1620 y Fh(e)2884 1640 y FA(1)p 2965 1694 V 65 w Fr(2)g(0)3160
1620 y Fh(e)3159 1640 y Fr(1)p 3237 1694 V 65 w FA(2)g(0)3425
1620 y Fh(e)3428 1640 y FA(1)p 3509 1694 V 63 w(1)f(1)h(2)p
3756 1694 V 126 1874 V 154 1820 a(0)p 223 1874 V 63 w
Fr(2)346 1801 y Fh(e)345 1820 y Fr(3)g(0)p 516 1874 V
62 w(1)626 1801 y Fh(e)625 1820 y Fr(1)708 1801 y Fh(e)707
1820 y Fr(1)p 783 1874 V 61 w FA(2)893 1801 y Fh(e)895
1820 y FA(3)g(0)p 1050 1874 V 73 w Fr(2)1173 1801 y Fh(e)1172
1820 y Fr(3)f(3)p 1342 1874 V 73 w FA(2)1452 1801 y Fh(e)1455
1820 y FA(3)h(3)p 1610 1874 V 63 w Fr(1)1722 1801 y Fh(e)1721
1820 y Fr(1)g(2)p 1882 1874 V 62 w FA(1)1992 1801 y Fh(e)1994
1820 y FA(1)g(2)p 2149 1874 V 63 w Fr(1)2261 1801 y Fh(e)2260
1820 y Fr(1)g(1)p 2421 1874 V 65 w FA(1)2533 1801 y Fh(e)2536
1820 y FA(1)g(1)p 2693 1874 V 65 w Fr(1)f(0)h(2)p 2965
1874 V 65 w FA(1)g(0)g(2)p 3237 1874 V 65 w Fr(1)g(1)f(2)p
3509 1874 V 3756 1874 V 126 2055 V 154 2001 a FA(0)p
223 2055 V 51 w(3)h(2)422 1981 y Fh(e)401 2001 y FA(13)p
516 2055 V 61 w(1)626 1981 y Fh(e)628 2001 y FA(4)g(5)p
783 2055 V 71 w(0)f(0)h(1)p 1050 2055 V 61 w(6)1150 1981
y Fh(e)1152 2001 y FA(9)1248 1981 y Fh(e)1228 2001 y
FA(13)p 1342 2055 V 61 w(0)g(1)g(1)p 1610 2055 V 73 w(1)1722
1981 y Fh(e)1725 2001 y FA(7)1798 1981 y Fh(e)1800 2001
y FA(4)p 1882 2055 V 73 w(1)1992 1981 y Fh(e)1994 2001
y FA(1)2067 1981 y Fh(e)2070 2001 y FA(1)p 2149 2055
V 73 w(1)2261 1981 y Fh(e)2264 2001 y FA(1)2337 1981
y Fh(e)2340 2001 y FA(2)p 2421 2055 V 75 w(0)g(1)g(1)p
2693 2055 V 75 w(2)2805 1981 y Fh(e)2808 2001 y FA(5)2881
1981 y Fh(e)2884 2001 y FA(1)p 2965 2055 V 75 w(0)g(1)g(0)p
3237 2055 V 75 w(1)3349 1981 y Fh(e)3352 2001 y FA(5)g(2)p
3509 2055 V 3756 2055 V 128 2058 3630 4 v 0 TeXcolorgray
0 2372 a Fy(con)m(tin)m(ual)i(application)f(of)f(the)h(admissibilit)m
(y)i(requiremen)m(ts,)h(one)d(can)g(sho)m(w)g(that)g
Fn(v)j Fy(assigns)e(certain)0 2547 y(v)-5 b(alues)42
b(to)f(all)g(the)g(observ)-5 b(ables)43 b(in)e(T)-8 b(able)42
b(I.)69 b(This)42 b(argumen)m(t)g(pro)s(ceeds)g(through)f(the)g(table)h
(from)0 2721 y(left)37 b(to)g(righ)m(t,)h(where)g(the)g(v)-5
b(alue)37 b(assigned)i(to)d(eac)m(h)i(observ)-5 b(able)38
b(is)g(noted)f(in)g(the)h(leftmost)f(column.)0 2895 y(F)-8
b(or)36 b(example,)k(in)d(the)h(\014rst)f(step)h(w)m(e)g(conclude)g
(that)f Fn(v)t Fy(\()p Fn(P)2222 2910 y Fp( )2274 2895
y Fn(;)17 b(C)2388 2910 y Fm(1)2427 2895 y Fy(\))36 b(=)f
Fn(v)t Fy(\()p Fn(P)2764 2910 y Fp(\036)2809 2895 y Fn(;)17
b(C)2923 2910 y Fm(1)2962 2895 y Fy(\))35 b(=)g(0.)57
b(An)37 b(observ)-5 b(able)0 3070 y(whose)32 b(v)-5 b(alue)30
b(is)h(determined)h(b)m(y)g(the)e(others)h(in)g(the)g(column)g(is)g
(mark)m(ed)h(in)e(b)s(old,)h(pro)m(vided)h(that)e(the)0
3244 y(v)-5 b(alue)32 b(giv)m(en)h(will)f(b)s(e)g(used)g(later)g(on.)43
b(This)33 b(argumen)m(t)f(is)g(also)g(illustrated)g(in)g(Fig.)f(2.)43
b(W)-8 b(e)32 b(ev)m(en)m(tually)0 3418 y(obtain)g(a)h(con)m
(tradiction,)g(namely)h(that)e Fn(v)t Fy(\()p Fn(o;)17
b(C)1805 3433 y Fm(24)1879 3418 y Fy(\))28 b(=)f(0)32
b(for)h(all)f Fn(o)c Fo(2)g Fn(C)2653 3433 y Fm(24)2760
3418 y Fy(\(the)33 b(dotted)f(line)i(in)e(Fig.)h(2\).)0
3593 y(Therefore)h(there)f(do)s(es)g(not)f(exist)i(suc)m(h)g
(admissible)h(assignmen)m(t)f(function)f Fn(v)t Fy(.)0
3817 y(W)-8 b(e)30 b(no)m(w)h(sho)m(w)g(that)e(if)h(0)d
Fn(<)h Fo(jh)p Fn(a)p Fo(j)p Fn(b)p Fo(ij)f Fn(<)1521
3778 y Fm(3)p 1474 3794 130 4 v 1474 3804 a Fx(p)p 1533
3804 71 3 v 55 x Fm(14)1613 3798 y Fy(,)1670 3817 y(and)j
Fn(P)1920 3832 y Fp(a)1991 3817 y Fy(and)g Fn(P)2241
3832 y Fp(b)2305 3817 y Fy(b)s(oth)g(ha)m(v)m(e)h(the)f(v)-5
b(alue)30 b(1,)g(then)h(there)f(is)h(a)0 3991 y(third)i(observ)-5
b(able)34 b Fn(P)782 4006 y Fp(c)850 3991 y Fy(whic)m(h)g(m)m(ust)g
(also)g(ha)m(v)m(e)g(the)f(v)-5 b(alue)34 b(1)e(and)h(satis\014es)i
Fo(jh)p Fn(a)p Fo(j)p Fn(c)p Fo(ij)27 b Fy(=)3288 3952
y Fm(3)p 3241 3968 130 4 v 3241 3978 a Fx(p)p 3300 3978
71 3 v 55 x Fm(14)3381 3972 y Fy(.)3441 3991 y(The)34
b(ab)s(o)m(v)m(e)0 4166 y(pro)s(of)e(then)h(applies)h(to)e(again)g(sho)
m(w)i(no)e(admissible)j Fn(v)h Fy(exists)e(satisfying)g(the)f
(requiremen)m(ts.)0 4390 y(By)i(scaling)g Fo(j)p Fn(b)p
Fo(i)f Fy(b)m(y)i(a)e(phase)h(factor)f(if)h(necessary)-8
b(,)37 b(w)m(e)f(ma)m(y)f(assume)h(that)e Fo(h)p Fn(a)p
Fo(j)p Fn(b)p Fo(i)d(2)g Fq(R)p Fy(.)49 b(Let)35 b Fn(p)c
Fy(=)g Fo(h)p Fn(a)p Fo(j)p Fn(b)p Fo(i)0 4564 y Fy(and)41
b Fn(q)j Fy(=)402 4478 y Fl(p)p 502 4478 259 4 v 86 x
Fy(1)22 b Fo(\000)g Fn(p)721 4535 y Fm(2)761 4564 y Fy(.)67
b(Then)41 b(\()p Fo(j)p Fn(b)p Fo(i)28 b(\000)g(j)o Fn(a)p
Fo(i)17 b Fn(p)p Fy(\))1627 4525 y Fm(1)p 1627 4541 36
4 v 1628 4598 a Fp(q)1712 4564 y Fy(is)41 b(a)g(unit)f(v)m(ector)i
(orthogonal)d(to)i Fo(j)o Fn(a)p Fo(i)p Fy(.)67 b(T)-8
b(aking)41 b(a)f(cross)0 4738 y(pro)s(duct,)33 b(the)g(set)h
Fo(fj)o Fn(a)p Fo(i)17 b Fn(;)g Fy(\()p Fo(j)o Fn(b)p
Fo(i)22 b(\000)h(j)p Fn(a)p Fo(i)16 b Fn(p)p Fy(\))1440
4699 y Fm(1)p 1440 4715 V 1441 4773 a Fp(q)1485 4719
y Fy(,)1529 4738 y Fo(j)p Fn(a)p Fo(i)22 b(\002)h Fy(\()p
Fo(j)o Fn(b)p Fo(i)g(\000)f(j)p Fn(a)p Fo(i)17 b Fn(p)p
Fy(\))2268 4699 y Fm(1)p 2268 4715 V 2269 4773 a Fp(q)2313
4738 y Fo(g)32 b Fy(forms)h(an)g(orthonormal)f(basis)i(for)e
Fq(C)3819 4702 y Fm(3)3858 4738 y Fy(.)0 4913 y(Relativ)m(e)i(to)e
(this)h(basis,)h Fo(j)o Fn(a)p Fo(i)28 b(\021)g Fy(\(1)p
Fn(;)17 b Fy(0)p Fn(;)g Fy(0\))31 b(and)i Fo(j)p Fn(b)p
Fo(i)28 b(\021)g Fy(\()p Fn(p;)17 b(q)t(;)g Fy(0\).)42
b(Set)33 b Fn(x)28 b Fy(=)2770 4873 y Fm(3)p 2723 4890
130 4 v 2723 4900 a Fx(p)p 2781 4900 71 3 v 2781 4955
a Fm(14)2862 4894 y Fy(,)2922 4913 y(so)k(that)h Fn(p)3302
4877 y Fm(2)3369 4913 y Fn(<)27 b(x)3527 4877 y Fm(2)3567
4913 y Fy(.)44 b(Then)786 5148 y Fn(p)835 5111 y Fm(2)875
5148 y Fy(\(1)21 b Fo(\000)i Fn(x)1138 5111 y Fm(2)1178
5148 y Fy(\))p 786 5192 430 4 v 910 5283 a Fn(q)957 5254
y Fm(2)997 5283 y Fn(x)1052 5254 y Fm(2)1253 5215 y Fy(=)1367
5148 y Fn(p)1416 5111 y Fm(2)1477 5148 y Fo(\000)g Fn(p)1626
5111 y Fm(2)1665 5148 y Fn(x)1720 5111 y Fm(2)p 1367
5192 394 4 v 1473 5283 a Fn(q)1520 5254 y Fm(2)1559 5283
y Fn(x)1614 5254 y Fm(2)1798 5215 y Fn(<)1912 5148 y(x)1967
5111 y Fm(2)2029 5148 y Fo(\000)f Fn(p)2177 5111 y Fm(2)2217
5148 y Fn(x)2272 5111 y Fm(2)p 1912 5192 400 4 v 2021
5283 a Fn(q)2068 5254 y Fm(2)2107 5283 y Fn(x)2162 5254
y Fm(2)2349 5215 y Fy(=)2463 5148 y(\(1)f Fo(\000)i Fn(p)2720
5111 y Fm(2)2759 5148 y Fy(\))p Fn(x)2852 5111 y Fm(2)p
2463 5192 430 4 v 2587 5283 a Fn(q)2634 5254 y Fm(2)2673
5283 y Fn(x)2728 5254 y Fm(2)2930 5215 y Fy(=)k(1)p Fn(:)0
5511 y Fy(No)m(w)59 b(set)h Fn(y)75 b Fy(=)708 5464 y
Fp(p)p Fm(\(1)p Fx(\000)p Fp(x)901 5440 y Fg(2)936 5464
y Fm(\))p 708 5488 255 4 v 799 5545 a Fp(q)r(x)973 5495
y Fy(,)1059 5511 y(so)59 b(that)f Fn(y)1494 5475 y Fm(2)1605
5511 y Fy(=)1763 5464 y Fp(p)1799 5440 y Fg(2)1833 5464
y Fm(\(1)p Fx(\000)p Fp(x)1990 5440 y Fg(2)2025 5464
y Fm(\))p 1763 5488 290 4 v 1837 5545 a Fp(q)1871 5526
y Fg(2)1905 5545 y Fp(x)1945 5526 y Fg(2)2063 5511 y
Fy(\(1)39 b Fo(\000)i Fn(x)2362 5475 y Fm(2)2402 5511
y Fy(\))72 b Fn(<)g Fy(1)40 b Fo(\000)g Fn(x)2921 5475
y Fm(2)2961 5511 y Fy(.)122 b(Then)60 b(w)m(e)g(can)f(set)p
0 TeXcolorgray 1845 5774 a(10)p 0 TeXcolorgray eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
14 4075 a @beginspecial 72 @llx 232 @lly 535 @urx 721
@ury 4630 @rwi @setspecial
%%BeginDocument: 2012-incomput-proofs_PRA-Figure2.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 1.pdf
%%Creator: Adobe Acrobat 10.1.4
%%For: b
%%CreationDate: 29.11.2012, 22:48:59
%%BoundingBox: 72 232 535 721
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 759 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2012-11-29T22:48:22+01:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2012-11-29T22:48:22+01:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-2.4-1.40.13 (TeX Live 2012/W32TeX) kpathsea version 6.1.0"
   pdf:Producer="pdfTeX-1.40.13"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 2 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
303.647 88.5021 mo
500.04 201.889 li
499.542 202.752 li
303.149 89.3649 li
303.647 88.5021 li
false sop
0 1 1 0 cmyk
f
297.42 94.9112 mo
297.42 93.915 li
308.379 93.915 li
308.379 83.9522 li
298.417 83.9522 li
298.417 94.9112 li
297.42 94.9112 li
297.42 93.915 li
297.42 94.9112 li
296.424 94.9112 li
296.424 81.9597 li
310.372 81.9597 li
310.372 95.9075 li
296.424 95.9075 li
296.424 94.9112 li
297.42 94.9112 li
f
413.55 145.627 mo
412.554 145.627 li
412.553 142.598 411.328 139.864 409.344 137.878 cv
407.357 135.893 404.624 134.669 401.595 134.668 cv
398.565 134.669 395.832 135.893 393.845 137.878 cv
391.86 139.864 390.636 142.598 390.635 145.627 cv
390.636 148.657 391.86 151.39 393.845 153.376 cv
395.832 155.361 398.565 156.586 401.595 156.586 cv
404.624 156.586 407.357 155.361 409.344 153.376 cv
411.328 151.39 412.553 148.657 412.554 145.627 cv
413.55 145.627 li
414.546 145.627 li
414.545 152.781 408.748 158.578 401.595 158.579 cv
394.441 158.578 388.643 152.781 388.643 145.627 cv
388.643 138.474 394.441 132.676 401.595 132.676 cv
408.748 132.676 414.545 138.474 414.546 145.627 cv
413.55 145.627 li
f
1.99255 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
508.758 202.321 mo
508.758 197.369 504.743 193.354 499.791 193.354 cv
494.839 193.354 490.825 197.369 490.825 202.321 cv
490.825 207.273 494.839 211.287 499.791 211.287 cv
504.743 211.287 508.758 207.273 508.758 202.321 cv
cp
@
303.647 89.3649 mo
107.254 202.752 li
106.756 201.889 li
303.149 88.5021 li
303.647 89.3649 li
1 1 0 0 cmyk
f
300.409 91.9224 mo
300.409 90.9261 li
305.391 90.9261 li
305.391 86.9411 li
301.405 86.9411 li
301.405 91.9224 li
300.409 91.9224 li
300.409 90.9261 li
300.409 91.9224 li
299.413 91.9224 li
299.413 84.9485 li
307.383 84.9485 li
307.383 92.9187 li
299.413 92.9187 li
299.413 91.9224 li
300.409 91.9224 li
f
214.168 145.627 mo
213.172 145.627 li
213.171 143.423 212.281 141.437 210.837 139.991 cv
209.392 138.548 207.406 137.657 205.202 137.657 cv
202.997 137.657 201.011 138.548 199.566 139.991 cv
198.122 141.437 197.232 143.423 197.231 145.627 cv
197.232 147.831 198.122 149.817 199.566 151.263 cv
201.011 152.707 202.997 153.597 205.202 153.597 cv
207.406 153.597 209.392 152.707 210.837 151.263 cv
212.281 149.817 213.171 147.831 213.172 145.627 cv
214.168 145.627 li
215.164 145.627 li
215.164 151.13 210.704 155.589 205.202 155.59 cv
199.699 155.589 195.239 151.13 195.239 145.627 cv
195.239 140.124 199.699 135.665 205.202 135.664 cv
210.704 135.665 215.164 140.124 215.164 145.627 cv
214.168 145.627 li
f
112.983 202.321 mo
111.986 202.321 li
111.986 200.942 111.43 199.703 110.527 198.798 cv
109.623 197.895 108.384 197.34 107.005 197.339 cv
105.626 197.34 104.387 197.895 103.483 198.798 cv
102.58 199.703 102.024 200.942 102.024 202.321 cv
102.024 203.7 102.58 204.939 103.483 205.843 cv
104.387 206.746 105.626 207.302 107.005 207.302 cv
108.384 207.302 109.623 206.746 110.527 205.843 cv
111.43 204.939 111.986 203.7 111.986 202.321 cv
112.983 202.321 li
113.979 202.321 li
113.978 206.173 110.857 209.294 107.005 209.295 cv
103.153 209.294 100.032 206.173 100.031 202.321 cv
100.032 198.469 103.153 195.348 107.005 195.347 cv
110.857 195.348 113.978 198.469 113.979 202.321 cv
112.983 202.321 li
f
303.149 542.051 mo
499.542 428.664 li
500.04 429.527 li
303.647 542.914 li
303.149 542.051 li
0 1 1 0 cmyk
f
297.42 548.46 mo
297.42 547.464 li
308.379 547.464 li
308.379 537.501 li
298.417 537.501 li
298.417 548.46 li
297.42 548.46 li
297.42 547.464 li
297.42 548.46 li
296.424 548.46 li
296.424 535.509 li
310.372 535.509 li
310.372 549.456 li
296.424 549.456 li
296.424 548.46 li
297.42 548.46 li
f
404.583 485.789 mo
403.587 485.789 li
403.585 484.689 402.695 483.798 401.595 483.796 cv
400.494 483.798 399.604 484.689 399.602 485.789 cv
399.604 486.889 400.494 487.779 401.595 487.781 cv
402.695 487.779 403.585 486.889 403.587 485.789 cv
404.583 485.789 li
405.58 485.789 li
405.579 487.99 403.796 489.773 401.595 489.774 cv
399.393 489.773 397.61 487.99 397.609 485.789 cv
397.61 483.588 399.393 481.804 401.595 481.804 cv
403.796 481.804 405.579 483.588 405.58 485.789 cv
404.583 485.789 li
f
505.769 429.095 mo
504.772 429.095 li
504.772 427.717 504.216 426.477 503.313 425.573 cv
502.409 424.67 501.17 424.114 499.791 424.114 cv
498.412 424.114 497.173 424.67 496.269 425.573 cv
495.366 426.477 494.81 427.717 494.81 429.095 cv
494.81 430.474 495.366 431.713 496.269 432.618 cv
497.173 433.521 498.412 434.076 499.791 434.077 cv
501.17 434.076 502.409 433.521 503.313 432.618 cv
504.216 431.713 504.772 430.474 504.772 429.095 cv
505.769 429.095 li
506.765 429.095 li
506.764 432.947 503.643 436.069 499.791 436.069 cv
495.939 436.069 492.818 432.947 492.817 429.095 cv
492.818 425.243 495.939 422.122 499.791 422.121 cv
503.643 422.122 506.764 425.243 506.765 429.095 cv
505.769 429.095 li
f
303.149 542.914 mo
106.756 429.527 li
107.254 428.664 li
303.647 542.051 li
303.149 542.914 li
1 1 0 0 cmyk
f
300.409 545.471 mo
300.409 544.475 li
305.391 544.475 li
305.391 540.49 li
301.405 540.49 li
301.405 545.471 li
300.409 545.471 li
300.409 544.475 li
300.409 545.471 li
299.413 545.471 li
299.413 538.497 li
307.383 538.497 li
307.383 546.468 li
299.413 546.468 li
299.413 545.471 li
300.409 545.471 li
f
208.19 485.789 mo
207.194 485.789 li
207.192 484.689 206.302 483.798 205.202 483.796 cv
204.101 483.798 203.211 484.689 203.209 485.789 cv
203.211 486.889 204.101 487.779 205.202 487.781 cv
206.302 487.779 207.192 486.889 207.194 485.789 cv
208.19 485.789 li
209.187 485.789 li
209.186 487.99 207.403 489.773 205.202 489.774 cv
203 489.773 201.217 487.99 201.216 485.789 cv
201.217 483.588 203 481.804 205.202 481.804 cv
207.403 481.804 209.186 483.588 209.187 485.789 cv
208.19 485.789 li
f
115.971 429.095 mo
114.975 429.095 li
114.975 426.891 114.085 424.905 112.641 423.459 cv
111.195 422.016 109.209 421.126 107.005 421.125 cv
104.801 421.126 102.815 422.016 101.369 423.459 cv
99.9254 424.905 99.0353 426.891 99.0348 429.095 cv
99.0353 431.299 99.9254 433.286 101.369 434.731 cv
102.815 436.175 104.801 437.065 107.005 437.065 cv
109.209 437.065 111.195 436.175 112.641 434.731 cv
114.085 433.286 114.975 431.299 114.975 429.095 cv
115.971 429.095 li
116.968 429.095 li
116.967 434.598 112.508 439.057 107.005 439.058 cv
101.502 439.057 97.0429 434.598 97.0423 429.095 cv
97.0429 423.592 101.502 419.133 107.005 419.133 cv
112.508 419.133 116.967 423.592 116.968 429.095 cv
115.971 429.095 li
f
106.507 429.095 mo
106.507 202.321 li
107.503 202.321 li
107.503 429.095 li
106.507 429.095 li
1 0 1 0 cmyk
f
112.983 429.095 mo
111.986 429.095 li
111.986 427.717 111.43 426.477 110.527 425.573 cv
109.623 424.67 108.384 424.114 107.005 424.114 cv
105.626 424.114 104.387 424.67 103.483 425.573 cv
102.58 426.477 102.024 427.717 102.024 429.095 cv
102.024 430.474 102.58 431.713 103.483 432.618 cv
104.387 433.521 105.626 434.076 107.005 434.077 cv
108.384 434.076 109.623 433.521 110.527 432.618 cv
111.43 431.713 111.986 430.474 111.986 429.095 cv
112.983 429.095 li
113.979 429.095 li
113.978 432.947 110.857 436.069 107.005 436.069 cv
103.153 436.069 100.032 432.947 100.031 429.095 cv
100.032 425.243 103.153 422.122 107.005 422.121 cv
110.857 422.122 113.978 425.243 113.979 429.095 cv
112.983 429.095 li
f
101.027 321.686 mo
101.027 320.689 li
111.986 320.689 li
111.986 310.727 li
102.024 310.727 li
102.024 321.686 li
101.027 321.686 li
101.027 320.689 li
101.027 321.686 li
100.031 321.686 li
100.031 308.734 li
113.979 308.734 li
113.979 322.682 li
100.031 322.682 li
100.031 321.686 li
101.027 321.686 li
f
109.994 202.321 mo
108.998 202.321 li
108.996 201.221 108.105 200.33 107.005 200.328 cv
105.905 200.33 105.014 201.221 105.012 202.321 cv
105.014 203.421 105.905 204.311 107.005 204.313 cv
108.105 204.311 108.996 203.421 108.998 202.321 cv
109.994 202.321 li
110.99 202.321 li
110.989 204.522 109.206 206.305 107.005 206.306 cv
104.804 206.305 103.021 204.522 103.02 202.321 cv
103.021 200.12 104.804 198.336 107.005 198.336 cv
109.206 198.336 110.989 200.12 110.99 202.321 cv
109.994 202.321 li
f
499.293 429.095 mo
499.293 202.321 li
500.289 202.321 li
500.289 429.095 li
499.293 429.095 li
f
502.78 429.095 mo
501.784 429.095 li
501.781 427.995 500.891 427.105 499.791 427.103 cv
498.691 427.105 497.8 427.995 497.798 429.095 cv
497.8 430.195 498.691 431.086 499.791 431.088 cv
500.891 431.086 501.781 430.195 501.784 429.095 cv
502.78 429.095 li
503.776 429.095 li
503.775 431.297 501.992 433.08 499.791 433.08 cv
497.59 433.08 495.807 431.296 495.806 429.095 cv
495.807 426.894 497.59 425.111 499.791 425.11 cv
501.992 425.111 503.775 426.894 503.776 429.095 cv
502.78 429.095 li
f
493.813 321.686 mo
493.813 320.689 li
504.772 320.689 li
504.772 310.727 li
494.81 310.727 li
494.81 321.686 li
493.813 321.686 li
493.813 320.689 li
493.813 321.686 li
492.817 321.686 li
492.817 308.734 li
506.765 308.734 li
506.765 322.682 li
492.817 322.682 li
492.817 321.686 li
493.813 321.686 li
f
505.769 202.321 mo
505.769 199.019 503.092 196.343 499.791 196.343 cv
496.49 196.343 493.813 199.019 493.813 202.321 cv
493.813 205.622 496.49 208.298 499.791 208.298 cv
503.092 208.298 505.769 205.622 505.769 202.321 cv
cp
@
400.598 485.789 mo
399.675 485.256 li
399.767 484.926 399.941 484.631 400.174 484.393 cv
401.594 485.214 li
400.598 485.789 li
397.92 484.243 mo
313.361 435.423 li
313.361 434.272 li
398.419 483.38 li
398.219 483.644 398.051 483.934 397.92 484.243 cv
311.368 434.272 mo
310.372 433.697 li
310.372 432.546 li
311.368 433.122 li
311.368 434.272 li
308.379 432.547 mo
307.383 431.971 li
307.383 430.821 li
308.379 431.396 li
308.379 432.547 li
305.391 430.821 mo
303.896 429.958 li
303.896 429.593 li
305.257 429.593 li
305.391 429.67 li
305.391 430.821 li
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
401.345 486.22 mo
400.598 485.789 li
401.594 485.214 li
401.844 485.357 li
401.345 486.22 li
0 1 1 0 cmyk
f
399.675 485.256 mo
397.92 484.243 li
398.051 483.934 398.219 483.644 398.419 483.38 cv
400.174 484.393 li
399.941 484.631 399.767 484.926 399.675 485.256 cv
f
302.535 428.597 mo
301.539 428.597 li
301.405 428.52 li
301.405 427.37 li
302.037 427.734 li
302.535 428.597 li
299.413 427.37 mo
298.417 426.795 li
298.417 425.644 li
299.413 426.219 li
299.413 427.37 li
296.424 425.644 mo
295.428 425.069 li
295.428 423.918 li
296.424 424.494 li
296.424 425.644 li
293.435 423.919 mo
202.257 371.277 li
202.88 370.486 li
254.117 400.068 li
253.868 400.499 li
254.731 400.997 li
254.98 400.566 li
293.435 422.768 li
293.435 423.919 li
201.386 370.774 mo
113.979 320.31 li
113.979 319.159 li
202.008 369.983 li
201.386 370.774 li
111.986 319.159 mo
107.503 316.571 li
107.503 315.42 li
111.986 318.009 li
111.986 319.159 li
1 /0 /CSD get_res sepcs
0 sep
f
107.503 316.571 mo
106.756 316.139 li
107.254 315.277 li
107.503 315.42 li
107.503 316.571 li
1 0 1 0 cmyk
f
113.979 320.31 mo
111.986 319.159 li
111.986 318.009 li
113.979 319.159 li
113.979 320.31 li
f
206.198 485.789 mo
205.201 485.214 li
206.622 484.393 li
206.855 484.631 207.029 484.926 207.121 485.256 cv
206.198 485.789 li
208.876 484.243 mo
208.745 483.934 208.577 483.644 208.377 483.38 cv
293.435 434.272 li
293.435 435.423 li
208.876 484.243 li
295.428 434.272 mo
295.428 433.122 li
296.424 432.546 li
296.424 433.697 li
295.428 434.272 li
298.417 432.547 mo
298.417 431.396 li
299.413 430.821 li
299.413 431.971 li
298.417 432.547 li
301.405 430.821 mo
301.405 429.67 li
301.539 429.593 li
302.9 429.593 li
302.9 429.958 li
301.405 430.821 li
1 /0 /CSD get_res sepcs
0 sep
f
205.451 486.22 mo
204.952 485.357 li
205.201 485.214 li
206.198 485.789 li
205.451 486.22 li
1 1 0 0 cmyk
f
207.121 485.256 mo
207.029 484.926 206.855 484.631 206.622 484.393 cv
208.377 483.38 li
208.577 483.644 208.745 483.934 208.876 484.243 cv
207.121 485.256 li
f
305.257 428.597 mo
304.488 428.597 li
305.391 427.555 li
305.391 428.52 li
305.257 428.597 li
307.383 427.37 mo
307.383 426.219 li
308.379 425.644 li
308.379 426.795 li
307.383 427.37 li
310.372 425.644 mo
310.372 424.494 li
311.368 423.918 li
311.368 425.069 li
310.372 425.644 li
313.361 423.919 mo
313.361 422.768 li
351.816 400.566 li
352.065 400.997 li
352.496 400.748 li
352.745 401.18 li
401.594 372.977 li
401.594 372.977 li
313.361 423.919 li
402.591 372.402 mo
402.591 372.402 li
404.539 371.277 li
404.539 371.277 li
402.591 372.402 li
405.41 370.774 mo
405.41 370.774 li
450.195 344.918 li
450.195 344.918 li
405.41 370.774 li
451.191 344.342 mo
451.191 344.342 li
492.817 320.31 li
451.191 344.342 li
494.81 319.159 mo
494.81 319.159 li
495.806 318.584 li
494.81 319.159 li
1 /0 /CSD get_res sepcs
0 sep
f
.99628 lw
107.005 315.708 mo
254.3 400.748 li
.47 .91 0 .08 cmyk
@
1.99255 lw
104.016 318.697 mo
109.994 318.697 li
109.994 312.719 li
104.016 312.719 li
cp
@
183.641 358.228 mo
183.641 356.578 182.303 355.239 180.652 355.239 cv
179.002 355.239 177.664 356.578 177.664 358.228 cv
177.664 359.879 179.002 361.217 180.652 361.217 cv
182.303 361.217 183.641 359.879 183.641 358.228 cv
cp
@
260.277 400.748 mo
260.277 397.447 257.601 394.771 254.3 394.771 cv
250.998 394.771 248.322 397.447 248.322 400.748 cv
248.322 404.05 250.998 406.726 254.3 406.726 cv
257.601 406.726 260.277 404.05 260.277 400.748 cv
cp
@
500.04 316.139 mo
352.745 401.18 li
352.247 400.317 li
499.542 315.277 li
500.04 316.139 li
f
496.802 318.697 mo
496.802 317.701 li
501.784 317.701 li
501.784 313.715 li
497.798 313.715 li
497.798 318.697 li
496.802 318.697 li
496.802 317.701 li
496.802 318.697 li
495.806 318.697 li
495.806 311.723 li
503.776 311.723 li
503.776 319.693 li
495.806 319.693 li
495.806 318.697 li
496.802 318.697 li
f
429.132 358.228 mo
429.132 356.578 427.794 355.239 426.144 355.239 cv
424.493 355.239 423.155 356.578 423.155 358.228 cv
423.155 359.879 424.493 361.217 426.144 361.217 cv
427.794 361.217 429.132 359.879 429.132 358.228 cv
cp
@
358.474 400.748 mo
358.474 397.447 355.798 394.771 352.496 394.771 cv
349.195 394.771 346.519 397.447 346.519 400.748 cv
346.519 404.05 349.195 406.726 352.496 406.726 cv
355.798 406.726 358.474 404.05 358.474 400.748 cv
cp
@
402.026 145.876 mo
254.731 400.997 li
253.868 400.499 li
401.163 145.378 li
402.026 145.876 li
.94 .11 0 0 cmyk
f
410.561 145.627 mo
409.565 145.627 li
409.564 143.423 408.674 141.437 407.23 139.991 cv
405.785 138.548 403.799 137.657 401.595 137.657 cv
399.39 137.657 397.404 138.548 395.959 139.991 cv
394.515 141.437 393.625 143.423 393.624 145.627 cv
393.625 147.831 394.515 149.817 395.959 151.263 cv
397.404 152.707 399.39 153.597 401.595 153.597 cv
403.799 153.597 405.785 152.707 407.23 151.263 cv
408.674 149.817 409.564 147.831 409.565 145.627 cv
410.561 145.627 li
411.557 145.627 li
411.557 151.13 407.097 155.589 401.595 155.59 cv
396.092 155.589 391.632 151.13 391.632 145.627 cv
391.632 140.124 396.092 135.665 401.595 135.664 cv
407.097 135.665 411.557 140.124 411.557 145.627 cv
410.561 145.627 li
f
321.969 279.165 mo
333.925 279.165 li
333.925 267.21 li
321.969 267.21 li
cp
@
257.289 400.748 mo
257.289 399.098 255.95 397.76 254.3 397.76 cv
252.649 397.76 251.311 399.098 251.311 400.748 cv
251.311 402.399 252.649 403.737 254.3 403.737 cv
255.95 403.737 257.289 402.399 257.289 400.748 cv
cp
@
205.633 145.378 mo
352.928 400.499 li
352.065 400.997 li
204.77 145.876 li
205.633 145.378 li
0 .61 .87 0 cmyk
f
211.179 145.627 mo
210.183 145.627 li
210.182 144.248 209.627 143.009 208.724 142.105 cv
207.819 141.202 206.58 140.646 205.202 140.646 cv
203.823 140.646 202.584 141.202 201.679 142.105 cv
200.776 143.009 200.221 144.248 200.22 145.627 cv
200.221 147.006 200.776 148.245 201.679 149.15 cv
202.584 150.053 203.823 150.608 205.202 150.609 cv
206.58 150.608 207.819 150.053 208.724 149.15 cv
209.627 148.245 210.182 147.006 210.183 145.627 cv
211.179 145.627 li
212.175 145.627 li
212.175 149.479 209.053 152.601 205.202 152.601 cv
201.35 152.601 198.228 149.479 198.228 145.627 cv
198.228 141.775 201.35 138.654 205.202 138.653 cv
209.053 138.654 212.175 141.775 212.175 145.627 cv
211.179 145.627 li
f
272.871 279.165 mo
284.827 279.165 li
284.827 267.21 li
272.871 267.21 li
cp
@
355.485 400.748 mo
355.485 399.098 354.147 397.76 352.496 397.76 cv
350.846 397.76 349.507 399.098 349.507 400.748 cv
349.507 402.399 350.846 403.737 352.496 403.737 cv
354.147 403.737 355.485 402.399 355.485 400.748 cv
cp
@
497.932 429.593 mo
497.862 429.593 li
497.821 429.434 497.799 429.267 497.798 429.095 cv
497.799 428.923 497.821 428.756 497.862 428.597 cv
497.932 428.597 li
498.795 429.095 li
497.932 429.593 li
495.837 429.593 mo
494.834 429.593 li
494.818 429.43 494.81 429.263 494.81 429.095 cv
494.81 428.927 494.818 428.761 494.834 428.597 cv
495.837 428.597 li
495.816 428.76 495.806 428.926 495.806 429.095 cv
495.806 429.264 495.816 429.43 495.837 429.593 cv
492.835 429.593 mo
313.361 429.593 li
313.361 428.597 li
449.667 428.597 li
450.301 429.403 li
450.693 429.095 li
451.191 429.095 li
451.191 428.597 li
492.835 428.597 li
492.823 428.762 492.817 428.928 492.817 429.095 cv
492.817 429.263 492.823 429.429 492.835 429.593 cv
499.791 429.095 mo
499.791 429.095 li
499.791 429.095 li
499.791 429.095 li
1 /0 /CSD get_res sepcs
0 sep
f
499.791 429.593 mo
497.932 429.593 li
498.795 429.095 li
499.542 429.527 li
499.791 429.095 li
499.791 429.095 li
499.791 429.593 li
0 1 1 0 cmyk
f
494.834 429.593 mo
492.835 429.593 li
492.823 429.429 492.817 429.263 492.817 429.095 cv
492.817 428.928 492.823 428.762 492.835 428.597 cv
494.834 428.597 li
494.818 428.761 494.81 428.927 494.81 429.095 cv
494.81 429.263 494.818 429.43 494.834 429.593 cv
f
499.791 429.095 mo
499.791 429.095 li
499.791 429.095 li
499.791 429.095 li
1 0 1 0 cmyk
f
497.862 429.593 mo
495.837 429.593 li
495.816 429.43 495.806 429.264 495.806 429.095 cv
495.806 428.926 495.816 428.76 495.837 428.597 cv
497.862 428.597 li
497.821 428.756 497.799 428.923 497.798 429.095 cv
497.799 429.267 497.821 429.434 497.862 429.593 cv
f
311.368 429.593 mo
310.372 429.593 li
310.372 428.597 li
311.368 428.597 li
311.368 429.593 li
308.379 429.593 mo
307.383 429.593 li
307.383 428.597 li
308.379 428.597 li
308.379 429.593 li
305.391 429.593 mo
305.257 429.593 li
304.394 429.095 li
305.257 428.597 li
305.391 428.597 li
305.391 429.593 li
1 /0 /CSD get_res sepcs
0 sep
f
305.257 429.593 mo
303.896 429.593 li
303.896 429.383 li
304.394 429.095 li
305.257 429.593 li
f
304.394 429.095 mo
304.169 428.965 li
304.488 428.597 li
305.257 428.597 li
304.394 429.095 li
f
303.896 429.383 mo
303.896 429.281 li
304.169 428.965 li
304.394 429.095 li
303.896 429.383 li
f
328.338 272.88 mo
451.084 428.787 li
450.301 429.403 li
327.556 273.496 li
328.338 272.88 li
0 .61 .87 0 cmyk
f
324.958 276.177 mo
330.936 276.177 li
330.936 270.199 li
324.958 270.199 li
cp
@
392.309 351.142 mo
392.309 349.491 390.971 348.153 389.32 348.153 cv
387.669 348.153 386.331 349.491 386.331 351.142 cv
386.331 352.792 387.669 354.13 389.32 354.13 cv
390.971 354.13 392.309 352.792 392.309 351.142 cv
cp
@
456.67 429.095 mo
456.67 425.794 453.994 423.118 450.693 423.118 cv
447.391 423.118 444.715 425.794 444.715 429.095 cv
444.715 432.397 447.391 435.073 450.693 435.073 cv
453.994 435.073 456.67 432.397 456.67 429.095 cv
cp
@
279.24 273.496 mo
156.495 429.403 li
155.712 428.787 li
278.458 272.88 li
279.24 273.496 li
.94 .11 0 0 cmyk
f
275.86 276.177 mo
281.838 276.177 li
281.838 270.199 li
275.86 270.199 li
cp
@
220.465 351.142 mo
220.465 349.491 219.127 348.153 217.476 348.153 cv
215.825 348.153 214.487 349.491 214.487 351.142 cv
214.487 352.792 215.825 354.13 217.476 354.13 cv
219.127 354.13 220.465 352.792 220.465 351.142 cv
cp
@
162.081 429.095 mo
162.081 425.794 159.405 423.118 156.103 423.118 cv
152.802 423.118 150.126 425.794 150.126 429.095 cv
150.126 432.397 152.802 435.073 156.103 435.073 cv
159.405 435.073 162.081 432.397 162.081 429.095 cv
cp
@
107.005 428.597 mo
303.398 428.597 li
303.398 429.593 li
107.005 429.593 li
107.005 428.597 li
0 0 0 1 cmyk
f
109.994 429.095 mo
109.994 427.445 108.656 426.106 107.005 426.106 cv
105.354 426.106 104.016 427.445 104.016 429.095 cv
104.016 430.746 105.354 432.084 107.005 432.084 cv
108.656 432.084 109.994 430.746 109.994 429.095 cv
cp
@
159.092 429.095 mo
159.092 427.445 157.754 426.106 156.103 426.106 cv
154.453 426.106 153.114 427.445 153.114 429.095 cv
153.114 430.746 154.453 432.084 156.103 432.084 cv
157.754 432.084 159.092 430.746 159.092 429.095 cv
cp
@
294.431 438.062 mo
294.431 437.065 li
311.368 437.065 li
311.368 421.125 li
295.428 421.125 li
295.428 438.062 li
294.431 438.062 li
294.431 437.065 li
294.431 438.062 li
293.435 438.062 li
293.435 419.133 li
313.361 419.133 li
313.361 439.058 li
293.435 439.058 li
293.435 438.062 li
294.431 438.062 li
f
303.021 428.769 mo
499.414 201.995 li
500.168 202.647 li
303.775 429.421 li
303.021 428.769 li
1 1 0 0 cmyk
f
297.42 435.073 mo
297.42 434.077 li
308.379 434.077 li
308.379 424.114 li
298.417 424.114 li
298.417 435.073 li
297.42 435.073 li
297.42 434.077 li
297.42 435.073 li
296.424 435.073 li
296.424 422.121 li
310.372 422.121 li
310.372 436.069 li
296.424 436.069 li
296.424 435.073 li
297.42 435.073 li
f
459.659 259.014 mo
458.663 259.014 li
458.662 256.81 457.772 254.824 456.328 253.379 cv
454.883 251.935 452.897 251.045 450.693 251.044 cv
448.489 251.045 446.502 251.935 445.057 253.379 cv
443.613 254.824 442.723 256.81 442.723 259.014 cv
442.723 261.219 443.613 263.205 445.057 264.65 cv
446.502 266.094 448.489 266.984 450.693 266.985 cv
452.897 266.984 454.883 266.094 456.328 264.65 cv
457.772 263.205 458.662 261.219 458.663 259.014 cv
459.659 259.014 li
460.655 259.014 li
460.655 264.517 456.195 268.977 450.693 268.977 cv
445.19 268.977 440.731 264.517 440.73 259.014 cv
440.731 253.512 445.19 249.052 450.693 249.052 cv
456.195 249.052 460.655 253.512 460.655 259.014 cv
459.659 259.014 li
f
502.78 202.321 mo
502.78 200.67 501.442 199.332 499.791 199.332 cv
498.14 199.332 496.802 200.67 496.802 202.321 cv
496.802 203.971 498.14 205.31 499.791 205.31 cv
501.442 205.31 502.78 203.971 502.78 202.321 cv
cp
@
499.293 428.597 mo
497.932 428.597 li
497.871 428.562 li
497.963 428.232 498.137 427.937 498.37 427.7 cv
499.293 428.232 li
499.293 428.597 li
496.117 427.549 mo
495.248 427.048 li
495.386 426.743 495.553 426.454 495.747 426.185 cv
496.616 426.687 li
496.416 426.951 496.247 427.24 496.117 427.549 cv
493.516 426.048 mo
451.191 401.611 li
451.191 400.461 li
494.015 425.185 li
493.83 425.46 493.662 425.748 493.516 426.048 cv
1 /0 /CSD get_res sepcs
0 sep
f
495.248 427.048 mo
493.516 426.048 li
493.662 425.748 493.83 425.46 494.015 425.185 cv
495.747 426.185 li
495.553 426.454 495.386 426.743 495.248 427.048 cv
0 1 1 0 cmyk
f
499.791 429.095 mo
499.791 428.597 li
499.293 428.597 li
499.293 428.232 li
500.04 428.664 li
499.791 429.095 li
1 0 1 0 cmyk
f
497.871 428.562 mo
496.117 427.549 li
496.247 427.24 496.416 426.951 496.616 426.687 cv
498.37 427.7 li
498.137 427.937 497.963 428.232 497.871 428.562 cv
f
498.795 429.095 mo
497.932 428.597 li
499.293 428.597 li
499.293 428.808 li
498.795 429.095 li
1 /0 /CSD get_res sepcs
0 sep
f
499.542 429.527 mo
498.795 429.095 li
499.293 428.808 li
499.293 429.095 li
499.791 429.095 li
499.542 429.527 li
0 1 1 0 cmyk
f
499.791 429.095 mo
499.791 429.095 li
499.293 429.095 li
499.293 428.808 li
499.293 428.597 li
499.791 428.597 li
499.791 429.095 li
499.791 429.095 li
1 0 1 0 cmyk
f
450.195 401.036 mo
411.77 378.852 li
410.109 376.742 li
450.195 399.886 li
450.195 401.036 li
409.446 377.51 mo
401.594 372.977 li
402.591 372.402 li
407.785 375.4 li
409.446 377.51 li
400.598 372.402 mo
368.97 354.141 li
369.634 353.374 li
401.595 371.826 li
400.598 372.402 li
1 /0 /CSD get_res sepcs
0 sep
f
401.594 372.977 mo
401.594 372.977 li
402.591 372.402 li
402.591 372.402 li
401.594 372.977 li
f
401.594 372.977 mo
400.598 372.402 li
401.595 371.826 li
402.591 372.402 li
401.594 372.977 li
.470588 .909804 0 .0784314 cmyk
f
368.091 353.634 mo
304.759 317.069 li
303.973 315.708 li
304.078 315.526 li
368.755 352.867 li
368.091 353.634 li
1 /0 /CSD get_res sepcs
0 sep
f
303.973 315.708 mo
303.896 315.575 li
303.896 315.42 li
304.078 315.526 li
303.973 315.708 li
.941176 .109804 0 0 cmyk
f
302.717 315.89 mo
263.63 293.323 li
264.253 292.532 li
302.037 314.347 li
302.823 315.708 li
302.717 315.89 li
1 /0 /CSD get_res sepcs
0 sep
f
302.9 315.996 mo
302.717 315.89 li
302.823 315.708 li
302.9 315.841 li
302.9 315.996 li
.941176 .109804 0 0 cmyk
f
262.758 292.82 mo
206.562 260.375 li
205.7 258.881 li
205.7 258.727 li
263.381 292.029 li
262.758 292.82 li
1 /0 /CSD get_res sepcs
0 sep
f
304.759 317.069 mo
303.896 316.571 li
303.896 315.575 li
303.973 315.708 li
304.759 317.069 li
302.9 315.841 mo
302.823 315.708 li
302.037 314.347 li
302.9 314.845 li
302.9 315.841 li
0 .611765 .870588 0 cmyk
f
411.77 378.852 mo
409.446 377.51 li
407.785 375.4 li
410.109 376.742 li
411.77 378.852 li
f
263.63 293.323 mo
262.758 292.82 li
263.381 292.029 li
264.253 292.532 li
263.63 293.323 li
.941176 .109804 0 0 cmyk
f
368.97 354.141 mo
368.091 353.634 li
368.755 352.867 li
369.634 353.374 li
368.97 354.141 li
1 1 0 0 cmyk
f
204.837 259.379 mo
112.781 206.231 li
112.966 205.956 113.133 205.668 113.279 205.368 cv
204.703 258.152 li
204.703 259.014 li
205.201 259.014 li
204.77 259.263 li
204.837 259.379 li
111.049 205.231 mo
110.18 204.729 li
110.38 204.466 110.549 204.176 110.679 203.867 cv
111.548 204.368 li
111.41 204.673 111.243 204.962 111.049 205.231 cv
108.426 203.716 mo
107.503 203.184 li
107.503 202.608 li
108.001 202.321 li
108.925 202.854 li
108.833 203.184 108.659 203.479 108.426 203.716 cv
107.005 202.321 mo
107.005 202.321 li
107.005 202.321 li
107.005 202.321 li
1 /0 /CSD get_res sepcs
0 sep
f
107.503 202.608 mo
107.503 202.321 li
107.005 202.321 li
107.005 202.321 li
107.254 201.889 li
108.001 202.321 li
107.503 202.608 li
1 1 0 0 cmyk
f
112.781 206.231 mo
111.049 205.231 li
111.243 204.962 111.41 204.673 111.548 204.368 cv
113.279 205.368 li
113.133 205.668 112.966 205.956 112.781 206.231 cv
f
107.503 203.184 mo
106.756 202.752 li
107.005 202.321 li
107.005 202.321 li
107.503 202.321 li
107.503 202.608 li
107.503 203.184 li
1 0 1 0 cmyk
f
110.18 204.729 mo
108.426 203.716 li
108.659 203.479 108.833 203.184 108.925 202.854 cv
110.679 203.867 li
110.549 204.176 110.38 204.466 110.18 204.729 cv
f
302.967 429.344 mo
204.77 259.263 li
205.633 258.765 li
303.829 428.846 li
302.967 429.344 li
0 1 1 0 cmyk
f
300.409 432.084 mo
300.409 431.088 li
305.391 431.088 li
305.391 427.103 li
301.405 427.103 li
301.405 432.084 li
300.409 432.084 li
300.409 431.088 li
300.409 432.084 li
299.413 432.084 li
299.413 425.11 li
307.383 425.11 li
307.383 433.08 li
299.413 433.08 li
299.413 432.084 li
300.409 432.084 li
f
257.289 344.055 mo
257.289 342.404 255.95 341.066 254.3 341.066 cv
252.649 341.066 251.311 342.404 251.311 344.055 cv
251.311 345.706 252.649 347.044 254.3 347.044 cv
255.95 347.044 257.289 345.706 257.289 344.055 cv
cp
@
211.179 259.014 mo
211.179 255.713 208.503 253.037 205.202 253.037 cv
201.9 253.037 199.224 255.713 199.224 259.014 cv
199.224 262.316 201.9 264.992 205.202 264.992 cv
208.503 264.992 211.179 262.316 211.179 259.014 cv
cp
@
451.191 259.014 mo
451.191 429.095 li
450.195 429.095 li
450.195 259.014 li
451.191 259.014 li
1 0 1 0 cmyk
f
456.67 259.014 mo
455.674 259.014 li
455.674 257.636 455.118 256.397 454.215 255.492 cv
453.311 254.589 452.071 254.034 450.693 254.033 cv
449.314 254.034 448.075 254.589 447.17 255.492 cv
446.267 256.397 445.712 257.636 445.711 259.014 cv
445.712 260.393 446.267 261.632 447.17 262.537 cv
448.075 263.44 449.314 263.995 450.693 263.996 cv
452.071 263.995 453.311 263.44 454.215 262.537 cv
455.118 261.632 455.674 260.393 455.674 259.014 cv
456.67 259.014 li
457.667 259.014 li
457.666 262.866 454.545 265.988 450.693 265.988 cv
446.841 265.988 443.719 262.867 443.719 259.014 cv
443.719 255.162 446.841 252.041 450.693 252.041 cv
454.545 252.041 457.666 255.162 457.667 259.014 cv
456.67 259.014 li
f
444.715 307.512 mo
456.67 307.512 li
456.67 295.557 li
444.715 295.557 li
cp
@
453.682 429.095 mo
453.682 427.445 452.343 426.106 450.693 426.106 cv
449.042 426.106 447.704 427.445 447.704 429.095 cv
447.704 430.746 449.042 432.084 450.693 432.084 cv
452.343 432.084 453.682 430.746 453.682 429.095 cv
cp
@
204.703 259.014 mo
204.703 145.627 li
205.7 145.627 li
205.7 259.014 li
204.703 259.014 li
f
208.19 259.014 mo
208.19 257.364 206.852 256.026 205.202 256.026 cv
203.551 256.026 202.213 257.364 202.213 259.014 cv
202.213 260.665 203.551 262.003 205.202 262.003 cv
206.852 262.003 208.19 260.665 208.19 259.014 cv
cp
@
199.224 208.298 mo
211.179 208.298 li
211.179 196.343 li
199.224 196.343 li
cp
@
208.19 145.627 mo
207.194 145.627 li
207.192 144.527 206.302 143.637 205.202 143.635 cv
204.101 143.637 203.211 144.527 203.209 145.627 cv
203.211 146.727 204.101 147.618 205.202 147.62 cv
206.302 147.618 207.192 146.727 207.194 145.627 cv
208.19 145.627 li
209.187 145.627 li
209.186 147.829 207.403 149.612 205.202 149.612 cv
203 149.612 201.217 147.829 201.216 145.627 cv
201.217 143.426 203 141.643 205.202 141.642 cv
207.403 141.643 209.186 143.426 209.187 145.627 cv
208.19 145.627 li
f
499.111 315.526 mo
498.065 313.715 li
499.216 313.715 li
499.293 313.849 li
499.293 315.42 li
499.111 315.526 li
498.065 311.723 mo
496.915 311.723 li
496.34 310.727 li
497.49 310.727 li
498.065 311.723 li
496.34 308.734 mo
495.189 308.734 li
460.431 248.531 li
461.121 247.734 li
496.34 308.734 li
1 /0 /CSD get_res sepcs
0 sep
f
499.791 315.708 mo
499.542 315.277 li
499.293 315.42 li
499.293 313.849 li
500.222 315.459 li
499.791 315.708 li
1 0 1 0 cmyk
f
497.49 310.727 mo
496.34 310.727 li
495.189 308.734 li
496.34 308.734 li
497.49 310.727 li
f
499.36 315.957 mo
499.111 315.526 li
499.542 315.277 li
499.791 315.708 li
499.36 315.957 li
.470588 .909804 0 .0784314 cmyk
f
499.216 313.715 mo
498.065 313.715 li
496.915 311.723 li
498.065 311.723 li
499.216 313.715 li
f
459.904 247.618 mo
407.635 157.087 li
407.93 156.931 408.217 156.765 408.498 156.588 cv
460.594 246.821 li
459.904 247.618 li
406.638 155.359 mo
406.139 154.495 li
406.435 154.343 406.723 154.176 407.001 153.996 cv
407.5 154.86 li
407.221 155.039 406.934 155.206 406.638 155.359 cv
405.141 152.767 mo
401.594 146.623 li
401.777 146.308 li
402.955 146.988 li
406.004 152.268 li
405.728 152.451 405.44 152.618 405.141 152.767 cv
1 /0 /CSD get_res sepcs
0 sep
f
402.955 146.988 mo
401.777 146.308 li
402.026 145.876 li
401.595 145.627 li
401.595 145.627 li
402.026 145.378 li
402.955 146.988 li
0 1 1 0 cmyk
f
407.635 157.087 mo
406.638 155.359 li
406.934 155.206 407.221 155.039 407.5 154.86 cv
408.498 156.588 li
408.217 156.765 407.93 156.931 407.635 157.087 cv
f
401.594 146.623 mo
401.307 146.125 li
401.595 146.125 li
401.595 145.627 li
402.026 145.876 li
401.777 146.308 li
401.594 146.623 li
.941176 .109804 0 0 cmyk
f
406.139 154.495 mo
405.141 152.767 li
405.44 152.618 405.728 152.451 406.004 152.268 cv
407.001 153.996 li
406.723 154.176 406.435 154.343 406.139 154.495 cv
f
460.431 248.531 mo
459.904 247.618 li
460.594 246.821 li
461.121 247.734 li
460.431 248.531 li
1 1 0 0 cmyk
f
254.3 146.125 mo
215.152 146.125 li
215.16 145.96 215.164 145.794 215.164 145.627 cv
215.164 145.627 li
215.164 145.627 li
215.164 145.46 215.16 145.294 215.152 145.129 cv
302.9 145.129 li
254.3 145.129 li
254.3 146.125 li
213.156 146.125 mo
212.158 146.125 li
212.17 145.961 212.175 145.795 212.175 145.627 cv
212.175 145.627 li
212.175 145.627 li
212.175 145.46 212.17 145.294 212.158 145.129 cv
213.156 145.129 li
213.167 145.294 213.172 145.46 213.172 145.627 cv
214.168 145.627 li
215.164 145.627 li
215.164 145.627 li
214.168 145.627 li
213.172 145.627 li
213.172 145.795 213.167 145.961 213.156 146.125 cv
1 /0 /CSD get_res sepcs
0 sep
f
215.152 146.125 mo
213.156 146.125 li
213.167 145.961 213.172 145.795 213.172 145.627 cv
214.168 145.627 li
215.164 145.627 li
215.164 145.627 li
215.164 145.794 215.16 145.96 215.152 146.125 cv
215.164 145.627 mo
215.164 145.627 li
215.164 145.627 li
215.164 145.627 mo
214.168 145.627 li
213.172 145.627 li
213.172 145.46 213.167 145.294 213.156 145.129 cv
215.152 145.129 li
215.16 145.294 215.164 145.46 215.164 145.627 cv
1 1 0 0 cmyk
f
210.158 146.125 mo
209.156 146.125 li
209.176 145.962 209.187 145.796 209.187 145.627 cv
209.187 145.627 li
209.187 145.627 li
209.187 145.458 209.176 145.292 209.156 145.129 cv
210.158 145.129 li
210.175 145.293 210.183 145.459 210.183 145.627 cv
211.179 145.627 li
212.175 145.627 li
212.175 145.627 li
211.179 145.627 li
210.183 145.627 li
210.183 145.795 210.175 145.962 210.158 146.125 cv
207.131 146.125 mo
206.064 146.125 li
205.882 145.81 li
207.06 145.129 li
207.131 145.129 li
207.172 145.288 207.194 145.455 207.194 145.627 cv
208.19 145.627 li
209.187 145.627 li
209.187 145.627 li
208.19 145.627 li
207.194 145.627 li
207.194 145.799 207.172 145.966 207.131 146.125 cv
1 /0 /CSD get_res sepcs
0 sep
f
205.882 145.81 mo
205.633 145.378 li
205.202 145.627 li
205.202 145.129 li
207.06 145.129 li
205.882 145.81 li
1 1 0 0 cmyk
f
206.064 146.125 mo
205.7 146.125 li
205.7 145.627 li
205.202 145.627 li
205.202 145.627 li
205.633 145.378 li
205.882 145.81 li
206.064 146.125 li
0 .611765 .870588 0 cmyk
f
212.158 146.125 mo
210.158 146.125 li
210.175 145.962 210.183 145.795 210.183 145.627 cv
211.179 145.627 li
212.175 145.627 li
212.175 145.627 li
212.175 145.795 212.17 145.961 212.158 146.125 cv
212.175 145.627 mo
212.175 145.627 li
212.175 145.627 li
212.175 145.627 mo
211.179 145.627 li
210.183 145.627 li
210.183 145.459 210.175 145.293 210.158 145.129 cv
212.158 145.129 li
212.17 145.294 212.175 145.46 212.175 145.627 cv
f
205.7 146.125 mo
205.202 146.125 li
205.202 145.627 li
205.7 145.627 li
205.7 146.125 li
1 0 1 0 cmyk
f
209.156 146.125 mo
207.131 146.125 li
207.172 145.966 207.194 145.799 207.194 145.627 cv
208.19 145.627 li
209.187 145.627 li
209.187 145.627 li
209.187 145.796 209.176 145.962 209.156 146.125 cv
209.187 145.627 mo
209.187 145.627 li
209.187 145.627 li
209.187 145.627 mo
208.19 145.627 li
207.194 145.627 li
207.194 145.455 207.172 145.288 207.131 145.129 cv
209.156 145.129 li
209.176 145.292 209.187 145.458 209.187 145.627 cv
f
.99628 lw
450.693 301.535 mo
475.242 273.188 li
.47 .91 0 .08 cmyk
@
1.99255 lw
447.704 304.523 mo
453.682 304.523 li
453.682 298.546 li
447.704 298.546 li
cp
@
465.956 287.361 mo
465.956 285.711 464.618 284.372 462.967 284.372 cv
461.317 284.372 459.978 285.711 459.978 287.361 cv
459.978 289.012 461.317 290.35 462.967 290.35 cv
464.618 290.35 465.956 289.012 465.956 287.361 cv
cp
@
481.22 273.188 mo
481.22 269.886 478.543 267.21 475.242 267.21 cv
471.94 267.21 469.264 269.886 469.264 273.188 cv
469.264 276.489 471.94 279.165 475.242 279.165 cv
478.543 279.165 481.22 276.489 481.22 273.188 cv
cp
@
.99628 lw
205.202 202.321 mo
254.3 145.627 li
@
1.99255 lw
202.213 205.31 mo
208.19 205.31 li
208.19 199.332 li
202.213 199.332 li
cp
@
232.739 173.974 mo
232.739 172.323 231.401 170.985 229.751 170.985 cv
228.1 170.985 226.762 172.323 226.762 173.974 cv
226.762 175.625 228.1 176.963 229.751 176.963 cv
231.401 176.963 232.739 175.625 232.739 173.974 cv
cp
@
260.277 145.627 mo
260.277 142.326 257.601 139.65 254.3 139.65 cv
250.998 139.65 248.322 142.326 248.322 145.627 cv
248.322 148.929 250.998 151.605 254.3 151.605 cv
257.601 151.605 260.277 148.929 260.277 145.627 cv
cp
@
.99628 lw
475.242 273.188 mo
401.594 145.627 li
0 .61 .87 0 cmyk
@
1.99255 lw
478.231 273.188 mo
478.231 271.537 476.893 270.199 475.242 270.199 cv
473.591 270.199 472.253 271.537 472.253 273.188 cv
472.253 274.839 473.591 276.177 475.242 276.177 cv
476.893 276.177 478.231 274.839 478.231 273.188 cv
cp
@
432.441 215.385 mo
444.396 215.385 li
444.396 203.43 li
432.441 203.43 li
cp
@
407.572 145.627 mo
407.572 142.326 404.896 139.65 401.594 139.65 cv
398.293 139.65 395.617 142.326 395.617 145.627 cv
395.617 148.929 398.293 151.605 401.594 151.605 cv
404.896 151.605 407.572 148.929 407.572 145.627 cv
cp
@
254.3 145.129 mo
401.595 145.129 li
401.595 146.125 li
254.3 146.125 li
254.3 145.129 li
1 1 0 0 cmyk
f
257.289 145.627 mo
257.289 143.977 255.95 142.638 254.3 142.638 cv
252.649 142.638 251.311 143.977 251.311 145.627 cv
251.311 147.278 252.649 148.616 254.3 148.616 cv
255.95 148.616 257.289 147.278 257.289 145.627 cv
cp
@
321.969 151.605 mo
333.925 151.605 li
333.925 139.65 li
321.969 139.65 li
cp
@
404.583 145.627 mo
404.583 143.977 403.245 142.638 401.594 142.638 cv
399.944 142.638 398.606 143.977 398.606 145.627 cv
398.606 147.278 399.944 148.616 401.594 148.616 cv
403.245 148.616 404.583 147.278 404.583 145.627 cv
cp
@
303.398 542.482 mo
303.398 542.482 li
303.398 542.482 li
303.398 542.482 li
303.398 541.907 mo
302.9 541.62 li
302.9 540.49 li
303.896 540.49 li
303.896 541.62 li
303.398 541.907 li
303.896 538.497 mo
302.9 538.497 li
302.9 537.501 li
303.896 537.501 li
303.896 538.497 li
303.896 535.509 mo
302.9 535.509 li
302.9 439.058 li
303.896 439.058 li
303.896 535.509 li
1 /0 /CSD get_res sepcs
0 sep
f
303.896 542.482 mo
303.398 542.482 li
303.398 542.482 li
303.647 542.051 li
303.398 541.907 li
303.896 541.62 li
303.896 542.482 li
0 1 1 0 cmyk
f
303.896 537.501 mo
302.9 537.501 li
302.9 535.509 li
303.896 535.509 li
303.896 537.501 li
f
303.398 542.482 mo
302.9 542.482 li
302.9 541.62 li
303.398 541.907 li
303.647 542.051 li
303.398 542.482 li
303.398 542.482 li
1 1 0 0 cmyk
f
303.896 540.49 mo
302.9 540.49 li
302.9 538.497 li
303.896 538.497 li
303.896 540.49 li
f
303.896 437.065 mo
302.9 437.065 li
302.9 436.069 li
303.896 436.069 li
303.896 437.065 li
303.896 434.077 mo
302.9 434.077 li
302.9 433.08 li
303.896 433.08 li
303.896 434.077 li
303.896 431.088 mo
302.9 431.088 li
302.9 429.958 li
303.398 429.671 li
303.896 429.958 li
303.896 431.088 li
1 /0 /CSD get_res sepcs
0 sep
f
303.896 429.958 mo
303.398 429.671 li
303.532 429.593 li
303.896 429.593 li
303.896 429.958 li
f
302.9 429.958 mo
302.9 429.593 li
303.264 429.593 li
303.398 429.671 li
302.9 429.958 li
f
303.398 429.671 mo
303.264 429.593 li
303.398 429.593 li
303.532 429.593 li
303.398 429.671 li
f
303.479 428.24 mo
302.9 427.236 li
302.9 427.103 li
303.896 427.103 li
303.896 427.759 li
303.479 428.24 li
303.896 425.11 mo
302.9 425.11 li
302.9 424.114 li
303.896 424.114 li
303.896 425.11 li
303.896 422.121 mo
302.9 422.121 li
302.9 421.125 li
303.896 421.125 li
303.896 422.121 li
303.896 419.133 mo
302.9 419.133 li
302.9 317.567 li
303.398 316.704 li
303.896 317.567 li
303.896 419.133 li
f
302.9 317.567 mo
302.9 315.996 li
303.033 316.073 li
303.398 316.704 li
302.9 317.567 li
.941176 .109804 0 0 cmyk
f
303.398 314.712 mo
302.9 313.849 li
302.9 146.125 li
303.896 146.125 li
303.896 201.979 li
303.577 201.856 li
303.219 202.786 li
303.896 203.046 li
303.896 313.849 li
303.398 314.712 li
1 /0 /CSD get_res sepcs
0 sep
f
303.896 315.42 mo
303.763 315.343 li
303.398 314.712 li
303.896 313.849 li
303.896 315.42 li
.941176 .109804 0 0 cmyk
f
303.896 317.567 mo
303.398 316.704 li
303.033 316.073 li
303.896 316.571 li
303.896 317.567 li
303.763 315.343 mo
302.9 314.845 li
302.9 313.849 li
303.398 314.712 li
303.763 315.343 li
0 .611765 .870588 0 cmyk
f
303.896 429.593 mo
303.532 429.593 li
303.896 429.383 li
303.896 429.593 li
1 /0 /CSD get_res sepcs
0 sep
f
303.532 429.593 mo
303.398 429.593 li
303.398 429.095 li
303.398 429.095 li
303.775 429.421 li
303.896 429.281 li
303.896 429.383 li
303.532 429.593 li
f
303.398 429.593 mo
303.264 429.593 li
302.9 429.593 li
302.9 429.229 li
302.967 429.344 li
303.398 429.095 li
303.398 429.593 li
0 0 0 1 cmyk
f
303.896 439.058 mo
302.9 439.058 li
302.9 437.065 li
303.896 437.065 li
303.896 439.058 li
303.896 421.125 mo
302.9 421.125 li
302.9 419.133 li
303.896 419.133 li
303.896 421.125 li
f
303.775 429.421 mo
303.398 429.095 li
303.829 428.846 li
303.479 428.24 li
303.896 427.759 li
303.896 429.281 li
303.775 429.421 li
1 1 0 0 cmyk
f
303.896 436.069 mo
302.9 436.069 li
302.9 434.077 li
303.896 434.077 li
303.896 436.069 li
303.896 424.114 mo
302.9 424.114 li
302.9 422.121 li
303.896 422.121 li
303.896 424.114 li
f
303.033 316.073 mo
302.9 315.996 li
302.9 315.841 li
303.033 316.073 li
303.896 315.575 mo
303.763 315.343 li
303.896 315.42 li
303.896 315.575 li
.941176 .109804 0 0 cmyk
f
303.896 316.571 mo
303.033 316.073 li
302.9 315.841 li
302.9 314.845 li
303.763 315.343 li
303.896 315.575 li
303.896 316.571 li
0 .611765 .870588 0 cmyk
f
302.967 429.344 mo
302.9 429.229 li
302.9 427.236 li
303.479 428.24 li
303.829 428.846 li
303.398 429.095 li
303.398 429.095 li
302.967 429.344 li
0 1 1 0 cmyk
f
303.896 433.08 mo
302.9 433.08 li
302.9 431.088 li
303.896 431.088 li
303.896 433.08 li
303.896 427.103 mo
302.9 427.103 li
302.9 425.11 li
303.896 425.11 li
303.896 427.103 li
f
303.896 145.129 mo
302.9 145.129 li
302.9 95.9075 li
303.896 95.9075 li
303.896 145.129 li
303.896 93.915 mo
302.9 93.915 li
302.9 92.9187 li
303.896 92.9187 li
303.896 93.915 li
303.896 90.9261 mo
302.9 90.9261 li
302.9 89.7964 li
303.398 89.5087 li
303.896 89.7963 li
303.896 90.9261 li
303.398 88.9335 mo
303.398 88.9335 li
303.398 88.9335 li
303.398 88.9335 li
1 /0 /CSD get_res sepcs
0 sep
f
303.896 89.7963 mo
303.398 89.5087 li
303.647 89.3649 li
303.398 88.9335 li
303.398 88.9335 li
303.896 88.9335 li
303.896 89.7963 li
0 1 1 0 cmyk
f
303.896 95.9075 mo
302.9 95.9075 li
302.9 93.915 li
303.896 93.915 li
303.896 95.9075 li
f
302.9 89.7964 mo
302.9 88.9335 li
303.398 88.9335 li
303.398 88.9335 li
303.647 89.3649 li
303.398 89.5087 li
302.9 89.7964 li
1 1 0 0 cmyk
f
303.896 92.9187 mo
302.9 92.9187 li
302.9 90.9261 li
303.896 90.9261 li
303.896 92.9187 li
f
303.896 146.125 mo
302.9 146.125 li
302.9 145.129 li
303.896 145.129 li
303.896 146.125 li
f
449.852 259.225 mo
445.887 257.698 li
445.975 257.374 446.096 257.063 446.245 256.769 cv
450.545 258.424 li
449.852 259.225 li
444.02 256.98 mo
443.088 256.621 li
443.188 256.302 443.308 255.992 443.446 255.691 cv
444.378 256.05 li
444.238 256.349 444.118 256.66 444.02 256.98 cv
441.225 255.904 mo
357.178 223.555 li
357.682 222.681 li
441.583 254.974 li
441.449 255.277 441.329 255.587 441.225 255.904 cv
356.237 223.192 mo
303.896 203.046 li
303.896 201.979 li
356.741 222.319 li
356.237 223.192 li
1 /0 /CSD get_res sepcs
0 sep
f
357.178 223.555 mo
356.237 223.192 li
356.741 222.319 li
357.682 222.681 li
357.178 223.555 li
.941176 .109804 0 0 cmyk
f
450.195 259.356 mo
449.852 259.225 li
450.545 258.424 li
450.872 258.55 li
450.693 259.014 li
450.195 259.014 li
450.195 259.356 li
1 1 0 0 cmyk
f
443.088 256.621 mo
441.225 255.904 li
441.329 255.587 441.449 255.277 441.583 254.974 cv
443.446 255.691 li
443.308 255.992 443.188 256.302 443.088 256.621 cv
f
450.514 259.479 mo
450.195 259.356 li
450.195 259.014 li
450.693 259.014 li
450.514 259.479 li
1 0 1 0 cmyk
f
445.887 257.698 mo
444.02 256.98 li
444.118 256.66 444.238 256.349 444.378 256.05 cv
446.245 256.769 li
446.096 257.063 445.975 257.374 445.887 257.698 cv
f
303.896 203.046 mo
303.219 202.786 li
303.577 201.856 li
303.896 201.979 li
303.896 203.046 li
1 /0 /CSD get_res sepcs
0 sep
f
.99628 lw
438.418 209.408 mo
413.869 244.841 li
.94 .11 0 0 cmyk
@
1.99255 lw
435.429 212.396 mo
441.407 212.396 li
441.407 206.419 li
435.429 206.419 li
cp
@
429.132 227.124 mo
429.132 225.474 427.794 224.135 426.144 224.135 cv
424.493 224.135 423.155 225.474 423.155 227.124 cv
423.155 228.775 424.493 230.113 426.144 230.113 cv
427.794 230.113 429.132 228.775 429.132 227.124 cv
cp
@
419.847 244.841 mo
419.847 241.54 417.17 238.863 413.869 238.863 cv
410.568 238.863 407.891 241.54 407.891 244.841 cv
407.891 248.142 410.568 250.819 413.869 250.819 cv
417.17 250.819 419.847 248.142 419.847 244.841 cv
cp
@
.99628 lw
327.947 145.627 mo
303.398 202.321 li
0 1 1 0 cmyk
@
1.99255 lw
324.958 148.616 mo
330.936 148.616 li
330.936 142.638 li
324.958 142.638 li
cp
@
318.661 173.974 mo
318.661 172.323 317.323 170.985 315.673 170.985 cv
314.022 170.985 312.684 172.323 312.684 173.974 cv
312.684 175.625 314.022 176.963 315.673 176.963 cv
317.323 176.963 318.661 175.625 318.661 173.974 cv
cp
@
309.376 202.321 mo
309.376 199.019 306.699 196.343 303.398 196.343 cv
300.097 196.343 297.42 199.019 297.42 202.321 cv
297.42 205.622 300.097 208.298 303.398 208.298 cv
306.699 208.298 309.376 205.622 309.376 202.321 cv
cp
@
.99628 lw
[.99628 1.99255 ] 0 dsh
303.398 202.321 mo
450.693 259.014 li
/1 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
@
1.99255 lw
306.387 202.321 mo
306.387 200.67 305.049 199.332 303.398 199.332 cv
301.747 199.332 300.409 200.67 300.409 202.321 cv
300.409 203.971 301.747 205.31 303.398 205.31 cv
305.049 205.31 306.387 203.971 306.387 202.321 cv
cp
@
416.858 244.841 mo
416.858 243.19 415.52 241.852 413.869 241.852 cv
412.218 241.852 410.88 243.19 410.88 244.841 cv
410.88 246.492 412.218 247.83 413.869 247.83 cv
415.52 247.83 416.858 246.492 416.858 244.841 cv
cp
@
453.682 259.014 mo
453.682 257.364 452.343 256.026 450.693 256.026 cv
449.042 256.026 447.704 257.364 447.704 259.014 cv
447.704 260.665 449.042 262.003 450.693 262.003 cv
452.343 262.003 453.682 260.665 453.682 259.014 cv
cp
@
%ADOBeginSubsetFont: JUHBAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JUHBAA+CMR8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 91 /bracketleft put
dup 93 /bracketright put
def
/UniqueID 5000791 def
/FontBBox {-36 -250 1070 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/zero <1C60D8A8C9B7883CBAA78CA806F705F10D1AC319938D611C6D9BBD69F
6190342FB8FEE9368658E53BCE0AE7824A3280DBA7A5BEF9C087CCC08CFF6EE3
D1CDFAC58984B448A56F36AF08290137970E991F67C347622795CF41E8928BFB
8E257576760A149EDA95EF674E027B6AB519EF80CF7C75785FE2FE5A8F75A351
8927237EA043AA5EE9A8092D5C4A8721DCA0DF83E6E87BB> |-
/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE5298
51B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3
286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E65
2D787177BE307207126057745DD2D6A7D78294> |-
/bracketleft <1C60D8A8C9B845C8785B9650495E2F5038DA7DAE355CE1D80B
07378B51EA4E30070175FD31B57615AB6DFE4C> |-
/bracketright <1C60D8A8C9B845C8785B9650495E2F5038DA7DAE35C172423
FF921ACF4F0428CAD291D8CE1CC61A972A9DF41> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZDT+CMR8 /JUHBAA+CMR8 findfont ct_VMDictPut
/ODKZDT+CMR8*1 
[48{/.notdef}rp /zero /one 41{/.notdef}rp /bracketleft /.notdef /bracketright 162{/.notdef}rp]
ODKZDT+CMR8 nf
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
291.872 77.978 mo
([100])
[2.35202 7.05588 7.05591 4.2345 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
410.643 128.693 mo
([010])
[2.35202 7.05588 7.05591 4.2345 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
511.744 193.006 mo
([001])
[2.35199 7.05591 7.05591 4.23444 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
174.826 131.682 mo
([011])
[2.35202 7.05589 7.05589 4.23448 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
74.988 194.732 mo
([01)
[2.35201 7.0559 0 ]xsh
%ADOBeginSubsetFont: ANWAAA+CMEX8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ANWAAA+CMEX8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMEX8.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /tildewide put
def
/UniqueID 5092764 def
/FontBBox {-27 -2955 1546 771} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/BlueScale 0.04796 def
/StdHW [46] def
/StdVW [77] def
/StemSnapH [46 77] def
/StemSnapV [77 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/tildewide <1C60D8A8C9B7CDD8CD29197EDC20DA2FA12D426B49813EA8E331
4305B6D34845B754153D660C192775A8F3554AD32C2F73983466BE186F0A74A9
AF44E0FF5D9C875ED37A1CA4884D7C7E5D27FF04BB83EF469AD8E26B79AF5663
5330F50023B5FD> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZDU+CMEX8 /ANWAAA+CMEX8 findfont ct_VMDictPut
/ODKZDU+CMEX8*1 
[101{/.notdef}rp /tildewide 154{/.notdef}rp]
ODKZDU+CMEX8 nf
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
91.219 193.027 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
91.455 194.732 mo
(1])
[4.23448 0 ]xsh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDT+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A563
37D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86
BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1D
CB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7
F5FA2E61175441FDD6> |-
/three <1C60D8A8C9B7883CBAA92B92A60ED97CC7706D34A36348BC2B93805C
7C1833580FAA27E95855649C4EE0492E1681D62AEDB7EC0D4D44FE91FF7AD466
5FD8D6994E56FB00B47353D8538086D2C46021ADFB3F80264F6C2EF23799D21E
81ACDE63FE62C97F7BE27D7DCE3B9BAF5B096FE9F9E10574C4FE3C149B03DD0A
59DE10D784DCCBFDFC6D3C5399775DC28DB91A04691B5B8F3D1C009DFAB49BB8
18D90EA7C1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDT+CMR8 /Encoding get
dup 50 /two put
dup 51 /three put
pop
%ADOEndSubsetFont
/ODKZDT+CMR8*1 
[48{/.notdef}rp /zero /one /two /three 39{/.notdef}rp /bracketleft /.notdef 
/bracketright 162{/.notdef}rp]
ODKZDT+CMR8 nf
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
291.872 557.424 mo
([321])
[2.35202 7.05588 7.05591 4.2345 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
508.755 442.153 mo
([2)
[2.35202 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
517.929 440.448 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
518.164 442.153 mo
(30])
[7.05591 4.2345 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
72 443.878 mo
([1)
[2.35201 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
81.174 442.174 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
81.409 443.878 mo
(1)sh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
88.231 442.174 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
88.466 443.878 mo
(1])
[4.23448 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
74.988 317.701 mo
([211])
[2.35201 7.0559 7.05589 4.23448 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
508.755 317.701 mo
([320])
[2.35202 7.05588 7.05591 4.2345 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
242.774 417.175 mo
([10)
[2.35202 7.05589 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
259.005 415.47 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
259.24 417.175 mo
(2])
[4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
340.969 417.175 mo
([2)
[2.35202 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
350.143 415.47 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
350.379 417.175 mo
(33])
[7.05591 4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
336.913 275.181 mo
([201])
[2.35202 7.05588 7.05591 4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
246.83 275.923 mo
([31)
[2.35202 7.05588 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
263.061 274.218 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
263.296 275.923 mo
(1])
[4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
418.672 431.828 mo
([11)
[2.35202 7.05588 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
434.903 430.123 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
435.138 431.828 mo
(2])
[4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
144.579 445.521 mo
([1)
[2.35202 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
153.753 443.816 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
153.988 445.521 mo
(12])
[7.05589 4.23448 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
291.872 447.027 mo
([110])
[2.35202 7.05588 7.05591 4.2345 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
415.683 261.749 mo
([1)
[2.35202 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
424.857 260.045 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
425.092 261.749 mo
(10])
[7.05591 4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
173.184 261.749 mo
([1)
[2.35202 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
182.358 260.045 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
182.593 261.749 mo
(11])
[7.05589 4.23448 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
418.672 303.527 mo
([111])
[2.35202 7.05588 7.05591 4.2345 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
173.184 205.056 mo
([21)
[2.35202 7.05589 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
189.415 203.352 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
189.65 205.056 mo
(1])
[4.23448 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
476.654 262.229 mo
([10)
[2.35202 7.05588 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
492.885 260.525 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
493.12 262.229 mo
(1])
[4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
242.774 134.67 mo
([102])
[2.35202 7.05589 7.05589 4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
447.383 211.401 mo
([101])
[2.35202 7.05588 7.05591 4.2345 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
316.421 134.67 mo
([20)
[2.35202 7.05588 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
332.652 132.966 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
332.887 134.67 mo
(1])
[4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
381.849 253.996 mo
([11)
[2.35202 7.05588 0 ]xsh
ODKZDU+CMEX8*1 [7.9701 0 0 -7.9701 0 0 ]msf
398.08 252.292 mo
(e)sh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
398.315 253.996 mo
(1])
[4.23447 0 ]xsh
ODKZDT+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
271.379 204.315 mo
([112])
[2.35202 7.05588 7.05591 4.23447 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/ODKZDU+CMEX8*1 uf
/ODKZDU+CMEX8 uf
/ANWAAA+CMEX8 uf
/ODKZDT+CMR8*1 uf
/ODKZDT+CMR8 uf
/JUHBAA+CMR8 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 0 4413 a FA(FIG.)29 b(2.)40 b(\(Color)29
b(online\))g(Greec)m(hie)g(orthogonalit)m(y)i(diagram)d(with)g(an)g(o)m
(v)m(erlaid)i(v)-5 b(alue)29 b(assignmen)m(t)f(that)h(can)0
4594 y(b)s(e)j(used)g(to)i(visualise)g(T)-8 b(able)33
b(I.)49 b(The)32 b(circles)i(and)e(squares)h(represen)m(t)g(observ)-5
b(ables)33 b(that)h(will)f(b)s(e)f(giv)m(en)i(the)0 4774
y(v)-5 b(alues)37 b(0)h(and)e(1)i(resp)s(ectiv)m(ely)-8
b(.)63 b(They)36 b(are)i(joined)f(b)m(y)g(smo)s(oth)g(lines)g(whic)m(h)
g(corresp)s(ond)f(to)i(con)m(texts,)i(i.e.)0 4955 y(complete)32
b(sets)f(of)f(compatible)i(observ)-5 b(ables.)p 0 TeXcolorgray
0 TeXcolorgray 1845 5774 a Fy(11)p 0 TeXcolorgray eop
end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 94 a Fn(z)39 b Fy(=)194 8 y Fl(p)p 294
8 478 4 v 86 x Fy(1)22 b Fo(\000)g Fn(x)519 66 y Fm(2)581
94 y Fo(\000)h Fn(y)733 66 y Fm(2)806 94 y Fo(2)35 b
Fq(R)p Fy(.)55 b(This)37 b(c)m(hoice)h(of)e Fn(z)41 b
Fy(mak)m(es)d Fo(j)p Fn(c)p Fo(i)c(\021)h Fy(\()p Fn(x;)17
b(y)t(;)g(z)t Fy(\))36 b(a)g(unit)h(v)m(ector)h(in)e
Fq(R)3471 58 y Fm(3)3511 94 y Fy(.)55 b(T)-8 b(aking)0
269 y(cross)34 b(pro)s(ducts,)f(w)m(e)h(de\014ne)743
561 y Fo(j)p Fn(\013)q Fo(i)27 b Fy(=)h Fo(j)o Fn(a)p
Fo(i)22 b(\002)h(j)p Fn(c)p Fo(i)k(\021)h Fy(\(1)p Fn(;)17
b Fy(0)p Fn(;)g Fy(0\))k Fo(\002)i Fy(\()p Fn(x;)17 b(y)t(;)g(z)t
Fy(\))27 b(=)g(\(0)p Fn(;)17 b Fo(\000)p Fn(z)t(;)g(y)t
Fy(\))p Fn(;)745 761 y Fo(j)p Fn(\014)6 b Fo(i)27 b Fy(=)h
Fo(j)o Fn(b)p Fo(i)23 b(\002)f(j)p Fn(c)p Fo(i)27 b(\021)h
Fy(\()p Fn(p;)17 b(q)t(;)g Fy(0\))k Fo(\002)i Fy(\()p
Fn(x;)17 b(y)t(;)g(z)t Fy(\))27 b(=)h(\()p Fn(q)t(z)t(;)17
b Fo(\000)p Fn(pz)t(;)g(py)26 b Fo(\000)d Fn(q)t(x)p
Fy(\))p Fn(;)0 1053 y Fy(so)29 b(that)g Fo(h)p Fn(\013)q
Fo(j)p Fn(\014)6 b Fo(i)26 b Fy(=)i(\(0)p Fn(;)17 b Fo(\000)p
Fn(z)t(;)g(y)t Fy(\))e Fo(\001)g Fy(\()p Fn(q)t(z)t(;)i
Fo(\000)p Fn(pz)t(;)g(py)h Fo(\000)d Fn(q)t(x)p Fy(\))28
b(=)g Fn(pz)2107 1017 y Fm(2)2162 1053 y Fy(+)15 b Fn(py)2354
1017 y Fm(2)2407 1053 y Fo(\000)g Fn(q)t(xy)32 b Fy(=)c
Fn(p)p Fy(\()p Fn(z)2921 1017 y Fm(2)2976 1053 y Fy(+)15
b Fn(y)3119 1017 y Fm(2)3157 1053 y Fy(\))g Fo(\000)g
Fn(p)p Fy(\(1)g Fo(\000)g Fn(x)3600 1017 y Fm(2)3640
1053 y Fy(\))28 b(=)g(0)p Fn(:)0 1228 y Fy(Therefore)46
b Fo(fj)o Fn(\013)q Fo(i)16 b Fn(;)h Fo(j)p Fn(\014)6
b Fo(i)16 b Fn(;)h Fo(j)o Fn(c)p Fo(ig)44 b Fy(is)i(an)e(orthogonal)g
(basis)i(for)e Fq(C)2326 1192 y Fm(3)2366 1228 y Fy(.)80
b(This)46 b(implies)g(that)e(the)i(pro)5 b(jection)0
1402 y(observ)-5 b(ables)35 b Fn(P)577 1417 y Fp(\013)627
1402 y Fy(,)f Fn(P)751 1417 y Fp(\014)832 1402 y Fy(and)g
Fn(P)1086 1417 y Fp(c)1154 1402 y Fy(asso)s(ciated)h(with)f(the)g
(subspaces)j(of)c Fq(C)2644 1366 y Fm(3)2717 1402 y Fy(spanned)i(b)m(y)
g Fo(j)p Fn(\013)q Fo(i)o Fy(,)f Fo(j)p Fn(\014)6 b Fo(i)33
b Fy(and)h Fo(j)p Fn(c)p Fo(i)0 1577 y Fy(are)28 b(m)m(utually)i
(compatible,)g(that)e(is,)i Fn(C)1487 1592 y Fm(25)1589
1577 y Fy(=)e Fo(f)p Fn(P)1806 1592 y Fp(\013)1855 1577
y Fn(;)17 b(P)1962 1592 y Fp(\014)2009 1577 y Fn(;)g(P)2116
1592 y Fp(c)2150 1577 y Fo(g)28 b Fy(is)h(a)f(con)m(text.)44
b(Moreo)m(v)m(er,)30 b Fn(\013)f Fy(is)g(compatible)0
1751 y(with)k Fn(a)g Fy(b)s(ecause)i Fo(h)p Fn(\013)q
Fo(j)p Fn(a)p Fo(i)27 b Fy(=)h(0.)44 b(Lik)m(ewise,)36
b Fn(\014)i Fy(is)33 b(compatible)h(with)g Fn(b)p Fy(.)44
b(Hence)35 b(there)e(exist)h(con)m(texts)h Fn(C)3811
1766 y Fm(26)0 1925 y Fy(and)e Fn(C)260 1940 y Fm(27)367
1925 y Fy(suc)m(h)h(that)e Fn(P)861 1940 y Fp(\013)910
1925 y Fn(;)17 b(P)1017 1940 y Fp(a)1086 1925 y Fo(2)28
b Fn(C)1250 1940 y Fm(27)1357 1925 y Fy(and)33 b Fn(P)1610
1940 y Fp(\014)1657 1925 y Fn(;)17 b(P)1764 1940 y Fp(b)1826
1925 y Fo(2)28 b Fn(C)1990 1940 y Fm(27)2064 1925 y Fy(.)0
2149 y(De\014ne)34 b(unit)g(v)m(ectors)h Fo(j)p Fn( )t
Fo(i)28 b(\021)i Fy(\(0)p Fn(;)17 b Fy(2)p Fn(y)25 b
Fo(\000)e Fn(z)t(;)17 b(y)27 b Fy(+)22 b(2)p Fn(z)t Fy(\))1876
2055 y Fx(p)p 1936 2055 71 3 v 1936 2110 a Fm(14)p 1876
2126 130 4 v 1924 2184 a(5)2050 2149 y Fy(and)33 b Fo(j)p
Fn(\036)p Fo(i)c(\021)g Fy(\(0)p Fn(;)17 b(y)26 b Fy(+)c(2)p
Fn(z)t(;)17 b(z)28 b Fo(\000)23 b Fy(2)p Fn(y)t Fy(\))3267
2055 y Fx(p)p 3325 2055 71 3 v 3325 2110 a Fm(14)p 3267
2126 130 4 v 3313 2184 a(5)3405 2140 y Fy(.)3466 2149
y(Then)34 b(it)g(is)0 2324 y(easily)g(c)m(hec)m(k)m(ed)h(that)e
Fo(fj)o Fn(a)p Fo(i)17 b Fn(;)g Fo(j)o Fn( )t Fo(i)g
Fn(;)g Fo(j)o Fn(\036)p Fo(i)o(g)33 b Fy(is)g(an)f(orthonormal)h(basis)
g(for)f Fq(C)2718 2288 y Fm(3)2758 2324 y Fy(.)43 b(Note)33
b(that)42 2617 y(\()p Fo(j)o Fn(a)p Fo(i)17 b Fy(3)22
b(+)g Fo(j)p Fn( )t Fo(i)16 b Fy(2)22 b(+)g Fo(j)o Fn(\036)p
Fo(i)p Fy(\))921 2577 y Fm(1)p 874 2594 V 874 2604 a
Fx(p)p 933 2604 71 3 v 55 x Fm(14)1041 2617 y Fo(\021)28
b Fy(\()1241 2577 y Fm(3)p 1194 2594 130 4 v 1194 2604
a Fx(p)p 1253 2604 71 3 v 55 x Fm(14)1333 2598 y Fy(,)1360
2617 y(\(4)p Fn(y)d Fo(\000)e Fy(2)p Fn(z)k Fy(+)22 b
Fn(y)j Fy(+)d(2)p Fn(z)t Fy(\))2156 2577 y Fm(1)p 2156
2594 36 4 v 2156 2651 a(5)2202 2598 y Fy(,)2229 2617
y(\(2)p Fn(y)j Fy(+)d(4)p Fn(z)k Fy(+)c Fn(z)27 b Fo(\000)c
Fy(2)p Fn(y)t Fy(\))3026 2577 y Fm(1)p 3026 2594 V 3026
2651 a(5)3070 2617 y Fy(\))28 b(=)f(\()p Fn(x;)17 b(y)t(;)g(z)t
Fy(\))27 b Fo(\021)i(j)o Fn(c)p Fo(i)17 b Fn(;)0 2909
y Fy(so)33 b Fo(j)o Fn(c)p Fo(i)28 b(\021)g Fy(\(3)p
Fn(;)17 b Fy(2)p Fn(;)g Fy(1\))728 2870 y Fm(1)p 682
2886 130 4 v 682 2896 a Fx(p)p 739 2896 71 3 v 739 2951
a Fm(14)852 2909 y Fy(relativ)m(e)34 b(to)e(the)h(basis)h
Fo(fj)p Fn(a)p Fo(i)16 b Fn(;)h Fo(j)o Fn( )t Fo(i)g
Fn(;)g Fo(j)o Fn(\036)p Fo(ig)p Fy(.)0 3133 y(No)m(w)32
b(let)g Fo(C)i Fy(=)27 b Fo(f)p Fn(C)670 3148 y Fm(1)709
3133 y Fn(;)17 b(C)823 3148 y Fm(2)862 3133 y Fn(;)g(:)g(:)g(:)f(;)h(C)
1151 3148 y Fm(27)1225 3133 y Fo(g)31 b Fy(and)h Fo(O)e
Fy(=)1708 3059 y Fl(S)1791 3085 y Fm(27)1791 3162 y Fp(i)p
Fm(=1)1926 3133 y Fn(C)1996 3148 y Fp(i)2024 3133 y Fy(.)43
b(Supp)s(ose)32 b(there)g(exists)i(an)d(admissible)i(assign-)0
3308 y(men)m(t)28 b(function)f Fn(v)j Fy(under)d(whic)m(h)i
Fo(O)g Fy(is)e(non-con)m(textual)h(and)f Fn(v)t Fy(\()p
Fn(P)2435 3323 y Fp(a)2476 3308 y Fn(;)17 b(C)2590 3323
y Fm(26)2664 3308 y Fy(\))28 b(=)f Fn(v)t Fy(\()p Fn(P)2985
3323 y Fp(b)3019 3308 y Fn(;)17 b(C)3133 3323 y Fm(27)3207
3308 y Fy(\))28 b(=)g(1.)41 b(Since)28 b Fn(v)i Fy(is)0
3482 y(admissible,)k(it)d(follo)m(ws)h(that)g Fn(v)t
Fy(\()p Fn(P)1277 3497 y Fp(\013)1326 3482 y Fn(;)17
b(C)1440 3497 y Fm(26)1514 3482 y Fy(\))28 b(=)f Fn(v)t
Fy(\()p Fn(P)1835 3497 y Fp(\014)1882 3482 y Fn(;)17
b(C)1996 3497 y Fm(27)2070 3482 y Fy(\))28 b(=)f(0.)43
b(Therefore)33 b Fn(v)t Fy(\()p Fn(P)2951 3497 y Fp(\013)3000
3482 y Fn(;)17 b(C)3114 3497 y Fm(25)3188 3482 y Fy(\))27
b(=)h Fn(v)t Fy(\()p Fn(P)3509 3497 y Fp(\014)3556 3482
y Fn(;)17 b(C)3670 3497 y Fm(25)3744 3482 y Fy(\))28
b(=)0 3656 y(0,)38 b(so)g(b)m(y)g(admissibilit)m(y)h
Fn(v)t Fy(\()p Fn(P)1105 3671 y Fp(c)1140 3656 y Fn(;)17
b(C)1254 3671 y Fm(25)1328 3656 y Fy(\))35 b(=)h(1.)57
b(This)38 b(deduction)h(is)e(illustrated)h(in)g(Fig.)f(3.)57
b(Ho)m(w)m(ev)m(er,)40 b(b)m(y)0 3831 y(in)m(terpreting)34
b(the)g(observ)-5 b(ables)34 b(in)g(T)-8 b(able)33 b(I)h(as)f(b)s(eing)
g(de\014ned)h(relativ)m(e)h(to)d(the)i(basis)g Fo(fj)o
Fn(a)p Fo(i)17 b Fn(;)g Fo(j)o Fn( )t Fo(i)g Fn(;)g Fo(j)o
Fn(\036)p Fo(ig)p Fy(,)0 4005 y(it)33 b(is)g(immediately)h(clear)f
(that)g(again)f(no)g(suc)m(h)i(admissible)h(function)e
Fn(v)j Fy(exists.)p 3815 4005 4 66 v 3819 3943 59 4 v
3819 4005 V 3877 4005 4 66 v 0 TeXcolorgray 0 4304 a
Fi(Corollary)44 b(2.)p 0 TeXcolorgray 44 w Fw(L)-5 b(et)38
b Fo(j)p Fn(a)p Fo(i)17 b Fn(;)g Fo(j)o Fn(b)p Fo(i)34
b(2)h Fq(C)1299 4268 y Fm(3)1377 4304 y Fw(b)-5 b(e)38
b(unit)h(ve)-5 b(ctors)38 b(such)g(that)2467 4190 y Fl(q)p
2567 4190 91 4 v 2594 4265 a Fm(5)p 2577 4281 71 4 v
2577 4339 a(14)2691 4304 y Fo(\024)d(jh)p Fn(a)p Fo(j)p
Fn(b)p Fo(ij)e(\024)3259 4265 y Fm(3)p 3212 4281 130
4 v 3212 4291 a Fx(p)p 3271 4291 71 3 v 55 x Fm(14)3352
4285 y Fw(.)3420 4304 y(Then)k(ther)-5 b(e)0 4479 y(exists)37
b(a)g(set)g(of)g(pr)-5 b(oje)g(ction)36 b(observables)g
Fo(O)k Fw(c)-5 b(ontaining)36 b Fn(P)2248 4494 y Fp(a)2327
4479 y Fw(and)h Fn(P)2582 4494 y Fp(b)2616 4479 y Fw(,)h(and)e(a)h(set)
h(of)e(c)-5 b(ontexts)37 b Fo(C)44 b Fw(over)0 4653 y
Fo(O)s Fw(,)c(such)e(that)h(ther)-5 b(e)39 b(is)f(no)g(admissible)f
(assignment)h(function)g(under)h(which)e Fo(O)42 b Fw(is)c(non-c)-5
b(ontextual,)0 4827 y Fn(P)63 4842 y Fp(a)139 4827 y
Fw(has)35 b(the)g(value)f(1)h(and)f Fn(P)1064 4842 y
Fp(b)1133 4827 y Fw(is)h(value)f(de\014nite.)p 0 TeXcolorgray
0 5176 a(Pr)-5 b(o)g(of.)p 0 TeXcolorgray 49 w Fy(Again)33
b(scale)h Fo(j)o Fn(b)p Fo(i)f Fy(so)g(that)f Fo(h)p
Fn(a)p Fo(j)p Fn(b)p Fo(i)c(2)g Fq(R)p Fy(.)44 b(Let)33
b Fn(p)28 b Fy(=)f Fo(h)p Fn(a)p Fo(j)p Fn(b)p Fo(i)33
b Fy(and)g Fn(q)e Fy(=)2713 5090 y Fl(p)p 2813 5090 259
4 v 86 x Fy(1)21 b Fo(\000)i Fn(p)3032 5148 y Fm(2)3071
5176 y Fy(.)44 b(As)33 b(ab)s(o)m(v)m(e)h(w)m(e)g(con-)0
5351 y(struct)d(an)e(orthonormal)h(basis)h(in)f(whic)m(h)h
Fo(j)p Fn(a)p Fo(i)d(\021)g Fy(\(1)p Fn(;)17 b Fy(0)p
Fn(;)g Fy(0\))28 b(and)i Fo(j)p Fn(b)p Fo(i)e(\021)g
Fy(\()p Fn(p;)17 b(q)t(;)g Fy(0\).)41 b(De\014ne)31 b
Fo(j)o Fn(\013)q Fo(i)d(\021)g Fy(\(0)p Fn(;)17 b Fy(1)p
Fn(;)g Fy(0\),)0 5525 y Fo(j)p Fn(\014)6 b Fo(i)31 b(\021)h
Fy(\(0)p Fn(;)17 b Fy(0)p Fn(;)g Fy(1\))34 b(and)h Fo(j)p
Fn(c)p Fo(i)c(\021)i Fy(\()p Fn(q)t(;)17 b Fo(\000)p
Fn(p;)g Fy(0\).)50 b(Then)36 b Fo(fj)p Fn(a)p Fo(i)16
b Fn(;)h Fo(j)o Fn(\013)q Fo(i)f Fn(;)h Fo(j)p Fn(\014)6
b Fo(i)o(g)35 b Fy(and)g Fo(fj)p Fn(b)p Fo(i)16 b Fn(;)h
Fo(j)p Fn(c)p Fo(i)f Fn(;)h Fo(j)p Fn(\014)6 b Fo(i)o(g)35
b Fy(are)g(orthonormal)p 0 TeXcolorgray 1845 5774 a(12)p
0 TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1039 1517 a @beginspecial 71 @llx 539 @lly 288 @urx 721
@ury 2170 @rwi @setspecial
%%BeginDocument: 2012-incomput-proofs_PRA-Figure3.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 1.pdf
%%Creator: Adobe Acrobat 10.1.4
%%For: b
%%CreationDate: 29.11.2012, 22:48:59
%%BoundingBox: 71 539 288 721
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 759 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2012-11-29T22:48:22+01:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2012-11-29T22:48:22+01:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-2.4-1.40.13 (TeX Live 2012/W32TeX) kpathsea version 6.1.0"
   pdf:Producer="pdfTeX-1.40.13"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 3 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
.99628 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
179.986 76.9806 mo
94.9456 162.021 li
false sop
0 1 1 0 cmyk
@
1.99255 lw
176.997 79.9694 mo
182.975 79.9694 li
182.975 73.9918 li
176.997 73.9918 li
cp
@
140.455 119.501 mo
140.455 117.85 139.117 116.512 137.466 116.512 cv
135.815 116.512 134.477 117.85 134.477 119.501 cv
134.477 121.152 135.815 122.49 137.466 122.49 cv
139.117 122.49 140.455 121.152 140.455 119.501 cv
cp
@
%ADOBeginSubsetFont: HFABAA+CMMI12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HFABAA+CMMI12 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI12.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
def
/UniqueID 5087386 def
/FontBBox {-31 -250 1026 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [22] def
/StdVW [65] def
/StemSnapH [22 29] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/C <1C60D8A8C9B6317DF6DDBD86C7212DE4863F7C5C0964ACEE7B74B9276893
56AFC0B596838B466B1CF29A6F395E5A6DFA5042CC522453552400AF1554282E
5B87AD58E242FEC54F03FF853F059E2775B6F12C16E705E66681B10DF5E49EC8
4BD5766BFA6879F5EF07C28E739C1D7957BA018F5D3A91A81494E71DC8206045
F1373C117C389328FFDBBB729CFCA4FD1D81B29BDE> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZDV+CMMI12 /HFABAA+CMMI12 findfont ct_VMDictPut
/ODKZDV+CMMI12*1 
[67{/.notdef}rp /C 188{/.notdef}rp]
ODKZDV+CMMI12 nf
ODKZDV+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
120.545 113.894 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JUHBAA+CMR8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
def
/UniqueID 5000791 def
/FontBBox {-36 -250 1070 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A563
37D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86
BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1D
CB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7
F5FA2E61175441FDD6> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZDW+CMR8 /JUHBAA+CMR8 findfont ct_VMDictPut
/ODKZDW+CMR8*1 
[50{/.notdef}rp /two 205{/.notdef}rp]
ODKZDW+CMR8 nf
ODKZDW+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
128.92 115.687 mo
(2)sh
100.923 162.021 mo
100.923 158.72 98.247 156.043 94.9456 156.043 cv
91.6441 156.043 88.9679 158.72 88.9679 162.021 cv
88.9679 165.322 91.6441 167.999 94.9456 167.999 cv
98.247 167.999 100.923 165.322 100.923 162.021 cv
cp
@
.99628 lw
179.986 247.061 mo
265.026 162.021 li
1 1 0 0 cmyk
@
1.99255 lw
176.997 250.05 mo
182.975 250.05 li
182.975 244.073 li
176.997 244.073 li
cp
@
225.495 204.541 mo
225.495 202.891 224.157 201.552 222.506 201.552 cv
220.855 201.552 219.517 202.891 219.517 204.541 cv
219.517 206.192 220.855 207.53 222.506 207.53 cv
224.157 207.53 225.495 206.192 225.495 204.541 cv
cp
@
ODKZDV+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
226.32 216.524 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDW+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7883CBAA92B92A60ED97CC7706D34A36348BC2B93805C
7C1833580FAA27E95855649C4EE0492E1681D62AEDB7EC0D4D44FE91FF7AD466
5FD8D6994E56FB00B47353D8538086D2C46021ADFB3F80264F6C2EF23799D21E
81ACDE63FE62C97F7BE27D7DCE3B9BAF5B096FE9F9E10574C4FE3C149B03DD0A
59DE10D784DCCBFDFC6D3C5399775DC28DB91A04691B5B8F3D1C009DFAB49BB8
18D90EA7C1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDW+CMR8 /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ODKZDW+CMR8*1 
[50{/.notdef}rp /two /three 204{/.notdef}rp]
ODKZDW+CMR8 nf
ODKZDW+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
234.695 218.317 mo
(3)sh
271.004 162.021 mo
271.004 158.72 268.328 156.043 265.026 156.043 cv
261.725 156.043 259.049 158.72 259.049 162.021 cv
259.049 165.322 261.725 167.999 265.026 167.999 cv
268.328 167.999 271.004 165.322 271.004 162.021 cv
cp
@
.99628 lw
94.9456 162.021 mo
265.026 162.021 li
1 0 1 0 cmyk
@
1.99255 lw
97.9344 162.021 mo
97.9344 160.37 96.5963 159.032 94.9456 159.032 cv
93.2949 159.032 91.9567 160.37 91.9567 162.021 cv
91.9567 163.672 93.2949 165.01 94.9456 165.01 cv
96.5963 165.01 97.9344 163.672 97.9344 162.021 cv
cp
@
176.997 165.01 mo
182.975 165.01 li
182.975 159.032 li
176.997 159.032 li
cp
@
ODKZDV+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
173.432 155.246 mo
(C)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDW+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE5298
51B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3
286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E65
2D787177BE307207126057745DD2D6A7D78294> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDW+CMR8 /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ODKZDW+CMR8*1 
[49{/.notdef}rp /one /two /three 204{/.notdef}rp]
ODKZDW+CMR8 nf
ODKZDW+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
181.807 157.039 mo
(1)sh
268.015 162.021 mo
268.015 160.37 266.677 159.032 265.026 159.032 cv
263.376 159.032 262.038 160.37 262.038 162.021 cv
262.038 163.672 263.376 165.01 265.026 165.01 cv
266.677 165.01 268.015 163.672 268.015 162.021 cv
cp
@
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HFABAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDV+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B66A6BD6F90888768F67EC15C77D9BB35B63C2D1057A70C423
B7B04CED65B25A2BA2E3035CF8B7A4352B61B93B045F9591F90BDC6EA846560E
BDA4B49DE9CFFE64713EAB618DC2D4C304F9B6E1D331A8E26197DBA96805DF67
AF5DA921ACED4BE4C351291FDAC855042EEF34159F43E61A7450302F234FE13B
7493E51280A4B5C7BBAE5AB5BD6C554CB6AA29C4834D8B9BAF45180CC1E2F2C6
147E4AC7261CFF8A5850EFC6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDV+CMMI12 /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
/ODKZDV+CMMI12*1 
[67{/.notdef}rp /C 12{/.notdef}rp /P 175{/.notdef}rp]
ODKZDV+CMMI12 nf
ODKZDV+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
186.462 80.169 mo
(P)sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /EDKAAA+CMMI8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI8.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
def
/UniqueID 5087383 def
/FontBBox {-24 -250 1110 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/a <1C60D8A8C9B7E7C1D918A3B15153CA6B5BE26AE31C56C5E8EA147D01C983
68E0C774FEAB8136CD368DF727E03257E5108BF84C2D8D8BD9710B792E65504A
E02BFFB732B2935D897B359F51D188DDD7C8496A2490461FC4585D3CE7BD48C4
1FC35A3D5C9D095E8DFCC2B54439D2B6C3F1E218533BDCF0B13CFA530C61605C
86AA1F97863E14F7B27D0446707834C59B38D21B8A32336B60DFB978E5A44F1D
23522E972F9658B60ED49D68A3FE186EF364D06B75928D07F32B> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZDX+CMMI8 /EDKAAA+CMMI8 findfont ct_VMDictPut
/ODKZDX+CMMI8*1 
[97{/.notdef}rp /a 158{/.notdef}rp]
ODKZDX+CMMI8 nf
ODKZDX+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
194.007 81.963 mo
(a)sh
ODKZDV+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
161.844 250.248 mo
(P)sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDX+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B775D2CA794183E8A400C7BDDE8590B1CEC0C6F2D15B6CFA2A
FE65174D02A949C7059CA560FD994877E653AE65D3B93699AF6503DA15CE0901
289413AC4AEA05C87296A8BA5DB19A993847A44CDA8E05634E15E910BB594D03
9074FDAC407794FC6DE5314076785B8B4799B4B7A82C77AB95CC89F5490689FA
12BB8562D10E68BB15C26A403BD9F4A7B224FBB77806E7C60DA693782A36FAEC
E0019737FDAE3EEB41C78BAFF90B1E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDX+CMMI8 /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/ODKZDX+CMMI8*1 
[97{/.notdef}rp /a /b 157{/.notdef}rp]
ODKZDX+CMMI8 nf
ODKZDX+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
169.39 252.041 mo
(b)sh
ODKZDV+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
72 165.209 mo
(P)sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDX+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/alpha <1C60D8A8C9B65F8A3BCC2799D8771214626480D93F2E60B123B79DF1
873D6D4F3E3BD4BF09F9CA39030894CCB3E132B12B4463E770FA334D21DCA5A3
01C2828A3DB6F0A0743D1C2A9F4DFD06ED887A7928575AB98D31B3765341326A
68FB75D891D4F329EA0927AF909DF180690FEEE1EE2D4CFF378930A641630372
259BE99E14604F28C2AA507EB5DAD6BB958FBA9A3270E557C136AC50B72D8DCA
7E7434E75F149F11A8DC61F088E2BD918F3A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDX+CMMI8 /Encoding get
dup 11 /alpha put
pop
%ADOEndSubsetFont
/ODKZDX+CMMI8*1 
[11{/.notdef}rp /alpha 85{/.notdef}rp /a /b 157{/.notdef}rp]
ODKZDX+CMMI8 nf
ODKZDX+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
79.545 167.002 mo
(\013)sh
ODKZDV+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
274.49 164.434 mo
(P)sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDX+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/beta <1C60D8A8C9B7C7F3A7A9FFDD799C701454A55EFF9DED64ED8161A74DA
2D0BB385D41E15884B7E26FD6B9A4865AA91474AC7854095C143F9EBE4AA9EA6
0CEE7DB7294E7CE951D9CDDDA6451859282AF7050841A37C5C3452A9915039A6
D12BD05425A88A3F357078FFAD9EA70C6D6EF3DB6E1C2FAABF53C4F3E9F9F2CD
28383133C2F6E2D4A54A78BF1B0AAF6819B7CD86D59B43F1EEB0371D2B778B86
10AF7C6F92F46286568923840A830E03D73F002C828435501DE28CDA37DCDBF8
7438DE53B3A464F02C07383C780B9D035804DC32195F2D2B4911AA670E052016
91C033FA89EF2B455FD78AD9E2886ADF577C8328186C50B16877C3DB47D29F15
C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDX+CMMI8 /Encoding get
dup 12 /beta put
pop
%ADOEndSubsetFont
/ODKZDX+CMMI8*1 
[11{/.notdef}rp /alpha /beta 84{/.notdef}rp /a /b 157{/.notdef}rp]
ODKZDX+CMMI8 nf
ODKZDX+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
282.035 166.227 mo
(\014)sh
ODKZDV+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
174.131 176.666 mo
(P)sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDX+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B74F3614A5185164D844DD41098AB14026A007B9D5333B12B9
0BE6CCC528AB267E334A3FC6306DBAFC62D44FBF89ECEC560EF51A32DF842272
64F700B84C8CC1C99B12202D420C2A4E3AB9AE55B0C044A3771EF3FFFB3E7118
F2F246163FEFCD0149E06A777806BFBC55AC1E6CCF3DE3180DD87F0B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDX+CMMI8 /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
/ODKZDX+CMMI8*1 
[11{/.notdef}rp /alpha /beta 84{/.notdef}rp /a /b /c 156{/.notdef}rp]
ODKZDX+CMMI8 nf
ODKZDX+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
181.676 178.459 mo
(c)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/ODKZDX+CMMI8*1 uf
/ODKZDX+CMMI8 uf
/EDKAAA+CMMI8 uf
/ODKZDW+CMR8*1 uf
/ODKZDW+CMR8 uf
/JUHBAA+CMR8 uf
/ODKZDV+CMMI12*1 uf
/ODKZDV+CMMI12 uf
/HFABAA+CMMI12 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 0 1805 a FA(FIG.)41 b(3.)71 b(\(Color)41
b(online\))g(Greec)m(hie)g(orthogonalit)m(y)i(diagram)e(with)f(an)g(o)m
(v)m(erlaid)i(v)-5 b(alue)41 b(assignmen)m(t)g(that)0
1986 y(illustrates)e(the)g(relationship)f(b)s(et)m(w)m(een)h(the)f(con)
m(texts)i Fk(C)2051 2000 y Fm(1)2090 1986 y Fk(;)f(C)2219
2000 y Fm(2)2296 1986 y FA(and)f Fk(C)2546 2000 y Fm(3)2623
1986 y FA(in)g(Theorem)g(1.)64 b(The)38 b(circles)h(and)0
2166 y(squares)33 b(represen)m(t)h(observ)-5 b(ables)34
b(that)g(will)g(b)s(e)g(giv)m(en)g(the)g(v)-5 b(alues)34
b(0)g(and)g(1)g(resp)s(ectiv)m(ely)-8 b(.)52 b(They)33
b(are)i(joined)0 2347 y(b)m(y)30 b(smo)s(oth)g(lines)h(whic)m(h)f
(represen)m(t)h(con)m(texts.)p 0 TeXcolorgray 0 2621
a Fy(bases)36 b(for)f Fq(C)482 2585 y Fm(3)521 2621 y
Fy(,)h(so)f(w)m(e)h(can)f(de\014ne)h(the)f(con)m(texts)i
Fn(C)1945 2636 y Fm(1)2016 2621 y Fy(=)31 b Fo(f)p Fn(P)2236
2636 y Fp(a)2278 2621 y Fn(;)17 b(P)2385 2636 y Fp(\013)2434
2621 y Fn(;)g(P)2541 2636 y Fp(\014)2588 2621 y Fo(g)34
b Fy(and)h Fn(C)2934 2636 y Fm(2)3005 2621 y Fy(=)d Fo(f)p
Fn(P)3226 2636 y Fp(b)3260 2621 y Fn(;)17 b(P)3367 2636
y Fp(c)3401 2621 y Fn(;)g(P)3508 2636 y Fp(\014)3555
2621 y Fo(g)p Fy(.)50 b(Note)0 2796 y(that)32 b Fn(p)260
2760 y Fm(2)327 2796 y Fo(\025)460 2757 y Fm(5)p 443
2773 71 4 v 443 2830 a(14)556 2796 y Fy(and)g(hence)1109
3054 y Fo(h)p Fn(a)p Fo(j)p Fn(c)p Fo(i)27 b Fy(=)h Fn(q)j
Fy(=)1617 2963 y Fl(p)p 1716 2963 259 4 v 1716 3054 a
Fy(1)22 b Fo(\000)h Fn(p)1936 3026 y Fm(2)2003 3054 y
Fo(\024)2108 2935 y Fl(q)p 2208 2935 262 4 v 119 x Fy(1)f
Fo(\000)2406 3015 y Fm(5)p 2388 3031 71 4 v 2388 3089
a(14)2496 3054 y Fy(=)2657 3015 y Fm(3)p 2610 3031 130
4 v 2610 3041 a Fx(p)p 2669 3041 71 3 v 55 x Fm(14)2749
3035 y Fy(.)0 3313 y(F)-8 b(rom)28 b(Theorem)i(1)e(it)g(follo)m(ws)h
(that)g(there)g(are)f(sets)i(of)e(observ)-5 b(ables)30
b Fo(O)2639 3328 y Fp(b)2674 3313 y Fy(,)f Fo(O)2809
3328 y Fp(c)2872 3313 y Fy(and)g(con)m(texts)h Fo(C)3491
3328 y Fp(b)3526 3313 y Fy(,)f Fo(C)3634 3328 y Fp(c)3698
3313 y Fy(suc)m(h)0 3487 y(that)i(there)i(is)f(no)g(admissible)h
(assignmen)m(t)h(function)e(under)g(whic)m(h)i Fo(O)2678
3502 y Fp(b)2744 3487 y Fy(\()p Fo(O)2861 3502 y Fp(c)2896
3487 y Fy(\))d(is)i(non-con)m(textual)f(and)0 3662 y
Fn(a;)17 b(b)41 b Fy(\()p Fn(a;)17 b(c)p Fy(\))41 b(ha)m(v)m(e)h(the)g
(v)-5 b(alue)41 b(1.)69 b(W)-8 b(e)42 b(com)m(bine)g(these)g(sets)h(to)
d(giv)m(e)i Fo(O)j Fy(=)d Fo(O)2928 3677 y Fp(b)2991
3662 y Fo([)28 b(O)3164 3677 y Fp(c)3227 3662 y Fo([)h(f)p
Fn(P)3435 3677 y Fp(\013)3484 3662 y Fn(;)17 b(P)3591
3677 y Fp(\014)3637 3662 y Fo(g)41 b Fy(and)0 3836 y
Fo(C)49 b Fy(=)42 b Fo(C)271 3851 y Fp(b)334 3836 y Fo([)28
b(C)480 3851 y Fp(c)543 3836 y Fo([)h(f)p Fn(C)758 3851
y Fm(1)797 3836 y Fn(;)17 b(C)911 3851 y Fm(2)950 3836
y Fo(g)p Fy(.)69 b(Supp)s(ose)42 b(there)g(exists)h(an)e(admissible)i
(assignmen)m(t)g(function)f Fn(v)j Fy(under)0 4010 y(whic)m(h)39
b Fo(O)h Fy(is)e(non-con)m(textual,)i Fn(v)t Fy(\()p
Fn(P)1358 4025 y Fp(a)1399 4010 y Fn(;)17 b(C)1513 4025
y Fm(1)1552 4010 y Fy(\))36 b(=)g(1)h(and)h Fn(P)2082
4025 y Fp(b)2153 4010 y Fy(is)g(v)-5 b(alue)38 b(de\014nite.)59
b(Then)39 b Fn(v)t Fy(\()p Fn(P)3324 4025 y Fp(b)3358
4010 y Fn(;)17 b(C)3472 4025 y Fm(2)3511 4010 y Fy(\))36
b Fo(6)p Fy(=)f(1)i(b)m(y)0 4185 y(the)29 b(de\014nition)h(of)f
Fo(O)781 4200 y Fp(b)816 4185 y Fy(,)g(so)h Fn(v)t Fy(\()p
Fn(P)1141 4200 y Fp(b)1174 4185 y Fn(;)17 b(C)1288 4200
y Fm(2)1327 4185 y Fy(\))28 b(=)g(0.)42 b(Since)30 b
Fn(v)t Fy(\()p Fn(P)2018 4200 y Fp(a)2059 4185 y Fn(;)17
b(C)2173 4200 y Fm(1)2212 4185 y Fy(\))27 b(=)h(1)h(and)g
Fn(v)k Fy(is)c(admissible,)j Fn(v)t Fy(\()p Fn(P)3468
4200 y Fp(\014)3515 4185 y Fn(;)17 b(C)3629 4200 y Fm(1)3667
4185 y Fy(\))28 b(=)g(0)0 4359 y(and)35 b(hence)i Fn(v)t
Fy(\()p Fn(P)618 4374 y Fp(\014)664 4359 y Fn(;)17 b(C)778
4374 y Fm(2)817 4359 y Fy(\))32 b(=)g(0)j(as)g(w)m(ell.)53
b(So)35 b(b)m(y)h(admissibilit)m(y)i Fn(v)t Fy(\()p Fn(P)2446
4374 y Fp(c)2480 4359 y Fn(;)17 b(C)2594 4374 y Fm(2)2633
4359 y Fy(\))32 b(=)g(1,)j(whic)m(h)i(is)f(imp)s(ossible)g(b)m(y)0
4533 y(the)d(de\014nition)h(of)e Fo(O)792 4548 y Fp(c)827
4533 y Fy(.)43 b(Therefore)34 b(there)f(do)s(es)g(not)g(exist)g(suc)m
(h)h(a)f(function)g Fn(v)t Fy(.)p 3815 4533 4 66 v 3819
4471 59 4 v 3819 4533 V 3877 4533 4 66 v 0 4828 a(The)e(di\013erence)g
(b)s(et)m(w)m(een)h(the)f(ab)s(o)m(v)m(e)g(result)f(and)g(the)h(Ko)s(c)
m(hen-Sp)s(ec)m(k)m(er)h(theorem)f(is)f(subtle)h(but)g(crit-)0
5002 y(ical.)60 b(The)38 b(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)j(theorem,)f
(under)e(the)h(assumption)g(of)e(non-con)m(textualit)m(y)-8
b(,)41 b(only)d(\014nds)0 5176 y(a)e(con)m(tradiction)g(with)h(the)f(h)
m(yp)s(othesis)i(that)d Fw(al)5 b(l)46 b Fy(observ)-5
b(ables)37 b(are)f(v)-5 b(alue)36 b(de\014nite|it)h(do)s(es)f(not)g
(al-)0 5351 y(lo)m(w)f(an)m(y)h(sp)s(eci\014c)g(observ)-5
b(able)36 b(to)e(b)s(e)h(pro)m(v)m(en)h(v)-5 b(alue)35
b(inde\014nite.)52 b(Corollary)35 b(2,)g(ho)m(w)m(ev)m(er,)i(allo)m(ws)
f(just)0 5525 y(this|)p Fw(sp)-5 b(e)g(ci\014c)46 b(value)g
(inde\014nite)g(observables)f(c)-5 b(an)46 b(b)-5 b(e)47
b(identi\014e)-5 b(d)p Fy(.)81 b(While)46 b(w)m(e)h(dela)m(y)g(the)e
(ph)m(ysical)p 0 TeXcolorgray 1845 5774 a(13)p 0 TeXcolorgray
eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fy(in)m(terpretation)37 b(of)f(this)g(result)h
(un)m(til)g(the)f(follo)m(wing)h(section,)h(w)m(e)f(men)m(tion)g(that)f
(it)g(applies)h(to)e(mea-)0 257 y(suremen)m(ts)g(of)d(an)h(observ)-5
b(able)33 b(on)g(a)f(ph)m(ysical)j(system)f(in)f(an)f(eigenstate)i(of)e
(a)h(di\013eren)m(t)g(observ)-5 b(able.)0 731 y Fr(I)s(I)s(I.)103
b(PHYSICAL)35 b(INTERPRET)-9 b(A)g(TION)0 1073 y Fy(In)28
b(order)h(to)f(mak)m(e)h(op)s(erational)f(use)h(of)e(the)i(results)h
(of)d(the)i(previous)g(section)h(w)m(e)f(connect)g(the)g(formal)0
1247 y(en)m(tities)45 b(with)f(measuremen)m(t)h(outcomes.)77
b(In)43 b(the)h(pro)s(cess)g(of)f(doing)g(this,)k(w)m(e)d(mak)m(e)g
(explicit)h(the)0 1422 y(assumptions)34 b(our)f(results)h(rely)f(on.)0
1895 y Fr(A.)105 b(The)34 b(role)h(of)g(measuremen)m(t)0
2237 y Fy(An)25 b(inheren)m(t)i(assumption)g(in)e(the)h(attempt)f(to)g
(attribute)h(ph)m(ysical)h(meaning)f(to)e(the)i(Ko)s(c)m(hen-Sp)s(ec)m
(k)m(er)0 2412 y(theorem)32 b(\(as)f(w)m(ell)h(as)f(the)h(other)f
(theorems)h(w)m(e)g(ha)m(v)m(e)h(pro)m(v)m(ed\),)f(and)g(one)f(whic)m
(h)h(w)m(e)g(shall)g(also)f(mak)m(e,)0 2586 y(is)i(that)f(measuremen)m
(t)j(is)f(actually)f(a)f(ph)m(ysically)j(meaningful)e(pro)s(cess.)45
b(In)33 b(particular,)g(w)m(e)h(assume:)0 2985 y Fi(Measuremen)m(t)42
b(assumption.)51 b Fy(Measuremen)m(t)38 b(yields)e(a)f(ph)m(ysically)i
(meaningful)e(and)g(unique)i(re-)0 3159 y(sult.)0 3383
y(This)27 b(ma)m(y)f(seem)h(rather)e(self-eviden)m(t,)k(but)d(it)f(is)h
(not)g(true)f(of)g(in)m(terpretations)i(of)e(quan)m(tum)i(mec)m(hanics)
0 3557 y(suc)m(h)36 b(as)e(the)g(man)m(y-w)m(orlds)i(in)m
(terpretation,)g(where)f(measuremen)m(t)h(is)f(just)f(a)g(pro)s(cess)h
(b)m(y)g(whic)m(h)h(the)0 3732 y(apparatus)c(or)f(exp)s(erimen)m(ter)i
(b)s(ecomes)g(en)m(tangled)g(with)f(the)f(state)h(b)s(eing)g
(\\measured".)44 b(In)32 b(suc)m(h)g(an)0 3906 y(in)m(terpretation)k
(it)f(do)s(es)h(not)f(mak)m(e)i(sense)g(to)e(talk)g(ab)s(out)g(the)h
(unique)g(\\result")g(of)f(a)g(measuremen)m(t,)0 4081
y(let)e(alone)g(an)m(y)g(de\014nite)h(v)-5 b(alues)33
b(whic)m(h)h(one)f(ma)m(y)h(pre-asso)s(ciate)f(with)g(them.)0
4305 y(T)-8 b(o)41 b(establish)h(the)g(relationship)g(b)s(et)m(w)m(een)
h(the)e(quan)m(tum)h(system)h(of)e(in)m(terest)h(and)f(the)g(function)h
Fn(v)0 4479 y Fy(assigning)d(de\014nite)g(v)-5 b(alues)39
b(in)g(adv)-5 b(ance,)40 b(w)m(e)f(need)g(to)f(restrict)h(ourselv)m(es)
i(to)c(assignmen)m(t)j(functions)0 4653 y(whic)m(h)27
b(agree)f(with)g(quan)m(tum)g(mec)m(hanics.)44 b(Sp)s(eci\014cally)-8
b(,)28 b(de\014nite)f(v)-5 b(alues)26 b(prescrib)s(ed)i(b)m(y)e(the)g
(function)0 4828 y(should)33 b(b)s(e)g(just)g(that;)g(they)g(m)m(ust)h
(guaran)m(tee)f(the)g(result)g(of)g(a)f(measuremen)m(t.)0
5002 y(Let)49 b Fn(v)j Fy(b)s(e)d(a)f(v)-5 b(alue)50
b(assignmen)m(t)g(function.)92 b(W)-8 b(e)49 b(sa)m(y)h(that)e
Fn(v)53 b Fy(is)c(a)f Fw(faithful)59 b Fy(represen)m(tation)50
b(of)f(a)0 5176 y(realisation)f Fn(r)531 5191 y Fp( )630
5176 y Fy(of)f(a)g(state)g Fo(j)p Fn( )t Fo(i)g Fy(if)g(a)g(measuremen)
m(t)i(of)e(observ)-5 b(able)48 b Fn(o)f Fy(in)h(the)f(con)m(text)i
Fn(C)54 b Fy(on)47 b(the)0 5351 y(ph)m(ysical)35 b(state)e
Fn(r)658 5366 y Fp( )743 5351 y Fy(yields)i(the)e(result)h
Fn(v)t Fy(\()p Fn(o;)17 b(C)7 b Fy(\))32 b(whenev)m(er)j
Fn(o)e Fy(has)g(a)f(de\014nite)i(v)-5 b(alue)34 b(under)f
Fn(v)t Fy(.)44 b(Usually)-8 b(,)0 5525 y(it)33 b(is)h(implicitly)h
(assumed)f(that)f(a)g(v)-5 b(alue)34 b(assignmen)m(t)h(function)e(is)h
(faithful|if)e(it)h(is)h(not)f(then)h(it)f(has)p 0 TeXcolorgray
1845 5774 a(14)p 0 TeXcolorgray eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fy(no)40 b(real)g(relation)h(to)e(the)i(ph)m
(ysical)h(system)g(that)e(it)g(is)h(mean)m(t)g(to)f(mo)s(del)g(and)h
(is)f(of)g(little)h(in)m(terest.)0 257 y(Nonetheless,)35
b(since)f(w)m(e)f(in)m(tend)h(to)e(mak)m(e)i(all)e(assumptions)j
(explicit)f(here,)f(w)m(e)h(will)f(mak)m(e)h(clear)f(that)0
432 y(w)m(e)i(are)f(referring)g(to)f(faithful)h(assignmen)m(t)h
(functions)g(when)g(necessary)-8 b(.)49 b(Of)34 b(course,)h(an)f
(assignmen)m(t)0 606 y(function)26 b(whic)m(h)h(is)f(de\014ned)g(no)m
(where)h(meets)g(this)f(condition,)h(but)f(this)g(complete)h
(inde\014niteness)h(do)s(es)0 780 y(not)j(fully)h(capture)g(our)g(kno)m
(wledge)h(of)e(a)g(quan)m(tum)h(system;)i(w)m(e)f(should)f(at)f(least)h
(b)s(e)g(able)f(to)g(predict)0 955 y(the)f(outcomes)g(of)f
Fw(some)36 b Fy(measuremen)m(ts.)45 b(W)-8 b(e)30 b(discuss)h(this)f
(issue)h(of)e(when)h(to)f(assign)h(de\014nite)g(v)-5
b(alues)0 1129 y(in)33 b(Section)g(I)s(I)s(I)16 b(C.)0
1895 y Fr(B.)105 b(V)-9 b(alue)35 b(inde\014niteness)0
2237 y Fy(The)e(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)i(theorem)e(lea)m(v)m(es)
i(t)m(w)m(o)e(p)s(ossibilities:)45 b(either)33 b(w)m(e)h(giv)m(e)f(up)g
(the)g(idea)f(that)h(ev)m(ery)0 2412 y(observ)-5 b(able)42
b(should)f(b)s(e)g(sim)m(ultaneously)i(v)-5 b(alue)41
b(de\014nite,)j(or)c(w)m(e)h(allo)m(w)g(observ)-5 b(ables)42
b(to)e(b)s(e)h(de\014ned)0 2586 y(con)m(textually)-8
b(.)49 b(Of)33 b(course,)i(some)g(com)m(bination)f(of)f(b)s(oth)h
(options)g(is)g(also)g(p)s(ossible.)48 b(Here)34 b(w)m(e)h(opt)f(to)0
2760 y(assume)h(non-con)m(textualit)m(y)h(of)e(observ)-5
b(ables)35 b(for)f(whic)m(h)h(the)g(outcome)f(is)h(predetermined,)h
(and)e(th)m(us)0 2935 y(giv)m(e)g(up)e(the)h(historic)h(notion)e(of)g
(complete)i(determinism)h(\(classical)f(omniscience\).)0
3159 y(This)44 b(assumption)g(migh)m(t)f(b)s(e)g(in)g(con)m(tradiction)
h(to)e(that)h(of)f(ph)m(ysicists)k(who,)g(in)d(the)g(tradition)g(of)0
3333 y(the)36 b(realist)g(Bell)h(\(see)g(the)f(oft-quoted)f(text,)i
([1]\),)f(tend)h(to)e(opt)h(for)f(con)m(textualit)m(y)-8
b(.)55 b(The)36 b(option)g(for)0 3508 y(con)m(textualit)m(y)46
b(sa)m(v)m(es)h(realistic)e(omniscience)h(and)f(\\con)m(textual)g(v)-5
b(alue)44 b(de\014niteness")j(at)d(the)g(price)0 3682
y(of)h(in)m(tro)s(ducing)i(a)e(more)h(general)g(dep)s(endence)i(of)e
(at)f(least)h(some)h(p)s(oten)m(tial)f(observ)-5 b(ables)47
b(on)f(the)0 3856 y(measuremen)m(t)d(con)m(text.)70 b(In)41
b(what)g(follo)m(ws)h(w)m(e)g(mak)m(e)g(no)f(attempt)g(to)f(sa)m(v)m(e)
j(realistic)f(omniscience)0 4031 y(and)33 b(instead)g(require)h(the)f
(non-con)m(textualit)m(y)i(of)d(an)m(y)h(pre-determined)h(prop)s
(erties.)0 4255 y Fi(Non-con)m(textualit)m(y)k(assumption.)45
b Fy(The)34 b(set)f(of)f(observ)-5 b(ables)34 b Fo(O)i
Fy(is)d(non-con)m(textual.)0 4479 y(While)49 b(from)e(the)i(Ko)s(c)m
(hen-Sp)s(ec)m(k)m(er)h(theorem)e(and)g(our)g(discussion)i(of)d
(strong-con)m(texualit)m(y)j(it)e(is)0 4653 y(mathematically)d(conceiv)
-5 b(able)45 b(that)e(only)h(some)h(observ)-5 b(ables)45
b(are)e(forced)h(to)f(b)s(e)h(v)-5 b(alue)44 b(inde\014nite,)0
4828 y(while)34 b(others)g(remain)g(b)s(oth)f(non-con)m(textual)h(and)g
(v)-5 b(alue)33 b(de\014nite,)i(this)f(w)m(ould)g(b)s(e)g(a)f(rather)g
(strange)0 5002 y(scenario)i(due)f(to)f(the)h(o)m(v)m(erall)h
(uniformit)m(y)g(and)f(symmetry)h(of)f(these)h(argumen)m(ts.)48
b(Regardless,)35 b(if)e(w)m(e)0 5176 y(can)c(guaran)m(tee)g(that)f(one)
h(observ)-5 b(able)30 b Fn(a)f Fy(is)g(v)-5 b(alue)29
b(de\014nite,)h(with)f(the)g(v)-5 b(alue)29 b(1)g(\(e.g.)g(b)m(y)g
(preparing)g(the)0 5351 y(system)35 b(in)f(an)g(eigenstate)g(of)f
Fn(a)h Fy(with)g(eigen)m(v)-5 b(alue)35 b(1\),)f(Corollary)g(2)f(giv)m
(es)i(us)f(some)g(observ)-5 b(ables)36 b(that)0 5525
y(m)m(ust)e(b)s(e)e(v)-5 b(alue)33 b(inde\014nite.)p
0 TeXcolorgray 1845 5774 a(15)p 0 TeXcolorgray eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fr(C.)104 b(Predictabilit)m(y)36
b(implies)f(v)-6 b(alue)35 b(de\014niteness)0 425 y Fy(A)42
b(more)f(subtle)i(assumption)g(relates)f(to)g(the)g(question)h(of)e
(when)h(w)m(e)h(should)f(consider)h(a)e(ph)m(ysical)0
600 y(observ)-5 b(able)44 b(to)e(ha)m(v)m(e)j(a)d(de\014nite)i(v)-5
b(alue)43 b(asso)s(ciated)h(with)g(it,)h(and)e(the)g(connection)h(b)s
(et)m(w)m(een)h(these)0 774 y(de\014nite)29 b(v)-5 b(alues)28
b(and)g(probabilit)m(y)-8 b(.)42 b(Einstein,)31 b(P)m(o)s(dolsky)e(and)
e(Rosen)h(\(EPR\),)g(in)g(their)g(seminal)g(pap)s(er)0
948 y(on)k(the)h(EPR)h(parado)m(x)e(as)h(it)g(is)g(no)m(w)g(kno)m(wn,)h
(said)f([26,)f(pp.)44 b(777]:)p 0 TeXcolorgray 0 TeXcolorgray
249 1381 a(If,)36 b(without)f(in)g(an)m(y)h(w)m(a)m(y)g(disturbing)g(a)
e(system,)k(w)m(e)e(can)f(predict)h(with)f(certain)m(t)m(y)i(\(i.e.,)
249 1556 y(with)47 b(probabilit)m(y)f(equal)h(to)e(unit)m(y\))i(the)g
(v)-5 b(alue)46 b(of)f(a)h(ph)m(ysical)h(quan)m(tit)m(y)-8
b(,)51 b(then)c(there)249 1730 y(exists)33 b(an)d(elemen)m(t)j(of)d(ph)
m(ysical)j(realit)m(y)e([27])g([\(e.p.r.\)])43 b(corresp)s(onding)32
b(to)e(this)h(ph)m(ysical)249 1904 y(quan)m(tit)m(y)-8
b(.)0 2337 y(F)g(rom)40 b(the)h(ph)m(ysicist's)j(p)s(oin)m(t)d(of)f
(view,)k(the)d(abilit)m(y)h(to)e(predict)i(the)f(v)-5
b(alue)41 b(of)f(an)h(observ)-5 b(able)42 b(with)0 2511
y(certain)m(t)m(y)49 b(seems)g(su\016cien)m(t)g(to)e(p)s(osit)g(the)g
(existence)j(of)c(a)h(de\014nite)h(v)-5 b(alue)48 b(asso)s(ciated)g
(with)g(that)0 2686 y(observ)-5 b(able.)57 b(Ho)m(w)m(ev)m(er,)41
b(the)c(iden)m(ti\014cation)h(that)f(EPR)g(mak)m(e)h(b)s(et)m(w)m(een)h
(certain)m(t)m(y)f(and)f(probabilit)m(y)0 2860 y(one)j(is)g(less)h
(sound.)65 b(Mathematically)-8 b(,)43 b(the)d(statemen)m(t)i(is)e
(simply)h(not)e(true:)58 b(for)39 b(in\014nite)i(measure)0
3034 y(spaces)35 b(probabilit)m(y)f(zero)g(ev)m(en)m(ts)i(not)d(only)h
(can,)g(but)f(m)m(ust)i(o)s(ccur|ev)m(ery)g(p)s(oin)m(t)f(has)f
(probabilit)m(y)i(0)0 3209 y(under)29 b(the)g(Leb)s(esgue)g(measure.)44
b(With)28 b(a)g(frequen)m(tist)j(view)e(of)f(probabilit)m(y)-8
b(,)30 b(the)f(t)m(w)m(o)g(notions)f(cannot)0 3383 y(b)s(e)37
b(united)g(ev)m(en)h(for)e(\014nite)h(spaces.)56 b(One)37
b(can)g(only)g(sa)m(y)g(an)f(ev)m(en)m(t)i(is)f(certain)g(if)g(its)f
(complemen)m(t)j(is)0 3557 y(the)33 b(empt)m(y)h(set.)0
3782 y(With)g(the)f(formalism)h(of)f(quan)m(tum)h(mec)m(hanics)i(en)m
(tirely)f(based)f(on)f(probabilit)m(y)h(spaces,)h(what)f(then)0
3956 y(can)40 b(w)m(e)g(sa)m(y)h(ab)s(out)e(an)m(y)h(de\014nite)h(v)-5
b(alues)40 b(in)g(ph)m(ysical)h(realit)m(y?)65 b(A)40
b(deterministic)h(theory)f(is)g(based)0 4130 y(on)49
b(a)f(description)j(of)d(a)g(state)i(whic)m(h)g(is)f(complete)h(in)f
(that)g(it)g(sp)s(eci\014es)h(de\014nite)h(v)-5 b(alues)49
b(for)f(all)0 4305 y(observ)-5 b(ables.)60 b(The)38 b(state)g(in)f
(quan)m(tum)i(theory)-8 b(,)39 b(ho)m(w)m(ev)m(er,)i(is)d(giv)m(en)h
(as)f(a)f(w)m(a)m(v)m(e)i(function,)g(whic)m(h)g(in)0
4479 y(turn)k(is)g(determined)i(b)m(y)f(the)f(op)s(erators)g(for)f
(whic)m(h)j(the)e(system)i(is)e(an)g(eigenstate)h(of.)74
b(Quan)m(tum)0 4653 y(theory)32 b(is)g(th)m(us)h(based)f(on)g(the)g
(notion)f(that)h(a)f(ph)m(ysical)j(state)e(is)g(\\completely)h(c)m
(haracterised)g(b)m(y)g(the)0 4828 y(w)m(a)m(v)m(e)j(function",)g(whic)
m(h)g(is)f(an)f(eigenstate)i(of)e(some)h(op)s(erator)f(and)h(is)g
(determined)h(for)e(an)m(y)h(con)m(text)0 5002 y(con)m(taining)j(the)h
(said)f(op)s(erator;)i(as)e(EPR)g(note,)h(the)g(\\ph)m(ysical)g(quan)m
(tit)m(y")g(corresp)s(onding)g(to)f(that)0 5176 y(op)s(erator)33
b(has)i(\\with)g(certain)m(t)m(y")g(the)g(corresp)s(onding)g(eigen)m(v)
-5 b(alue)35 b([26,)g(pp.)48 b(778].)g(The)35 b(theory)g(then)0
5351 y(presen)m(ts)45 b(a)e(probabilistic)h(framew)m(ork)g(to)e
(express)j(b)s(eha)m(viour)f(in)f(other)g(con)m(texts.)77
b(A)42 b(reasonable)0 5525 y(assumption)34 b(based)f(on)g(this)g
(principle)h(is)f(the)g(follo)m(wing:)p 0 TeXcolorgray
1845 5774 a(16)p 0 TeXcolorgray eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fi(Eigenstate)46 b(assumption.)69
b Fy(Let)41 b Fo(j)o Fn( )t Fo(i)f Fy(b)s(e)h(a)f(\(normalised\))h
(quan)m(tum)h(state)f(and)f Fn(v)k Fy(a)c(faithful)h(as-)0
257 y(signmen)m(t)48 b(function.)85 b(Then)47 b Fn(v)t
Fy(\()p Fn(P)1310 272 y Fp( )1362 257 y Fn(;)17 b(C)7
b Fy(\))51 b(=)f(1)c(and)h Fn(v)t Fy(\()p Fn(P)2149 272
y Fp(\036)2194 257 y Fn(;)17 b(C)7 b Fy(\))51 b(=)f(0)c(for)g(an)m(y)h
(con)m(text)g Fn(C)58 b Fo(2)51 b(C)i Fy(with)0 432 y
Fn(P)63 447 y Fp( )116 432 y Fn(;)17 b(P)223 447 y Fp(\036)296
432 y Fo(2)28 b Fn(C)7 b Fy(.)0 656 y(While)37 b(this)f(is)h(a)e
(reasonable)i(condition)g(under)f(whic)m(h)i(to)d(assign)i(an)f
(initial)g(set)h(of)e(de\014nite)i(v)-5 b(alues,)0 830
y(its)32 b(use)g(is)g(restricted)h(to)e(con)m(texts)i(con)m(taining)f
(the)g(\\preparation")f(observ)-5 b(able.)45 b(In)31
b(order)h(to)f(extend)0 1005 y(this,)39 b(w)m(e)e(m)m(ust)h(more)g
(carefully)f(form)m(ulate)h(the)f(notion)g(of)f(b)s(eing)h(able)g(to)g
(predict)h(the)f(v)-5 b(alue)37 b(of)f(an)0 1179 y(observ)-5
b(able)34 b(with)f(certain)m(t)m(y)-8 b(.)0 1403 y(Let)41
b(us)g(consider)g(a)f(system)j(whic)m(h)f(w)m(e)f(prepare,)i(measure,)h
(rinse)e(and)e(rep)s(eat)h(ad)f(in\014nitum.)68 b(Let)0
1577 y Fi(x)36 b Fy(=)g Fn(x)262 1592 y Fm(1)302 1577
y Fn(x)357 1592 y Fm(2)413 1577 y Fn(:)17 b(:)g(:)53
b Fy(denote)39 b(the)e(in\014nite)i(sequence)h(pro)s(duced)e(b)m(y)g
(concatenating)g(the)g(outputs)g(of)f(these)0 1752 y(measuremen)m(ts.)
44 b(Fix)26 b(a)f(set)h(of)f(observ)-5 b(ables)27 b Fo(O)h
Fy(and)e(con)m(texts)h Fo(C)32 b Fy(and)25 b(let)h Fn(o)2780
1767 y Fp(i)2808 1752 y Fn(;)17 b(C)2922 1767 y Fp(i)2975
1752 y Fy(denote)26 b(the)g(observ)-5 b(able)0 1926 y(and)29
b(corresp)s(onding)h(con)m(text)h(of)d(the)i Fn(i)p Fy(th)f(measuremen)
m(t.)45 b(W)-8 b(e)29 b(can)h(predict)g(with)g(certain)m(t)m(y)g(the)g
(v)-5 b(alue)0 2100 y(of)27 b(eac)m(h)h(measuremen)m(t)h(if)e(there)h
(exists)h(a)e(computable)i(function)e Fn(f)39 b Fy(:)27
b Fi(N)11 b Fo(\002)g(O)j(\002)d(C)36 b(!)27 b(f)p Fy(0)p
Fn(;)17 b Fy(1)p Fo(g)26 b Fy(suc)m(h)i(that,)0 2275
y(for)j(ev)m(ery)i Fn(i)p Fy(,)f Fn(f)11 b Fy(\()p Fn(i;)17
b(o)717 2290 y Fp(i)744 2275 y Fn(;)g(C)858 2290 y Fp(i)886
2275 y Fy(\))28 b(=)f Fn(x)1110 2290 y Fp(i)1139 2275
y Fy(.)43 b(Wh)m(y)32 b(do)f(w)m(e)i(require)f(that)f
Fn(f)42 b Fy(b)s(e)32 b(computable?)44 b(Since)32 b(w)m(e)g(m)m(ust)h
(with)0 2449 y(ev)m(ery)38 b(measuremen)m(t)g(obtain)d(a)h(result,)h
(there)f(is)h(guaran)m(teed)f(to)f(b)s(e)h(some)h(function)f(giving)g
Fi(x)g Fy(from)0 2623 y(the)29 b(measuremen)m(ts,)j(but)c(if)g(it)g(is)
h(not)f(computable)h(then)g(this)g(function)f(o\013ers)h(no)f(metho)s
(d)h(to)e(predict)0 2798 y(the)35 b(v)-5 b(alues.)52
b(Wh)m(y)36 b(do)f(w)m(e)h(form)m(ulate)f(this)h(for)f(in\014nite)h
(sequences?)53 b(The)36 b(notion)f(of)g(computabilit)m(y)-8
b(,)0 2972 y(and)31 b(th)m(us)h(concrete)g(predictabilit)m(y)-8
b(,)33 b(only)e(mak)m(es)i(sense)g(for)d(in\014nite)i(sequences;)j(it)
30 b(is)i(clear)f(that)g(an)m(y)0 3147 y(tec)m(hnique)d(whic)m(h)f
(allo)m(ws)f(prediction)h(of)e(ev)m(ery)i(measuremen)m(t)h(with)e
(certain)m(t)m(y)h(m)m(ust)g(also)e(do)h(so)f(when)0
3321 y(the)33 b(measuremen)m(ts)i(are)e(con)m(tin)m(ued)h(ad)f
(in\014nitum.)0 3545 y(The)h(last)e(assumption)i(is)f(the)0
3769 y Fi(Elemen)m(ts)27 b(of)g(ph)m(ysical)h(realit)m(y)f(\(e.p.r.\))
45 b(assumption.)e Fy(If)23 b(there)h(exists)h(a)e(computable)h
(function)0 3944 y Fn(f)40 b Fy(:)29 b Fi(N)22 b Fo(\002)h(O)j(\002)d
(C)36 b(!)29 b(f)p Fy(0)p Fn(;)17 b Fy(1)p Fo(g)32 b
Fy(suc)m(h)j(that)e(for)g(ev)m(ery)i Fn(i)f(f)11 b Fy(\()p
Fn(i;)17 b(o)2179 3959 y Fp(i)2206 3944 y Fn(;)g(C)2320
3959 y Fp(i)2348 3944 y Fy(\))29 b(=)g Fn(x)2575 3959
y Fp(i)2603 3944 y Fy(,)34 b(then)g(there)g(is)g(a)f(de\014nite)i(v)-5
b(alue)0 4118 y(asso)s(ciated)33 b(with)h Fn(o)734 4133
y Fp(i)794 4118 y Fy(at)e(eac)m(h)i(step,)g(i.e.)f Fn(v)1571
4133 y Fp(i)1599 4118 y Fy(\()p Fn(o)1684 4133 y Fp(i)1712
4118 y Fn(;)17 b(C)1826 4133 y Fp(i)1854 4118 y Fy(\))27
b(=)h Fn(f)11 b Fy(\()p Fn(i;)17 b(o)2244 4133 y Fp(i)2272
4118 y Fn(;)g(C)2386 4133 y Fp(i)2413 4118 y Fy(\).)0
4342 y(W)-8 b(e)34 b(note)g(that)g(the)g(assumption)h(ab)s(o)m(v)m(e)g
(do)s(es)f(not)g(p)s(ostulate)g(the)g(existence)j(of)c(an)h(e\013ectiv)
m(e)i(w)m(a)m(y)f(to)0 4516 y(\014nd)30 b(or)f(to)h(compute)g(the)g
(computable)h(function)f Fn(f)11 b Fy(:)42 b(suc)m(h)31
b(a)e(function)h(simply)h(exists.)45 b(This)31 b(is)f(visible)0
4691 y(in)j(classical)g(hidden)h(v)-5 b(ariable)32 b(t)m(yp)s(e)i
(theories)f(suc)m(h)h(as)f(statistical)g(mec)m(hanics)h(for)e(thermo)s
(dynamics,)0 4865 y(where)i(w)m(e)f(can)f(hardly)h(claim)g(to)f(b)s(e)h
(able)f(to)g(ev)m(en)i(describ)s(e)g(fully)f(the)g(momen)m(tum)h(and)e
(p)s(osition)h(of)0 5039 y(eac)m(h)i(particle)g(in)g(a)f(gas,)g(but)h
(it)f(is)h(su\016cien)m(t)h(to)e(kno)m(w)h(that)f(w)m(e)i
Fw(c)-5 b(an)41 b Fy(do)34 b(so)g(and)h(that)f(these)h(hidden)0
5214 y(v)-5 b(ariables)38 b(exist)g(in)f(the)g(sense)i(that)d(they)i
(allo)m(w)f(us,)i(in)e(principle,)i(to)e(predict)h(the)f(outcome)g(of)g
(an)m(y)0 5388 y(measuremen)m(t)44 b(in)d(adv)-5 b(ance.)71
b(F)-8 b(urther,)43 b(w)m(e)g(follo)m(w)e(EPR)h(in)f(noting)h(that)f
(this)h(is)f(certainly)i(only)f(a)p 0 TeXcolorgray 1845
5774 a(17)p 0 TeXcolorgray eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fy(su\016cien)m(t)35 b(condition)e(for)f
(de\014nite)i(v)-5 b(alues)33 b(to)f(b)s(e)h(presen)m(t;)i(it)d(is)h(b)
m(y)h(no)e(means)i(necessary)-8 b(.)0 590 y Fr(D.)105
b(Connection)35 b(to)g(quan)m(tum)g(theory)0 932 y Fy(The)f(\014nal)e
(step)i(is)f(to)f(justify)h(our)g(requiremen)m(t)i(of)d(the)h
(admissibilit)m(y)i(of)d(the)h(assignmen)m(t)h(function.)0
1156 y(W)-8 b(e)39 b(\014rst)f(note)h(the)f(follo)m(wing:)56
b(Let)38 b Fn(C)44 b Fy(=)37 b Fo(f)p Fn(P)1758 1171
y Fm(1)1798 1156 y Fn(;)17 b(:)g(:)g(:)e(;)i(P)2079 1171
y Fp(n)2126 1156 y Fo(g)38 b Fy(b)s(e)g(a)g(con)m(text)i(of)e(pro)5
b(jection)39 b(observ)-5 b(ables,)0 1330 y Fn(v)39 b
Fy(a)34 b(faithful)h(assignmen)m(t)i(function)e(and)g
Fn(v)t Fy(\()p Fn(P)1746 1345 y Fm(1)1785 1330 y Fn(;)17
b(C)7 b Fy(\))32 b(=)f(1.)51 b(Since)36 b Fn(P)2530 1345
y Fm(1)2604 1330 y Fy(and)f Fn(P)2859 1345 y Fp(i)2922
1330 y Fy(\()p Fn(i)d Fo(6)p Fy(=)g(1\))i(are)h(compatible)0
1505 y(\(ph)m(ysically)51 b(co-measurable\),)j(if)49
b(w)m(e)g(measure)i(them)e(b)s(oth,)k(the)c(system)i(will)e(collapse)h
(in)m(to)f(the)0 1679 y(eigenstate)38 b(of)e Fn(P)638
1694 y Fm(1)714 1679 y Fy(corresp)s(onding)h(to)f(the)h(eigen)m(v)-5
b(alue)39 b(1.)55 b(Since)37 b(this)h(\014nal)f(state)g(w)m(ould)g
(also)g(b)s(e)f(an)0 1853 y(eigenstate)k(of)f Fn(P)643
1868 y Fp(i)671 1853 y Fy(,)i(it)f(follo)m(ws)g(from)f(the)g(fact)g
(that)1999 1779 y Fl(P)2105 1805 y Fp(n)2105 1882 y(j)t
Fm(=1)2248 1853 y Fn(P)2311 1868 y Fp(j)2386 1853 y Fy(=)g
Fi(1)g Fy(that)h(this)f(state)h(corresp)s(onds)h(to)0
2028 y(the)35 b(eigen)m(v)-5 b(alue)35 b(0)f(of)g Fn(P)896
2043 y Fp(i)958 2028 y Fy(and)h(hence)g Fn(v)t Fy(\()p
Fn(P)1574 2043 y Fp(i)1602 2028 y Fn(;)17 b(C)7 b Fy(\))30
b(=)g(0.)48 b(Hence)36 b(w)m(e)f(conclude)h(that)e Fn(v)t
Fy(\()p Fn(P)3226 2043 y Fp(i)3254 2028 y Fn(;)17 b(C)7
b Fy(\))30 b(=)g(0)k(for)f(all)0 2202 y(2)27 b Fo(\024)i
Fn(i)f Fo(\024)g Fn(n)p Fy(.)42 b(By)31 b(a)e(similar)h(argumen)m(t,)h
(w)m(e)g(see)g(that)e(if)h(instead)g Fn(v)t Fy(\()p Fn(P)2558
2217 y Fp(i)2586 2202 y Fn(;)17 b(C)7 b Fy(\))27 b(=)h(0)h(for)g(2)f
Fo(\024)g Fn(i)g Fo(\024)g Fn(n)i Fy(w)m(e)g(m)m(ust)0
2376 y(ha)m(v)m(e)k Fn(v)t Fy(\()p Fn(P)377 2391 y Fm(1)416
2376 y Fn(;)17 b(C)7 b Fy(\))27 b(=)h(1.)0 2601 y(F)-8
b(rom)27 b(these)i(facts)f(it)g(follo)m(ws)g(directly)i(that)d(a)h
(faithful)f(assignmen)m(t)j(function)e Fn(v)j Fy(m)m(ust)e(b)s(e)f
(admissible,)0 2775 y(th)m(us)44 b(justifying)g(our)f(de\014nition)i
(of)d(an)i(admissible)h Fn(v)t Fy(.)75 b(Indeed,)48 b(admissibilit)m(y)
d(of)e Fn(v)k Fy(is)d(the)g(direct)0 2949 y(generalisation)d(of)f(the)h
(\\sum)h(rule")e(used)i(in)f(pro)s(ofs)f(of)g(the)h(Ko)s(c)m(hen-Sp)s
(ec)m(k)m(er)i(theorem)e([3,)g(28)o(])g(to)0 3124 y(the)f(case)g(where)
h(v)-5 b(alue)40 b(de\014niteness)i(is)e(not)f(assumed.)66
b(In)40 b(our)f(deduction)i(of)e(the)h(requiremen)m(t)i(of)0
3298 y(admissibilit)m(y)32 b(w)m(e)e(are)f(particularly)g(careful)h(in)
f(using)h(our)e(assumptions)j(to)e(sho)m(w)h(that)f(admissibilit)m(y)0
3472 y(is)k(required)h(if)f(simple)h(relations)f(of)f(pro)5
b(jection)33 b(observ)-5 b(ables)34 b(are)f(to)f(b)s(e)h(satis\014ed.)0
3871 y(As)38 b(a)g(consequence,)43 b(w)m(e)38 b(get)g(the)h(follo)m
(wing)f(useful)h(form)f(of)f(Corollary)h(2)g(whic)m(h)h(w)m(e)g(will)g
(utilise)g(in)0 4045 y(the)33 b(remainder)h(of)e(the)h(pap)s(er.)p
0 TeXcolorgray 0 4394 a Fi(Corollary)45 b(3.)p 0 TeXcolorgray
45 w Fw(L)-5 b(et)40 b Fo(j)p Fn( )t Fo(i)c(2)h Fq(C)1155
4358 y Fm(3)1234 4394 y Fw(b)-5 b(e)39 b(a)h(quantum)g(state)g
(describing)e(a)i(system.)59 b(A)n(lso)39 b(let)h Fo(j)o
Fn(\036)p Fo(i)d(2)g Fq(C)3722 4358 y Fm(3)3801 4394
y Fw(b)-5 b(e)0 4568 y(any)35 b(other)g(state)g(which)f(satis\014es)
1315 4454 y Fl(q)p 1414 4454 91 4 v 1442 4529 a Fm(5)p
1424 4545 71 4 v 1424 4603 a(14)1533 4568 y Fo(\024)28
b(jh)p Fn( )t Fo(j)p Fn(\036)p Fo(ij)f(\024)2114 4529
y Fm(3)p 2067 4545 130 4 v 2067 4555 a Fx(p)p 2126 4555
71 3 v 55 x Fm(14)2206 4549 y Fw(.)2271 4568 y(Then,)35
b(assuming)f(non-c)-5 b(ontextuality,)34 b Fn(P)3839
4583 y Fp(\036)0 4743 y Fw(c)-5 b(annot)34 b(b)-5 b(e)35
b(assigne)-5 b(d)33 b(a)i(de\014nite)f(value)h(by)g(a)g(faithful)f
(assignment)g(function.)p 0 TeXcolorgray 0 5176 a(Pr)-5
b(o)g(of.)p 0 TeXcolorgray 49 w Fy(F)d(rom)36 b(the)g(Eigenstate)i
(assumption,)g Fn(P)1830 5191 y Fp( )1919 5176 y Fy(m)m(ust)f(b)s(e)f
(assigned)h(the)g(v)-5 b(alue)36 b(1.)54 b(By)36 b(Corollary)h(2)0
5351 y(and)e(the)h(requiremen)m(t)i(for)d(a)g(faithful)g(assignmen)m(t)
i(function)f(to)f(b)s(e)h(admissible,)i(it)d(follo)m(ws)h(that)f
Fn(P)3839 5366 y Fp(\036)0 5525 y Fy(m)m(ust)f(b)s(e)e(v)-5
b(alue)33 b(inde\014nite.)p 3815 5525 4 66 v 3819 5463
59 4 v 3819 5525 V 3877 5525 4 66 v 0 TeXcolorgray 1845
5774 a(18)p 0 TeXcolorgray eop end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fr(IV.)104 b(A)35 b(RANDOM)g(NUMBER)h(GENERA)-9
b(TOR)0 425 y Fy(F)h(rom)48 b(our)g(assumptions)j(of)d(non-con)m
(textualit)m(y)i(along)f(with)g(our)f(ph)m(ysical)j(assumptions)f(in)f
(the)0 600 y(preceding)40 b(section,)i(w)m(e)e(arriv)m(ed)g(at)e(the)i
(k)m(ey)g(result)g(of)e(Corollary)h(3,)i(whic)m(h)f(allo)m(ws)g(us)f
(to)g(iden)m(tify)0 774 y(particular)22 b(observ)-5 b(ables)24
b(whic)m(h)g(m)m(ust)f(b)s(e)f(v)-5 b(alue)23 b(inde\014nite.)41
b(This)23 b(guaran)m(tee)g(of)f(inde\014niteness,)27
b(whic)m(h)0 948 y(b)s(oth)36 b(the)h(Bell)g([1])g(and)f(Ko)s(c)m
(hen-Sp)s(ec)m(k)m(er)j(theorems)f(cannot)e(yield,)j(adds)e(extra)g
(con)m(viction)h(to)e(the)0 1123 y(widely)g(accepted)g(\(but)f(not)g
(pro)m(v)m(en\))h(unpredictabilit)m(y)h(of)d(the)h(result)g(of)f(quan)m
(tum)i(measuremen)m(ts.)0 1297 y(Since)47 b(quan)m(tum)g(random)f(n)m
(um)m(b)s(er)i(generators)e(\(QRNGs\))g([29)o({35])g(dep)s(end)h(en)m
(tirely)g(on)f(this,)k(it)0 1471 y(seems)42 b(clear)e(w)m(e)g(should)h
(mak)m(e)g(use)f(of)f(this)i(extra)f(certi\014cation)g(in)g(their)g
(design.)66 b(In)40 b(this)g(section)0 1646 y(w)m(e)47
b(presen)m(t)g(suc)m(h)h(a)d(design)i(of)e(a)h(QRNG,)f(and)h(use)h
(Corollary)f(3)g(to)f(pro)m(v)m(e)i(that)f(suc)m(h)h(a)f(device)0
1820 y(will)33 b(pro)s(duce)h(strongly)f(incomputable)i(sequences)g(of)
e(bits|a)g(strong,)g(explicit)h(certi\014cation)g(of)e(the)0
1994 y(QRNG.)0 2434 y Fr(A.)105 b(Random)35 b(n)m(um)m(b)s(er)h
(generator)e(design)0 2776 y Fy(The)44 b(QRNG)e(setup)i(is)f(sho)m(wn)i
(in)e(Fig.)f(4.)74 b(Spin-1)43 b(particles)h(are)f(prepared)h(in)f(the)
g Ff(S)3381 2791 y Fp(z)3466 2776 y Fy(=)i(0)e(state)0
2950 y(\(th)m(us,)f(b)m(y)e(the)g(Eigenstate)h(assumption,)h(this)e(op)
s(erator)f(has)h(a)f(de\014nite)i(v)-5 b(alue\),)41 b(and)f(then)g(the)
f Ff(S)3842 2965 y Fp(x)0 3125 y Fy(op)s(erator)d(is)g(measured.)57
b(Since)37 b(the)g(preparation)f(state)h(is)g(an)f(eigenstate)h(of)f
(the)h Ff(S)3225 3140 y Fp(x)3303 3125 y Fy(=)d(0)i(pro)5
b(jector)0 3299 y(with)38 b(eigen)m(v)-5 b(alue)39 b(0,)f(this)g
(outcome)f(has)h(a)f(de\014nite)i(v)-5 b(alue)37 b(and)g(cannot)h(b)s
(e)f(obtained.)58 b(Th)m(us,)40 b(while)0 3473 y(the)31
b(setup)g(uses)g(spin-1)g(particles,)g(the)g(outcomes)g(are)f(dic)m
(hotomic)i(and)e(the)g Ff(S)2982 3488 y Fp(x)3053 3473
y Fy(=)e Fo(\006)p Fy(1)i(outcomes)h(can)0 3648 y(b)s(e)k(assigned)i(0)
e(and)g(1)g(resp)s(ectiv)m(ely)-8 b(.)55 b(F)-8 b(urther,)36
b(since)g Fo(h)p Ff(S)2172 3663 y Fp(z)2244 3648 y Fy(=)c(0)p
Fo(j)p Ff(S)2483 3663 y Fp(x)2559 3648 y Fy(=)g Fo(\006)p
Fy(1)p Fo(i)g Fy(=)g(1)p Fn(=)3070 3565 y Fo(p)p 3153
3565 49 4 v 83 x Fy(2,)j(it)h(follo)m(ws)g(from)0 3822
y(Corollary)d(3)f(that)g(neither)i(of)e(the)h Ff(S)1387
3837 y Fp(x)1459 3822 y Fy(=)27 b Fo(\006)p Fy(1)33 b(outcomes)h(can)f
(ha)m(v)m(e)h(pre-assigned)g(de\014nite)f(v)-5 b(alue.)0
4046 y(While)27 b(this)g(design)g(is)g(v)m(ery)g(simple,)i(it)d(has)h
(the)g(t)m(w)m(o)f(k)m(ey)i(prop)s(erties)f(w)m(e)g(need)h(from)d(suc)m
(h)j(a)e(QRNG:)f(it)0 4221 y(pro)s(duces)h(bits)f(certi\014ed)h(b)m(y)f
(v)-5 b(alue)25 b(inde\014niteness,)k(and)c(it)f(pro)s(duces)i(the)f
(bits)g(0)f(and)g(1)h(indep)s(enden)m(tly)0 4395 y(and)33
b(with)g(50/50)e(probabilit)m(y)-8 b(.)0 4834 y Fr(B.)105
b(Certi\014cation)34 b(via)h(v)-6 b(alue)35 b(inde\014niteness)0
5176 y Fy(Consider)40 b(the)f(QRNG)f(describ)s(ed)i(in)f(the)g
(previous)h(section,)i(and)c(let)h(us)h(consider)f(that)g(w)m(e)h(run)e
(it)0 5351 y(rep)s(eatedly)j(\\to)d(in\014nit)m(y"|i.e.)65
b(w)m(e)40 b(use)h(it)e(rep)s(eatedly)h(to)f(generate)h(bits)g(and)f
(concatenate)i(them)0 5525 y(together)32 b(to)g(pro)s(duce,)h(in)f(the)
g(limit,)h(the)f(binary)h(sequence)h Fi(x)28 b Fy(=)g
Fn(x)2563 5540 y Fm(1)2602 5525 y Fn(x)2657 5540 y Fm(2)2714
5525 y Fn(:)17 b(:)g(:)f(x)2900 5540 y Fp(n)2964 5525
y Fn(:)h(:)g(:)f Fy(.)43 b(Here)33 b(w)m(e)g(consider)p
0 TeXcolorgray 1845 5774 a(19)p 0 TeXcolorgray eop end
%%Page: 20 20
TeXDict begin 20 19 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
364 667 a @beginspecial 71 @llx 641 @lly 450 @urx 721
@ury 3790 @rwi @setspecial
%%BeginDocument: 2012-incomput-proofs_PRA-Figure4.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 1.pdf
%%Creator: Adobe Acrobat 10.1.4
%%For: b
%%CreationDate: 29.11.2012, 22:48:59
%%BoundingBox: 71 641 450 721
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 759 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2012-11-29T22:48:22+01:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2012-11-29T22:48:22+01:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-2.4-1.40.13 (TeX Live 2012/W32TeX) kpathsea version 6.1.0"
   pdf:Producer="pdfTeX-1.40.13"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 4 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
72.1987 122.882 mo
152.611 122.882 li
152.611 98.6744 li
72.1987 98.6744 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
.3985 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
72.1987 122.882 mo
152.611 122.882 li
152.611 98.6744 li
72.1987 98.6744 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XJDAAA+CMR12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /XJDAAA+CMR12 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR12.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 49 /one put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 117 /u put
def
/UniqueID 5000794 def
/FontBBox {-34 -251 988 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [29] def
/StdVW [65] def
/StemSnapH [20 29] def
/StemSnapV [65 81] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/hyphen <1C60D8A8C9B82424A9C89C4F9B2EA301917DC41B2F6B065AA459E86
8BF5F> |-
/one <1C60D8A8C9B752AB372B1338726DAE50702AE3FC3505C230AA8B538E88
A64BC50555C15C4F9C1C8D25ACFD4CFF046EBC17B6B6CE5B6DDF472F018C84C2
D8CA302ED5402A29C0899E66EA3A4575040CA2E8AB00A92CB377A30E0A8E01C5
5A1866557B8C8E354DD627142F4AFBA8F01617> |-
/c <1C60D8A8C9B7686E50B91A103C25982F9A302EA4F8141240DCC661C74F88
5E7E26E132F04A32F771AF1E981D85F2F45479CE056A7979B5D31D6ACDE50657
395AA1E0804FC72234B35D73160EC1DB8AC3DC589CD9CD13254678243B8E8AFF
A7C9C49116F9C3FD5CFBBEEBE8EFE08DFB00> |-
/e <1C60D8A8C9B7686E50B91A10F4C805B90007B8ED9F69CD2ABB860BC6B4C2
4ADD309DD878EF1585F238AE8F9D91356FA3239D5176BBB7DB2E85C191C46227
879B3BF7D3968B6A2DF76C157A7C772E03B2D4C63BD69B1201900C6BD10D61A3
ACE648AF080836F4E237C1FE890558DD8376> |-
/i <1C60D8A8C9B85D12B724967C6CB76D0959368207B4342C19CE1B9EC1C979
AFE39945CDB07DCB68293DEF3F9F5B5DDD81F9245C20D5895AB44AE881F948D9
AA2C98FD220B63C8E09F1AB810D64CA173E795C253747F5788C563CE245C4123
BABA356BA9A298ED2228E0B30341F78270B1D0D1ECB7ED7474C78F> |-
/n <1C60D8A8C9B79C5F9DD058B93AC6789F3CBB814BFC1F00EDB54718B73939
28D3B2265CD93D424660C039425CBA4398983D3A3E0B2F08E4ECAAC3A11CEE6A
A91394591D10563F18B25C1714DF0FF3721666094230FA4F024DEE11AC8130DA
2FCE9082EBB1BDBAD74BEA1646226506565238B4B08B6317D554CCC162155DA4
CAC5F0A99B2D53A7B6A1D2819C65F282360783E5114E4B70FA9BB0E38436A61E
F9BC341E7A8D15474081F3D30667FD4E969668F84544C7B939C80D37CF321730
8F8868> |-
/o <1C60D8A8C9B752AB3DFB68D30F19F1CA9272CDB5ACB821A6F71A9CC34429
38CF6346EFA7660C66DA069F5EBDC24067D57DFFC05D80799E177A95094BFCA6
7A276154D6CBA4C1E5D133279DB5B2E0A865041C00DB37E8AF5290A042E49141
2C351C8C067D23CD2917758C0BCC7C9DAFE0DE1029A6C28786> |-
/p <1C60D8A8C9B79C5FEDAC3A5356612CABCD4B9B1627D68462987B7A70A6F7
3E962D75C0768D4251A1A9D7D2337D7BBECE040BEC6CE049708ED932D339620D
1B8715D1596A1865F43ABB89A0C1B60EB8D33E9DCA285F730839BEC55CE38C57
C17862D101F34E39EFFAD28CAC702FF76E283D09625FCCA7E3A1E34ED19135AF
7AACEAD2ADC4454A31D80873574D5E5E5331CE826316DB0221E51ECA76C5DD73
AD0B85B75ACCFC6C8370EA3C7ECCBFAD28F838> |-
/r <1C60D8A8C9B73F59AC4C5EA853B4E2F03C64C0C05FD52BC33122FCCA4BFD
51EB9E09AC5195D025A282E25ADC995FA462E62BFD3FBB78FCF4F94F52F42782
F1036F93757E7816AB901DD476C8DB29DFD76A8F977E55D47316848B4CBB9C2E
9C231E1377AEA3E4ABB6343871DED0448700F525D58C2DDE58DACF835ADC433B
D339598286578A85E865AA10027CFEFDE957> |-
/s <1C60D8A8C9B7397095546C4A386811A909F264178C102E37E91BC31B924D
9B3178CC879F813C9FBB28DDFAFB5E4DB00AB47969517F6CA9E4D009805CCA02
704F29F1D897E47248614C06B38AB9A6CC2CEE2ABD4589B792535C94946347E1
92BCD5837CE43D7ADDA9D020C9042E829DE580CEC30A08C16AC2D87AF6B276C3
A330306CED37BE405496AC7E42FA5ED43499AD61FCD13817A426BD247F0B326A
A7AE4D4BC1AB9BB25568BB7CBC493F05A0BA6E2659752A4C90130ADF1F0C148F
A36155> |-
/u <1C60D8A8C9B79C5F973E0166279F70672EBC89841EA2F6C6916249FF7730
FDFB878E3685E5C001D8E6D0F7D826F009D3FC8EFCE4B248B62100A438B6E5EB
2E9B4B75853ADF8C25B6B3965D080DC9A3EDBE25DAC5D4D23A3E962A425C4720
2B665CCA8F038084193F908BB9BE29956E> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZDY+CMR12 /XJDAAA+CMR12 findfont ct_VMDictPut
/ODKZDY+CMR12*1 
[45{/.notdef}rp /hyphen 3{/.notdef}rp /one 49{/.notdef}rp /c /.notdef /e 
3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /.notdef /r 
/s /.notdef /u 138{/.notdef}rp]
ODKZDY+CMR12 nf
ODKZDY+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
79.173 113.583 mo
(spin-1source)
[4.6171 6.50371 3.25185 6.5037 3.90218 9.75059 4.6171 5.85318 6.5037 4.55252 5.20285 0 
]xsh
192.987 123.065 mo
258.598 123.065 li
258.598 98.4907 li
192.987 98.4907 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
192.987 123.065 mo
258.598 123.065 li
258.598 98.4907 li
192.987 98.4907 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: ZAAAAA+CMSS12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ZAAAAA+CMSS12 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSS12.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 83 /S put
def
/UniqueID 5000804 def
/FontBBox {-62 -251 978 758} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 444 459 655 676 694 715] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [60] def
/StdVW [76] def
/StemSnapH [54 60] def
/StemSnapV [76 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/S <1C60D8A8C9B79C5F6086E3C4FBEC481C716559BEA72FB21497ADDB9F4501
3DB39512D80512709AC68F1B49A99148949EBCE0B0633E17BF8181D0EC2AB781
1EED5E58090DE8DF3C1B08AE84FBE3AF1A51C253AFD374A17315FD30060EC522
327C928A933732C4E0283C808D1F6552C8E42DFB1938E919F5F656E1E239A5AB
196D2479F48492D28EDCE2F87B> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZDZ+CMSS12 /ZAAAAA+CMSS12 findfont ct_VMDictPut
/ODKZDZ+CMSS12*1 
[83{/.notdef}rp /S 172{/.notdef}rp]
ODKZDZ+CMSS12 nf
ODKZDZ+CMSS12*1 [11.9552 0 0 -11.9552 0 0 ]msf
199.959 113.767 mo
(S)sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /EDKAAA+CMMI8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI8.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 122 /z put
def
/UniqueID 5087383 def
/FontBBox {-24 -250 1110 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/z <1C60D8A8C9B7AD0A4D19D15DB7BCD4C67A86BBBB463A6C7B5D0053508151
6F36B35B3F18FD1AA63A86B0BE8FE9D311553D6D9F706509E2EA01DE8F7AB858
FE1743B87CA156C7CE0FE01542170E85CAEF07BE4775CA4D0132B75D448DD074
26E256DA5FC9CF51470B3046A4062BBFF7FACE7C0C2CA92A88D95B29C86BDF8F
AD27717F600B2D56CC3CB93998B9788F34DB5E43B1C18EF5D75717A5BE7A0BC4
5332AFE132C4E28EF47A40780EADA067C482776349DF5AF15D2537BFC1644D6F
192D753148BE4257E150B34A7BD9C9858F7D9A4360442BEDFE65> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEA+CMMI8 /EDKAAA+CMMI8 findfont ct_VMDictPut
/ODKZEA+CMMI8*1 
[122{/.notdef}rp /z 133{/.notdef}rp]
ODKZEA+CMMI8 nf
ODKZEA+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
206.463 115.56 mo
(z)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XJDAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZDY+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/l <1C60D8A8C9B85D12B724967D35F648783331BBC1EE8DB5003079F7430DA4
3E81BBC7468DA6B1B45BE0E5907E1FD60F6A47B1CFDFF488C6309642616C183A
B49CEE81F55EF5087AB0E56404FBB1395EDD51A084257E4A1ADB8135145C> |-
/t <1C60D8A8C9B73F59A6AC2B53C00F251FAA3807B287449C6CE7B1D574F127
75168A2081C70118BD346A2CBA3F46FA00F6475C5B747F4FFE0350AC63B6F034
A86CAAC4C0E72D751CC6FA6AAFAF7EEB756D424FBA69667E00> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZDY+CMR12 /Encoding get
dup 108 /l put
dup 116 /t put
pop
%ADOEndSubsetFont
/ODKZDY+CMR12*1 
[45{/.notdef}rp /hyphen 3{/.notdef}rp /one 49{/.notdef}rp /c /.notdef /e 
3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t /u 138{/.notdef}rp]
ODKZDY+CMR12 nf
ODKZDY+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
215.139 113.767 mo
(splitter)
[4.6171 6.50371 3.25185 3.25186 4.55252 4.55252 5.20285 0 ]xsh
306.128 123.065 mo
372.231 123.065 li
372.231 98.4907 li
306.128 98.4907 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
306.128 123.065 mo
372.231 123.065 li
372.231 98.4907 li
306.128 98.4907 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
ODKZDZ+CMSS12*1 [11.9552 0 0 -11.9552 0 0 ]msf
313.1 113.767 mo
(S)sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEA+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B7C56CCD1BC9B75D21714387D3AD3ACF25872779F83EBDBCD6
CE54998B30575B69D40B2B697D333CBED0D896F89234E6F827B9F19B541AEECD
D45EC7D4F1126ACAC87C3C4D72FD40DA2D588CFB8C9AF0D6150F97A0BBCACF17
E32B0710E68246003F62B2AF95E8C00AF3FB2ACCA95B4562458782BB96AE0D72
D6A76D406E7FC05EB25A15FD9C1667627A43B16E6DD22F1CE36567E182698276
9D5C422DD7BB5E3E35F941B799D5AEBBC4B4E2730F1B5D705BCF2BBDB32026E3
1AC1304D5EC2EBCC373B5FC5716F11810C91BEE34479C921C13FD7B947EC284C
F09393A7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEA+CMMI8 /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
/ODKZEA+CMMI8*1 
[120{/.notdef}rp /x /.notdef /z 133{/.notdef}rp]
ODKZEA+CMMI8 nf
ODKZEA+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
319.603 115.56 mo
(x)sh
ODKZDY+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
328.77 113.767 mo
(splitter)
[4.6171 6.50369 3.25186 3.25186 4.55252 4.55252 5.20285 0 ]xsh
152.811 110.778 mo
192.329 110.778 li
@
.31879 lw
1 lc
1 lj
191.134 109.184 mo
191.233 109.782 192.329 110.678 192.628 110.778 cv
192.329 110.878 191.233 111.774 191.134 112.372 cv
@
.3985 lw
0 lc
0 lj
258.797 98.9995 mo
304.731 82.5858 li
@
303.065 81.4844 mo
303.36 82.015 304.697 82.4917 305.013 82.485 cv
304.764 82.6798 304.032 83.8957 304.14 84.4935 cv
.31879 lw
1 lc
1 lj
gsave
[.94386 -.33725 -.33725 -.94386 304.731 82.5858 ]ct
@
grestore newpath
%ADOBeginSubsetFont: JUHBAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JUHBAA+CMR8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/UniqueID 5000791 def
/FontBBox {-36 -250 1070 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE5298
51B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3
286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E65
2D787177BE307207126057745DD2D6A7D78294> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEB+CMR8 /JUHBAA+CMR8 findfont ct_VMDictPut
/ODKZEB+CMR8*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
ODKZEB+CMR8 nf
ODKZEB+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
279.861 86.615 mo
(1)sh
.3985 lw
0 lc
0 lj
258.797 110.778 mo
305.471 110.778 li
@
.31879 lw
1 lc
1 lj
304.275 109.184 mo
304.375 109.782 305.471 110.678 305.77 110.778 cv
305.471 110.878 304.375 111.774 304.275 112.372 cv
@
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEB+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7883CBAA78CA806F705F10D1AC319938D611C6D9BBD69F
6190342FB8FEE9368658E53BCE0AE7824A3280DBA7A5BEF9C087CCC08CFF6EE3
D1CDFAC58984B448A56F36AF08290137970E991F67C347622795CF41E8928BFB
8E257576760A149EDA95EF674E027B6AB519EF80CF7C75785FE2FE5A8F75A351
8927237EA043AA5EE9A8092D5C4A8721DCA0DF83E6E87BB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEB+CMR8 /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/ODKZEB+CMR8*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
ODKZEB+CMR8 nf
ODKZEB+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
280.244 106.677 mo
(0)sh
.3985 lw
0 lc
0 lj
258.797 122.557 mo
304.731 138.97 li
@
304.14 137.063 mo
304.032 137.66 304.764 138.876 305.013 139.071 cv
304.697 139.064 303.36 139.541 303.065 140.072 cv
.31879 lw
1 lc
1 lj
gsave
[.94386 .33725 .33725 -.94386 304.731 138.97 ]ct
@
grestore newpath
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEB+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B80898F3D3B620DE269D78A71890A6A5D42D0F4711153
258DD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEB+CMR8 /Encoding get
dup 45 /hyphen put
pop
%ADOEndSubsetFont
/ODKZEB+CMR8*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one 206{/.notdef}rp]
ODKZEB+CMR8 nf
ODKZEB+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
278.45 126.74 mo
(-1)
[2.82303 0 ]xsh
448.626 82.4313 mo
448.626 76.7799 444.045 72.1987 438.393 72.1987 cv
432.742 72.1987 428.161 76.7799 428.161 82.4313 cv
428.161 88.0826 432.742 92.6638 438.393 92.6638 cv
444.045 92.6638 448.626 88.0826 448.626 82.4313 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
.3985 lw
0 lc
0 lj
448.626 82.4313 mo
448.626 76.7799 444.045 72.1987 438.393 72.1987 cv
432.742 72.1987 428.161 76.7799 428.161 82.4313 cv
428.161 88.0826 432.742 92.6638 438.393 92.6638 cv
444.045 92.6638 448.626 88.0826 448.626 82.4313 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: BKLBAA+CMTT12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /BKLBAA+CMTT12 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMTT12.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/UniqueID 5000833 def
/FontBBox {-1 -234 524 695} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 0 431 440 611 623] def
/OtherBlues [-229 -222] def
/BlueScale 0.04796 def
/StdHW [58] def
/StdVW [65] def
/StemSnapH [58] def
/StemSnapV [65] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7B9B9AD4D1BCC885520AB724597EB604BC51C842719DD70
D480435A95A5531044BD4692FFCE8E6C881E8ED7D54D1804C5EC6E781F2D1103
1CD192D19DCC2E6912A72B044F7107356B77CF384993339C3D304DE45E01C5F1
200262794A> |-
/.notdef <1C60D8A8C9B7B9B928> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEC+CMTT12 /BKLBAA+CMTT12 findfont ct_VMDictPut
/ODKZEC+CMTT12*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
ODKZEC+CMTT12 nf
ODKZEC+CMTT12*1 [11.9552 0 0 -11.9552 0 0 ]msf
435.313 86.085 mo
(1)sh
448.626 139.125 mo
448.626 133.474 444.045 128.892 438.393 128.892 cv
432.742 128.892 428.161 133.474 428.161 139.125 cv
428.161 144.776 432.742 149.357 438.393 149.357 cv
444.045 149.357 448.626 144.776 448.626 139.125 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
448.626 139.125 mo
448.626 133.474 444.045 128.892 438.393 128.892 cv
432.742 128.892 428.161 133.474 428.161 139.125 cv
428.161 144.776 432.742 149.357 438.393 149.357 cv
444.045 149.357 448.626 144.776 448.626 139.125 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: BKLBAA+CMTT12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEC+CMTT12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7B9B959099A5552223303CD73B4D3EB93771ADB39DCD02
8B188C0DE71AECA278D0CC73D4E271EBE89A5D5D1979EC6DB517E017EC702F94
2F00E13D687F2C85ECA1374FD99F3FAC1DD478B682A407BA33DF24833D48B77D
6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEC+CMTT12 /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/ODKZEC+CMTT12*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
ODKZEC+CMTT12 nf
ODKZEC+CMTT12*1 [11.9552 0 0 -11.9552 0 0 ]msf
435.313 142.777 mo
(0)sh
372.43 101.281 mo
427.907 85.4274 li
@
426.317 84.2214 mo
426.577 84.7696 427.879 85.3315 428.194 85.3452 cv
427.934 85.5234 427.125 86.6884 427.194 87.2914 cv
.31879 lw
1 lc
1 lj
gsave
[.96297 -.27518 -.27518 -.96297 427.907 85.4274 ]ct
@
grestore newpath
ODKZEB+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
398.268 89.191 mo
(1)sh
.3985 lw
0 lc
0 lj
[.3985 1.99255 ] 0 dsh
372.43 110.778 mo
429.431 110.778 li
@
.31879 lw
1 lc
1 lj
[] 0 dsh
428.235 109.184 mo
428.335 109.782 429.431 110.678 429.73 110.778 cv
429.431 110.878 428.335 111.774 428.235 112.372 cv
@
ODKZEB+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
399.039 106.677 mo
(0)sh
.3985 lw
0 lc
0 lj
372.43 120.275 mo
427.907 136.129 li
@
427.194 134.265 mo
427.125 134.868 427.934 136.033 428.194 136.211 cv
427.879 136.225 426.577 136.786 426.317 137.335 cv
.31879 lw
1 lc
1 lj
gsave
[.96297 .27518 .27518 -.96297 427.907 136.129 ]ct
@
grestore newpath
ODKZEB+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
396.857 124.164 mo
(-1)
[2.82303 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/ODKZEA+CMMI8*1 uf
/ODKZEA+CMMI8 uf
/EDKAAA+CMMI8 uf
/ODKZDZ+CMSS12*1 uf
/ODKZDZ+CMSS12 uf
/ZAAAAA+CMSS12 uf
/ODKZEC+CMTT12*1 uf
/ODKZEC+CMTT12 uf
/BKLBAA+CMTT12 uf
/ODKZEB+CMR8*1 uf
/ODKZEB+CMR8 uf
/JUHBAA+CMR8 uf
/ODKZDY+CMR12*1 uf
/ODKZDY+CMR12 uf
/XJDAAA+CMR12 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 0 955 a FA(FIG.)43 b(4.)77 b(Exp)s(erimen)m(tal)42
b(setup)g(of)h(a)f(con\014guration)h(of)f(quan)m(tum)g(observ)-5
b(ables)43 b(rendering)e(random)g(bits)0 1136 y(certi\014ed)31
b(b)m(y)f(quan)m(tum)g(v)-5 b(alue)31 b(inde\014niteness.)p
0 TeXcolorgray 0 1590 a Fy(the)44 b(sequence)i Fi(x)d
Fy(pro)s(duced)h(in)f(suc)m(h)i(a)e(manner)h(and)f(sho)m(w)h(that,)i
(under)e(our)f(assumptions,)48 b(it)43 b(is)0 1764 y(guaran)m(teed)34
b(to)f(b)s(e)g Fw(inc)-5 b(omputable)p Fy(.)44 b(Note)34
b(that)e(w)m(e)j(are)e(using)h(the)f(Measuremen)m(t)j(assumption)e
(here,)0 1939 y(since)23 b(w)m(e)g(m)m(ust)g(assume)g(that)f
Fi(x)f Fy(is)i(actually)f(pro)s(duced)h(\(not)e(that,)j(for)d(example,)
26 b(all)21 b(in\014nite)i(sequences)0 2113 y(are)33
b(generated)g(in)g(di\013eren)m(t)h(univ)m(erses\).)0
2337 y(Before)e(presen)m(ting)h(our)f(argumen)m(t)g(w)m(e)g(note)g
(that)g(Martin-L\177)-49 b(of)7 b('s)31 b(theorem)h(in)g(algorithmic)g
(informa-)0 2511 y(tion)k(theory)h([36])f(sho)m(ws)i(that)e
Fw(ther)-5 b(e)38 b(ar)-5 b(e)38 b(no)g(pur)-5 b(e,)39
b(true)g(or)f(p)-5 b(erfe)g(ct)38 b(r)-5 b(andom)38 b(se)-5
b(quenc)g(es)p Fy(:)49 b(there)37 b(are)0 2686 y(patterns)h(in)g(ev)m
(ery)i(sequence,)i(a)37 b(deterministic)j(pro)m(v)-5
b(able)38 b(fact)g(whic)m(h)h(is)f(m)m(uc)m(h)h(stronger)f(than)g(the)0
2860 y(t)m(ypical)g(highly)f(probable)h(results)g(\(facts)f(true)g
(with)g(probabilit)m(y)h(one\))f(pro)m(v)m(ed)h(in)f(probabilit)m(y)g
(the-)0 3034 y(ory)-8 b(.)47 b(As)34 b(w)m(e)h(cannot)f(sp)s(eak)h(ab)s
(out)e(pure,)i(true)f(or)g(p)s(erfect)g(randomness)h(w)m(e)g(ha)m(v)m
(e)g(no)f(option)g(but)g(to)0 3209 y(study)d(degrees)h(and)e(symptoms)i
(of)e(randomness:)44 b(some)31 b(sequences)i(are)e(more)f(random)g
(than)h(others.)0 3383 y(Uniform)g(distribution)g(within)g(a)f
(sequence)j(\(Borel)e(normalit)m(y)g([37]\))f(is)h(a)f(symptom)i(of)e
(randomness:)0 3557 y(ho)m(w)m(ev)m(er,)45 b(there)d(exist)g
(computable)g(uniformly)g(distributed)g(sequences,)k(e.g.)41
b(Champ)s(erno)m(wne)i(se-)0 3732 y(quence)f([36])e(whic)m(h)i(are)e
(far)g(from)g(b)s(eing)h(random)f(in)h(an)m(y)f(meaningful)i(w)m(a)m(y)
-8 b(.)67 b(Unpredictabilit)m(y)43 b(is)0 3906 y(another)29
b(symptom;)i(\(strong\))e(incomputabilit)m(y)i(is)e(one)g(mathematical)
h(w)m(a)m(y)g(to)e(express)j(it.)42 b(Uniform)0 4081
y(distribution)i(and)g(unpredictabilit)m(y)h(are)f(indep)s(enden)m(t;)
51 b(while)44 b(the)g(lac)m(k)g(of)f(uniform)g(distribution)0
4255 y(can)37 b(b)s(e)h(easily)g(mitigated)g(b)m(y)g(pro)s(cedures)g
(\022)-49 b(a)37 b(la)g(v)m(on)h(Neumann)g([38],)g(transforming)f(a)g
(computable)0 4429 y(sequence)e(in)m(to)e(an)g(incomputable)h(one)e(is)
h(a)g(m)m(uc)m(h)h(more)f(di\016cult)g(problem.)0 4653
y(Quan)m(tum)46 b(randomness)h(is)e(usually)i(quali\014ed)f(in)g(terms)
g(of)e(the)i(probabilit)m(y)g(distribution)g(of)f(the)0
4828 y(source.)80 b(This)45 b(only)g(allo)m(ws)g(for)f(probabilistic)i
(claims)f(ab)s(out)f(the)h(outcomes)g(of)f(individual)h(mea-)0
5002 y(suremen)m(ts.)84 b(F)-8 b(or)44 b(example,)50
b(with)c(probabilit)m(y)g(one)g(an)m(y)g(sequence)h(of)e(quan)m(tum)i
(random)e(bits)h(is)0 5176 y(incomputable;)51 b(suc)m(h)46
b(a)e(statemen)m(t)i(is)e(w)m(eak)m(er)i(than)e(sa)m(ying)i(that)e(the)
g(sequence)j(is)e(pro)m(v)-5 b(ably)45 b(in-)0 5351 y(computable.)64
b(Nev)m(ertheless,)44 b(claims)d(made)e(in)h(di\013eren)m(t)g
(articles,)i(ev)m(en)e(recen)m(t)h(ones)f(lik)m(e)g([30,)f(39)o(])0
5525 y(or)34 b(w)m(ebsites)i([40,)e(41],)g(according)g(to)g(whic)m(h)i
(\\p)s(erfect)e(randomness)i(can)e(b)s(e)g(obtained)h(via)f(quan)m(tum)
p 0 TeXcolorgray 1845 5774 a(20)p 0 TeXcolorgray eop
end
%%Page: 21 21
TeXDict begin 21 20 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fy(exp)s(erimen)m(ts",)38 b(are)c(only)h(of)f
(this)i(statistical)f(nature.)50 b(Here)35 b(w)m(e)h(are)f(able)g(to)f
(pro)m(v)m(e)i(the)f(guaran)m(teed)0 257 y(incomputabilit)m(y)c(of)d
(quan)m(tum)i(randomness;)h(but,)f(due)f(to)f(Martin-L\177)-49
b(of)7 b('s)29 b(theorem,)h(ev)m(en)g(this)f(result)0
432 y(cannot)k(b)s(e)g(called)g(\\p)s(erfect)g(randomness".)0
656 y(F)-8 b(or)30 b(the)i(sak)m(e)h(of)e(con)m(tradiction)h(let)f(us)h
(assume)h(that)e Fi(x)g Fy(as)h(describ)s(ed)h(ab)s(o)m(v)m(e)f(is)g
(computable.)44 b(Then,)0 830 y(b)m(y)36 b(de\014nition,)h(there)f(m)m
(ust)g(exist)g(a)f(T)-8 b(uring)36 b(mac)m(hine)g Fn(T)49
b Fy(\(and)35 b(th)m(us)h(a)f(computable)h(function\))g(that)0
1005 y(can)42 b(b)s(e)g(asso)s(ciated)g(with)g Fi(x)g
Fy(allo)m(wing)g(us)g(to)f(predict)h(with)h(certain)m(t)m(y)g(ev)m(ery)
g(v)-5 b(alue)42 b Fn(x)3359 1020 y Fp(i)3388 1005 y
Fy(.)70 b(F)-8 b(rom)41 b(the)0 1179 y(e.p.r.)h(assumption,)30
b(it)e(follo)m(ws)g(that)g(eac)m(h)g(observ)-5 b(able)29
b Fn(o)2143 1194 y Fp(i)2198 1179 y Fy(is)f(v)-5 b(alue)28
b(de\014nite)h(and)f Fn(v)3112 1194 y Fp(i)3140 1179
y Fy(\()p Fn(o)3225 1194 y Fp(i)3253 1179 y Fn(;)17 b(C)7
b Fy(\))27 b(=)h Fn(x)3598 1194 y Fp(i)3626 1179 y Fy(.)42
b(This)0 1353 y(con)m(tradicts)29 b(the)e(implications)i(of)e
(Corollary)h(3.)41 b(Th)m(us)29 b(w)m(e)f(conclude)h(that)e
Fi(x)h Fy(m)m(ust)g(b)s(e)g(incomputable.)0 1577 y(This)45
b(pro)s(of)f(can)g(easily)h(sho)m(w)h(the)e(stronger)h(claim:)67
b(that)44 b Fi(x)g Fy(is)h Fw(bi-immune)p Fy(,)h(that)e(is,)j(no)d
(in\014nite)0 1752 y(sub-sequence)d(of)c Fi(x)h Fy(is)g(computable.)60
b(This)38 b(can)g(easily)h(b)m(y)g(seen)g(b)m(y)f(the)g(same)h(argumen)
m(t:)54 b(if)38 b(there)0 1926 y(w)m(as)28 b(a)f(computable)h
(subsequence)j(then)d(w)m(e)g(could)g(assign)g(de\014nite)h(v)-5
b(alues)28 b(to)f(the)g(observ)-5 b(ables)29 b(giving)0
2100 y(rise)k(to)g(this)g(subsequence,)j(con)m(tradicting)e(our)e
(assumption)i(of)e(v)-5 b(alue)33 b(inde\014niteness)j(ev)m(erywhere.)0
2325 y(W)-8 b(e)33 b(ha)m(v)m(e)h(pro)m(v)m(ed:)0 2723
y(Assume)41 b(Non-con)m(textualit)m(y)-8 b(,)43 b(Measuremen)m(t,)g
(Eigenstate)e(and)e(e.p.r.)65 b(assumptions.)g(Then)41
b(there)0 2897 y(exits)34 b(a)e(QRNG)g(whic)m(h)i(generates)g(a)e
(bi-imm)m(une)i(binary)f(sequence.)0 3122 y(W)-8 b(e)26
b(further)h(note)f(that)g(this)h(result)g(is)f(more)h(general)f(than)g
(that)g(pro)m(v)m(ed)h(in)g([42)o(])f(and)h(do)s(es)f(not)g(require)0
3296 y(an)m(y)33 b(assumption)h(ab)s(out)e(the)h(uniformit)m(y)h(of)e
(the)h(bits)g(pro)s(duced.)0 4436 y Fr(C.)104 b(Exp)s(erimen)m(tal)35
b(robustness)0 4778 y Fy(Before)29 b(w)m(e)h(pro)s(ceed)g(to)f(describ)
s(e)h(an)f(explicit)i(realisation)e(of)g(the)g(QRNG)g(describ)s(ed)i
(ab)s(o)m(v)m(e,)f(w)m(e)g(wish)0 4952 y(to)22 b(brie\015y)h(mak)m(e)h
(a)d(couple)j(of)d(p)s(oin)m(ts)i(on)f(the)h(robustness)h(of)e(this)g
(certi\014cation)i(b)m(y)f(v)-5 b(alue)22 b(inde\014niteness)0
5127 y(to)32 b(exp)s(erimen)m(tal)j(imp)s(erfections.)0
5351 y(W)-8 b(e)42 b(can)f(describ)s(e)i(the)e(measuremen)m(t)j(con)m
(text)e(more)g(generally)g(b)m(y)g(the)f(spin)h(observ)-5
b(able)43 b Ff(S)p Fy(\()p Fn(\022)s(;)17 b(\036)p Fy(\),)0
5525 y(where)46 b Fn(\022)h Fy(and)e Fn(\036)f Fy(are)g(the)h(p)s(olar)
f(and)g(azim)m(uthal)h(angles)g(resp)s(ectiv)m(ely)-8
b(,)51 b(and)44 b(w)m(e)i(th)m(us)f(ha)m(v)m(e)h Ff(S)3718
5540 y Fp(x)3810 5525 y Fy(=)p 0 TeXcolorgray 1845 5774
a(21)p 0 TeXcolorgray eop end
%%Page: 22 22
TeXDict begin 22 21 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Ff(S)p Fy(\()p Fn(\031)t(=)p Fy(2)p
Fn(;)17 b Fy(0\))32 b(and)g Ff(S)655 98 y Fp(z)723 83
y Fy(=)27 b Ff(S)q Fy(\(0)p Fn(;)17 b Fy(0\).)42 b(Explicitly)-8
b(,)35 b(this)e(op)s(erator)f(is)h(represen)m(ted)i(in)e(matrix)g(form)
f(as)1049 613 y Ff(S)q Fy(\()p Fn(\022)s(;)17 b(\036)p
Fy(\))27 b(=)1460 323 y Fl(0)1460 499 y(B)1460 558 y(B)1460
618 y(B)1460 682 y(@)1597 449 y Fy(cos)q(\()p Fn(\022)s
Fy(\))1936 401 y Fp(e)1969 378 y Fe(\000)p Fd(i\036)2092
401 y Fm(sin\()p Fp(\022)r Fm(\))p 1936 426 333 4 v 2055
436 a Fx(p)p 2114 436 36 3 v 55 x Fm(2)2480 449 y Fy(0)1582
576 y Fp(e)1615 552 y Fd(i\036)1690 576 y Fm(sin\()p
Fp(\022)r Fm(\))p 1582 600 285 4 v 1677 610 a Fx(p)p
1736 610 36 3 v 55 x Fm(2)2078 623 y Fy(0)2338 576 y
Fp(e)2371 552 y Fe(\000)p Fd(i\036)2494 576 y Fm(sin\()p
Fp(\022)r Fm(\))p 2338 600 333 4 v 2457 610 a Fx(p)p
2516 610 36 3 v 55 x Fm(2)1700 797 y Fy(0)1960 750 y
Fp(e)1993 726 y Fd(i\036)2068 750 y Fm(sin\()p Fp(\022)r
Fm(\))p 1960 774 285 4 v 2055 784 a Fx(p)p 2114 784 36
3 v 55 x Fm(2)2330 797 y Fo(\000)17 b Fy(cos)q(\()p Fn(\022)s
Fy(\))2705 323 y Fl(1)2705 499 y(C)2705 558 y(C)2705
618 y(C)2705 682 y(A)2809 613 y Fn(:)925 b Fy(\(1\))0
1138 y(Misalignmen)m(t)45 b(and)d(imp)s(erfection)i(in)f(the)g(exp)s
(erimen)m(tal)h(setup)g(will,)i(in)d(general,)j(lead)c(to)h(angles)0
1312 y Fn(\022)g Fy(and)d Fn(\036)f Fy(di\013ering)h(sligh)m(tly)h
(from)f Fn(\031)t(=)p Fy(2)f(and)g(0)h(resp)s(ectiv)m(ely)-8
b(.)68 b(While)40 b(a)g(c)m(hange)g(in)g Fn(\036)f Fy(only)i(induces)0
1486 y(a)d(phase-shift)i(and)f(do)s(es)g(not)g(alter)g(the)g
(probabilit)m(y)g(of)g(measuring)g(an)m(y)h(particular)f(eigen)m(v)-5
b(alue,)42 b(a)0 1661 y(c)m(hange)37 b(in)e Fn(\022)k
Fy(will)e(alter)e(the)i(probabilities)f(of)g(detection.)54
b(Ho)m(w)m(ev)m(er,)38 b(a)e(detailed)g(calculation)h(sho)m(ws)0
1835 y(that)1195 2113 y Fo(jh)p Ff(S)1316 2128 y Fp(z)1383
2113 y Fy(=)28 b(0)p Fo(j)p Ff(S)o Fy(\()p Fn(\022)s(;)17
b(\036)p Fy(\))28 b(=)f Fo(\006)p Fy(1)p Fo(ij)g Fy(=)h(sin)17
b Fn(\022)s(=)2531 2025 y Fo(p)p 2614 2025 49 4 v 88
x Fy(2)p Fn(;)1071 b Fy(\(2\))0 2462 y(and)42 b(the)h(di\013erence)g
(in)g(probabilities)g(of)e(measuring)i(a)f(bit)g(as)h(0)e(or)h(1)g(is)g
(not)g(a\013ected)h(b)m(y)g(suc)m(h)h(a)0 2636 y(c)m(hange)36
b(in)f Fn(\022)s Fy(.)52 b(This)36 b(is)f(in)h(distinct)g(con)m(trast)g
(to)f(setups)h(based)g(on)f(single)h(b)s(eam-splitters,)i(in)d(whic)m
(h)0 2810 y(misalignmen)m(t)f(in)m(tro)s(duces)g(bias)f(in)m(to)g(the)g
(distribution)h(of)e(bits.)0 3034 y(F)-8 b(rom)34 b(Corollary)g(3,)h(w)
m(e)g(see)h(that)e(the)h(QRNG)e(will)i(pro)m(vide)h(bits)f(b)m(y)g
(measuremen)m(t)i(of)d Ff(S)p Fy(\()p Fn(\022)s(;)17
b(\036)p Fy(\))34 b(that)0 3209 y(are)k(certi\014ed)h(b)m(y)f(v)-5
b(alue)38 b(inde\014niteness)j(whenev)m(er)1985 3095
y Fl(q)p 2085 3095 91 4 v 2112 3170 a Fm(5)p 2095 3186
71 4 v 2095 3243 a(14)2211 3209 y Fo(\024)c(jh)p Ff(S)2446
3224 y Fp(z)2522 3209 y Fy(=)f(0)p Fo(j)p Ff(S)p Fy(\()p
Fn(\022)s(;)17 b(\036)p Fy(\))35 b(=)i Fo(\006)p Fy(1)p
Fo(ij)e(\024)3538 3170 y Fm(3)p 3491 3186 130 4 v 3491
3196 a Fx(p)p 3550 3196 71 3 v 55 x Fm(14)3631 3190 y
Fy(.)3695 3209 y(This)0 3383 y(inequalit)m(y)f(is,)f(from)f(equation)g
(\(2\),)g(readily)h(seen)g(to)f(b)s(e)g(satis\014ed)i(for)d(angles)2998
3344 y Fp(\031)p 2998 3360 43 4 v 3002 3418 a Fm(3)3078
3383 y Fo(\024)e Fn(\022)h Fo(\024)3375 3344 y Fm(2)p
Fp(\031)p 3375 3360 79 4 v 3396 3418 a Fm(3)3463 3364
y Fy(.)3522 3383 y(This)j(has)0 3557 y(the)25 b(imp)s(ortan)m(t)h
(consequence)i(of)c(protecting)i(against)f(inevitable)h(exp)s(erimen)m
(tal)h(misalignmen)m(t:)42 b(ev)m(en)0 3732 y(in)35 b(the)h(presence)h
(of)d(relativ)m(ely)j(signi\014can)m(t)g(misalignmen)m(t,)g(the)f
(device)h(w)m(ould)e(pro)s(duce)h(bits)g(whic)m(h)0 3906
y(are)j(certi\014ed)h(b)m(y)g(v)-5 b(alue)39 b(inde\014niteness.)65
b(Otherwise,)43 b(if)38 b(the)i(certi\014cation)f(only)h(held)f(for)g
(the)g(ideal)0 4081 y(case)e(of)334 4041 y Fp(\031)p
334 4058 43 4 v 338 4115 a Fm(2)387 4062 y Fy(,)450 4081
y(an)m(y)f(exp)s(erimen)m(tal)i(imp)s(erfections)f(w)m(ould)g(render)f
(this)h(theoretical)f(result)h(inapplicable)0 4255 y(to)32
b(an)m(y)h(real)g(exp)s(erimen)m(t.)0 4479 y(F)-8 b(urthermore,)25
b(calculation)e(sho)m(ws)g(that)f Fo(h)p Ff(S)1630 4494
y Fp(z)1698 4479 y Fy(=)27 b(0)p Fo(j)p Ff(S)p Fy(\()p
Fn(\022)s(;)17 b(\036)p Fy(\))27 b(=)h(0)p Fo(i)f Fy(=)g(cos)17
b Fn(\022)s Fy(,)25 b(and)d(since)i Fo(h)p Ff(S)3255
4494 y Fp(z)3322 4479 y Fy(=)k(0)p Fo(j)p Ff(S)o Fy(\()p
Fn(\022)s(;)17 b(\036)p Fy(\))28 b(=)0 4653 y(0)p Fo(i)f
Fy(=)h(0)i(only)i(when)f Fn(\022)g Fy(=)953 4614 y Fp(\031)p
953 4630 V 957 4688 a Fm(2)1006 4634 y Fy(,)1063 4653
y(a)g(third)g(detector)h(measuring)f(the)h Fo(j)o Ff(S)q
Fy(\()p Fn(\022)s(;)17 b(\036)p Fy(\))27 b(=)g(0)p Fo(i)k
Fy(outcome)g(could)g(b)s(e)g(em-)0 4828 y(plo)m(y)m(ed)25
b(to)e(monitor)g(the)h(degree)g(of)f(misalignmen)m(t)i(presen)m(t)g(in)
e(the)h(system.)43 b(The)24 b(n)m(um)m(b)s(er)g(of)f(coun)m(ts)i(at)0
5002 y(this)k(detector)g(w)m(ould)g(allo)m(w)f(quan)m(ti\014cation)i
(of)d(the)i(angle)f Fn(\022)s Fy(,)h(and)f(pro)m(vide)i(an)e(exp)s
(erimen)m(tal)i(metho)s(d)0 5176 y(to)36 b(test)h(that)f(the)g
(condition)h(of)1250 5062 y Fl(q)p 1350 5062 91 4 v 1377
5137 a Fm(5)p 1360 5154 71 4 v 1360 5211 a(14)1474 5176
y Fo(\024)d(h)p Ff(S)1678 5191 y Fp(z)1752 5176 y Fy(=)g(0)p
Fo(j)p Ff(S)o Fy(\()p Fn(\022)s(;)17 b(\036)p Fy(\))34
b(=)f Fo(\006)p Fy(1)p Fo(i)h(\024)2729 5137 y Fm(3)p
2682 5154 130 4 v 2682 5163 a Fx(p)p 2741 5163 71 3 v
55 x Fm(14)2857 5176 y Fy(is)j(indeed)h(b)s(eing)e(realised.)0
5351 y(Without)j(monitoring)g(this)h(third)g(outcome,)h(one)e(could)h
(not)f(determine)i(from)d(the)i Fo(j)p Ff(S)p Fy(\()p
Fn(\022)s(;)17 b(\036)p Fy(\))27 b(=)g Fo(\006)p Fy(1)p
Fo(i)0 5525 y Fy(coun)m(ts)34 b(alone)e(if)h(this)g(is)g(indeed)h(the)f
(case.)p 0 TeXcolorgray 1845 5774 a(22)p 0 TeXcolorgray
eop end
%%Page: 23 23
TeXDict begin 23 22 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fr(V.)105 b(GENERALISED)40 b(BEAM-SPLITTER)g
(QUANTUM)h(RANDOM)g(NUMBER)h(GEN-)0 264 y(ERA)-9 b(TOR)0
606 y Fy(In)42 b(this)f(section)i(w)m(e)f(describ)s(e)h(a)e(ph)m
(ysical)i(realisation)f(of)f(the)g(QRNG)g(describ)s(ed)i(in)e(the)h
(previous)0 780 y(section.)i(Since)33 b(it)f(is)g(not)g(particularly)h
(feasible)g(to)e(directly)i(use)g(spin-1)f(particles)h(in)f(a)g(QRNG)f
(with)0 955 y(an)25 b(acceptably)h(high)f(bit-rate,)h(the)f
(realisation)g(w)m(e)h(presen)m(t)g(uses)h(photons)e(and)g(is)g
(expressed)i(in)e(terms)0 1129 y(of)g(generalised)i(b)s(eam-splitters)g
([43{45)o(].)41 b(Generalised)27 b(b)s(eam-splitters)g(are)f(based)g
(on)g(the)g(p)s(ossibilit)m(y)0 1303 y(to)31 b(\(de\)comp)s(ose)j(an)d
(arbitrary)h(unitary)g(transformation)g Ff(U)2306 1318
y Fp(n)2385 1303 y Fy(in)g Fn(n)p Fy(-dimensional)h(Hilb)s(ert)f(space)
h(in)m(to)0 1478 y(t)m(w)m(o-dimensional)d(transformations)f
Ff(U)1483 1493 y Fm(2)1550 1478 y Fy(of)f(t)m(w)m(o-dimensional)j
(subspaces)g(thereof;)f(a)e(p)s(ossibilit)m(y)j(that)0
1652 y(can)k(b)s(e)g(used)h(to)f(parameterize)h Ff(U)1312
1667 y Fp(n)1393 1652 y Fy([46].)51 b(In)35 b(more)g(ph)m(ysical)i
(terms,)f(they)g(amoun)m(t)f(to)g(serial)h(stac)m(ks)0
1826 y(of)47 b(phase)i(shifters)g(and)f(b)s(eam-splitters)h(in)f(the)g
(form)f(of)h(an)f(in)m(terferometer)j(with)e Fn(n)g Fy(input)g(and)0
2001 y(output)35 b(p)s(orts,b)s(eam-splitter)h(suc)m(h)h(that)e(the)h
(b)s(eam-splitters)g(a\013ect)f(only)h(t)m(w)m(o)g(\(sub-\)paths)g
(whic)m(h,)0 2175 y(together)23 b(with)g(the)g(phase)h(shifters)g
(\(a\013ecting)e(single)i(paths)f(at)f(an)m(y)i(one)f(time\),)i
(realise)e(the)h(asso)s(ciated)0 2349 y(transformations)43
b(in)h Fn(U)10 b Fy(\(2\).)75 b(These)45 b(comp)s(onen)m(ts)g(can)e(b)s
(e)h(con)m(v)m(enien)m(tly)i(arranged)d(in)m(to)g(\\triangle)0
2524 y(form")32 b(with)h Fn(n)g Fy(in-)f(and)h(out-b)s(ound)f(b)s(eam)h
(paths.)0 2748 y(F)-8 b(or)29 b(the)h(sak)m(e)h(of)f(an)f(explicit)j
(demonstration,)f(consider)g(an)f(orthonormal)g(cartesian)g(standard)g
(basis)0 2922 y Fo(j)p Fy(1)p Fo(i)39 b(\021)h Fy(\(1)p
Fn(;)17 b Fy(0)p Fn(;)g Fy(0\),)40 b Fo(j)p Fy(0)p Fo(i)e(\021)i
Fy(\(0)p Fn(;)17 b Fy(1)p Fn(;)g Fy(0\),)40 b(and)g Fo(j)27
b(\000)g Fy(1)p Fo(i)39 b(\021)h Fy(\(0)p Fn(;)17 b Fy(0)p
Fn(;)g Fy(1\).)63 b(Then,)42 b(in)e(order)g(to)f(realise)i(observ)-5
b(ables)0 3097 y(suc)m(h)32 b(as)f(the)g(spin)h(state)f(observ)-5
b(ables)32 b Fn(S)6 b Fy(\()p Fn(\022)s(;)17 b(\036)p
Fy(\))30 b(and,)h(in)g(particular,)g(spin)h(states)g(measured)g(along)e
(the)0 3271 y Fn(x)p Fy(-axis;)j(that)g(is,)g(for)f Fn(\022)f
Fy(=)988 3232 y Fp(\031)p 988 3248 43 4 v 992 3305 a
Fm(2)1074 3271 y Fy(and)h Fn(\036)c Fy(=)f(0,)1249 3804
y Ff(S)1303 3819 y Fp(x)1375 3804 y Fy(=)g Ff(S)1549
3694 y Fl(\020)1619 3737 y Fn(\031)p 1619 3782 59 4 v
1624 3873 a Fy(2)1687 3804 y Fn(;)17 b Fy(0)1780 3694
y Fl(\021)1867 3804 y Fy(=)1971 3515 y Fl(0)1971 3690
y(B)1971 3750 y(B)1971 3809 y(B)1971 3873 y(@)2115 3640
y Fy(0)2286 3601 y Fm(1)p 2256 3617 95 4 v 2256 3627
a Fx(p)p 2315 3627 36 3 v 55 x Fm(2)2443 3640 y Fy(0)2122
3775 y Fm(1)p 2093 3791 95 4 v 2093 3801 a Fx(p)p 2151
3801 36 3 v 2151 3856 a Fm(2)2279 3814 y Fy(0)2450 3775
y Fm(1)p 2420 3791 95 4 v 2420 3801 a Fx(p)p 2479 3801
36 3 v 55 x Fm(2)2115 3989 y Fy(0)2286 3950 y Fm(1)p
2256 3966 95 4 v 2256 3976 a Fx(p)p 2315 3976 36 3 v
55 x Fm(2)2443 3989 y Fy(0)2549 3515 y Fl(1)2549 3690
y(C)2549 3750 y(C)2549 3809 y(C)2549 3873 y(A)3761 3804
y Fy(\(3\))0 4323 y(in)33 b(terms)g(of)f(generalised)j(b)s
(eam-splitters,)f(the)f(asso)s(ciated)g(normalised)h(ro)m(w)f(eigen)m
(v)m(ectors)1411 4670 y Fo(j)p Ff(S)1493 4685 y Fp(x)1564
4670 y Fy(:)28 b(+1)p Fo(i)f(\021)1925 4631 y Fm(1)p
1925 4647 36 4 v 1925 4704 a(2)1987 4589 y Fl(\000)2033
4670 y Fy(1)p Fn(;)2126 4587 y Fo(p)p 2208 4587 49 4
v 2208 4670 a Fy(2)p Fn(;)17 b Fy(1)2350 4589 y Fl(\001)2412
4670 y Fn(;)1411 4844 y Fo(j)p Ff(S)1493 4859 y Fp(x)1564
4844 y Fy(:)28 b(0)p Fo(i)f(\021)1879 4805 y Fm(1)p 1850
4821 95 4 v 1850 4831 a Fx(p)p 1908 4831 36 3 v 1908
4886 a Fm(2)1970 4844 y Fy(\(1)p Fn(;)17 b Fy(0)p Fn(;)g
Fo(\000)p Fy(1\))f Fn(;)1411 5018 y Fo(j)p Ff(S)1493
5033 y Fp(x)1564 5018 y Fy(:)28 b Fo(\000)p Fy(1)p Fo(i)g(\021)1927
4979 y Fm(1)p 1927 4996 36 4 v 1927 5053 a(2)1989 4938
y Fl(\000)2035 5018 y Fy(1)p Fn(;)17 b Fo(\000)2205 4936
y(p)p 2288 4936 49 4 v 82 x Fy(2)o Fn(;)g Fy(1)2429 4938
y Fl(\001)3761 4834 y Fy(\(4\))0 5351 y(ha)m(v)m(e)31
b(to)e(b)s(e)h(\\stac)m(k)m(ed")h(on)f(top)g(of)f(one)h(another)f
([43],)h(thereb)m(y)i(forming)d(a)h(unitary)g(matrix)g
Ff(U)3565 5366 y Fp(x)3639 5351 y Fy(whic)m(h)0 5525
y(corresp)s(onds)e(to)e(the)g(spin)i(state)e(op)s(erator)g
Ff(S)1677 5540 y Fp(x)1747 5525 y Fy(for)g(spin)h(state)g(measuremen)m
(ts)i(along)d(the)h Fn(x)p Fy(-axis;)i(more)p 0 TeXcolorgray
1845 5774 a(23)p 0 TeXcolorgray eop end
%%Page: 24 24
TeXDict begin 24 23 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fy(explicitly)-8 b(,)1320 405 y
Ff(U)1387 420 y Fp(x)1458 405 y Fy(=)1572 337 y(1)p 1572
382 49 4 v 1572 473 a(2)1647 115 y Fl(0)1647 290 y(B)1647
350 y(B)1647 410 y(B)1647 473 y(@)1801 240 y Fy(1)1980
158 y Fo(p)p 2063 158 V 82 x Fy(2)168 b(1)1759 332 y
Fo(p)p 1842 332 V 83 x Fy(2)130 b(0)g Fo(\000)2277 332
y(p)p 2360 332 V 83 x Fy(2)1801 589 y(1)91 b Fo(\000)2018
506 y(p)p 2101 506 V 83 x Fy(2)130 b(1)2434 115 y Fl(1)2434
290 y(C)2434 350 y(C)2434 410 y(C)2434 473 y(A)2538 405
y Fn(:)1196 b Fy(\(5\))0 829 y(While)33 b(man)m(y)f(v)-5
b(ariations)32 b(on)g(the)g(unitary)g(matrix)h(to)e(represen)m(t)j(a)d
(b)s(eam-splitter)i(exist)g([43,)e(47{49)o(],)0 1003
y(without)40 b(loss)h(of)e(generalit)m(y)i(w)m(e)g(can)f(represen)m(t)h
(an)f(arbitrary)g Fn(U)10 b Fy(\(2\))39 b(matrix)i(realised)g(b)m(y)f
(a)g(b)s(eam-)0 1177 y(splitter)34 b(and)e(external)i(phase)f(shift)g
(as)1560 1293 y Fl(0)1560 1472 y(@)1666 1332 y Fo(p)p
1749 1332 71 4 v 84 x Fn(T)82 b(ie)1966 1380 y Fp(i\036)2037
1332 y Fo(p)p 2120 1332 76 4 v 84 x Fn(R)1647 1590 y(i)1680
1506 y Fo(p)p 1763 1506 V 84 x Fn(R)70 b(e)1952 1554
y Fp(i\036)2022 1506 y Fo(p)p 2105 1506 71 4 v 84 x Fn(T)2195
1293 y Fl(1)2195 1472 y(A)2299 1493 y Fn(;)1435 b Fy(\(6\))0
1809 y(where)43 b Fn(\036)f Fy(represen)m(ts)i(the)e(phase)h(of)f(an)f
(external)i(phase)g(shifter)g(on)f(the)g(second)h(input)f(p)s(ort,)i
(and)0 1983 y Fn(T)8 b(;)17 b(R)40 b Fo(2)f Fy([0)p Fn(;)17
b Fy(1])39 b(are)g(the)g(transmittance)h(and)g(re\015ectance)h(of)d
(the)i(b)s(eam-splitter)g(resp)s(ectiv)m(ely)i(\(with)0
2158 y Fn(R)23 b Fy(+)e Fn(T)41 b Fy(=)28 b(1\).)43 b(The)33
b(b)s(eam-splitter)g(arrangemen)m(t)g(to)f(realise)i
Ff(U)2402 2173 y Fp(x)2478 2158 y Fy(can)f(b)s(e)f(found)h(b)m(y)g
(transforming)f Ff(U)3842 2173 y Fp(x)0 2332 y Fy(in)m(to)e(the)g(iden)
m(tit)m(y)h(matrix)f Fn(I)1074 2347 y Fm(3)1143 2332
y Fy(b)m(y)g(successiv)m(e)j(righ)m(t-m)m(ultiplication)e(b)m(y)f
(adjoin)m(ts)g(of)f Fn(U)10 b Fy(\(2\))30 b(matrices)h(of)0
2506 y(the)c(ab)s(o)m(v)m(e)g(form|eac)m(h)f(one)g(making)h(an)f
(individual)i(o\013-diagonal)d(elemen)m(t)j(equal)f(to)e(zero|follo)m
(w)m(ed)0 2681 y(b)m(y)33 b(a)g(\014nal)g(set)g(of)f(phase)h(shifters)h
([43].)0 2905 y(In)f(our)f(sp)s(eci\014c)j(case,)e(w)m(e)h(ha)m(v)m(e)
264 3022 y Fl(0)264 3197 y(B)264 3257 y(B)264 3317 y(B)264
3381 y(@)351 3148 y Fy(1)80 b(0)112 b(0)351 3322 y(0)49
b Fo(\000)p Fn(i)82 b Fy(0)351 3496 y(0)e(0)h Fo(\000)p
Fn(i)721 3022 y Fl(1)721 3197 y(C)721 3257 y(C)721 3317
y(C)721 3381 y(A)830 3312 y Fo(\001)880 3022 y Fl(0)880
3197 y(B)880 3257 y(B)880 3317 y(B)880 3381 y(@)984 3025
y(q)p 1083 3025 56 4 v 1093 3099 a Fm(1)p 1093 3116 36
4 v 1093 3173 a(3)1260 3025 y Fl(q)p 1360 3025 56 4 v
1370 3099 a Fm(2)p 1370 3116 36 4 v 1370 3173 a(3)1520
3139 y Fy(0)967 3322 y Fn(i)1000 3208 y Fl(q)p 1100 3208
56 4 v 1110 3283 a Fm(2)p 1110 3299 36 4 v 1110 3356
a(3)1205 3322 y Fo(\000)p Fn(i)1315 3208 y Fl(q)p 1415
3208 56 4 v 1425 3283 a Fm(1)p 1425 3299 36 4 v 1425
3356 a(3)1520 3322 y Fy(0)1037 3505 y(0)227 b(0)158 b(1)1569
3022 y Fl(1)1569 3197 y(C)1569 3257 y(C)1569 3317 y(C)1569
3381 y(A)1678 3312 y Fo(\001)1728 3022 y Fl(0)1728 3197
y(B)1728 3257 y(B)1728 3317 y(B)1728 3381 y(@)1832 3025
y(q)p 1932 3025 56 4 v 1942 3099 a Fm(3)p 1942 3116 36
4 v 1942 3173 a(4)2053 3139 y Fy(0)50 b Fo(\000)p Fn(i)2262
3025 y Fl(q)p 2362 3025 56 4 v 2372 3099 a Fm(1)p 2372
3116 36 4 v 2372 3173 a(3)1885 3322 y Fy(0)119 b(1)158
b(0)1815 3496 y Fn(i)1848 3382 y Fl(q)p 1948 3382 56
4 v 1958 3457 a Fm(1)p 1958 3473 36 4 v 1958 3531 a(4)2053
3496 y Fy(0)67 b Fo(\000)2246 3382 y Fl(q)p 2346 3382
56 4 v 2356 3457 a Fm(3)p 2356 3473 36 4 v 2356 3531
a(4)2418 3022 y Fl(1)2418 3197 y(C)2418 3257 y(C)2418
3317 y(C)2418 3381 y(A)2527 3312 y Fo(\001)2577 3022
y Fl(0)2577 3197 y(B)2577 3257 y(B)2577 3317 y(B)2577
3381 y(@)2664 3139 y Fy(1)119 b(0)228 b(0)2664 3313 y(0)2779
3199 y Fl(q)p 2879 3199 56 4 v 2889 3274 a Fm(1)p 2889
3290 36 4 v 2889 3347 a(3)3056 3199 y Fl(q)p 3155 3199
56 4 v 3165 3274 a Fm(2)p 3165 3290 36 4 v 3165 3347
a(3)2664 3496 y Fy(0)49 b Fn(i)2795 3382 y Fl(q)p 2895
3382 56 4 v 2905 3457 a Fm(2)p 2905 3473 36 4 v 2905
3531 a(3)3000 3496 y Fo(\000)p Fn(i)3110 3382 y Fl(q)p
3211 3382 56 4 v 3221 3457 a Fm(1)p 3221 3473 36 4 v
3221 3531 a(3)3266 3022 y Fl(1)3266 3197 y(C)3266 3257
y(C)3266 3317 y(C)3266 3381 y(A)3381 3312 y Fy(=)27 b
Ff(U)3551 3327 y Fp(x)3595 3312 y Fn(:)139 b Fy(\(7\))0
3732 y(This)34 b(corresp)s(onds)g(to)e(three)i(b)s(eam-splitters)g
(with)f(transmittances)h Fn(T)2706 3747 y Fm(3)p Fp(;)p
Fm(2)2829 3732 y Fy(=)27 b Fn(T)2989 3747 y Fm(2)p Fp(;)p
Fm(1)3112 3732 y Fy(=)3225 3693 y Fm(1)p 3225 3709 V
3225 3766 a(3)3271 3732 y Fy(,)32 b Fn(T)3387 3747 y
Fm(3)p Fp(;)p Fm(1)3510 3732 y Fy(=)3623 3693 y Fm(3)p
3623 3709 V 3623 3766 a(4)3669 3732 y Fy(,)g(and)0 3906
y(phases)38 b Fn(\036)372 3921 y Fm(3)p Fp(;)p Fm(2)500
3906 y Fy(=)c Fn(\036)668 3921 y Fm(2)p Fp(;)p Fm(1)797
3906 y Fy(=)g Fo(\000)p Fn(\031)t(=)p Fy(2,)j Fn(\036)1263
3921 y Fm(3)p Fp(;)p Fm(1)1391 3906 y Fy(=)e Fn(\031)1561
3887 y Fy(,)1624 3906 y(where)j Fn(T)1967 3921 y Fp(i;j)2083
3906 y Fy(and)f Fn(\036)2335 3921 y Fp(i;j)2451 3906
y Fy(are)g(the)f(parameters)i(for)e(the)h(b)s(eam-)0
4081 y(splitter)29 b(op)s(erating)f(on)g(b)s(eams)g Fn(i)g
Fy(and)h Fn(j)k Fy(\(b)s(eams)c(1,2,3)f(corresp)s(ond)g(to)g
Ff(S)2735 4096 y Fp(z)2803 4081 y Fy(=)f(+1)p Fn(;)17
b Fy(0)p Fn(;)g Fo(\000)p Fy(1)27 b(resp)s(ectiv)m(ely\).)0
4255 y(Tw)m(o)k(\014nal)f(phase)h(shifts)g(of)f Fo(\000)p
Fn(\031)t(=)p Fy(2)g(are)g(needed)h(on)f(b)s(eams)h(2)f(and)g(3.)42
b(The)31 b(ph)m(ysical)h(realisation)f(of)e Ff(U)3842
4270 y Fp(x)0 4429 y Fy(is)k(depicted)h(in)f(Fig.)f(5.)0
4653 y(This)e(setup)g(is)f(equiv)-5 b(alen)m(t)31 b(to)d(the)h(spin-1)g
(setup)h(for)f(whic)m(h)h(w)m(e)g(are)f(guaran)m(teed)g(v)-5
b(alue)29 b(inde\014niteness)0 4828 y(under)d(the)f(conditions)h
(discussed)i(in)e(the)f(previous)i(section.)42 b(Ev)m(en)26
b(in)g(the)f(case)h(of)f(non-p)s(erfectly)h(con-)0 5002
y(\014gured)f(b)s(eam-splitters,)i(as)e(long)f(as)h(the)g(observ)-5
b(able)25 b(corresp)s(onding)h(to)e(the)h(unitary)g(transformation)0
5176 y(implemen)m(ted)32 b(b)m(y)e(the)g(b)s(eam-splitters)h(has)e
(eigenstates)i Fo(j)p Fn(a)d Fy(=)f Fo(\006)p Fy(1)p
Fo(i)j Fy(\(corresp)s(onding)g(to)f(output)g(p)s(orts)0
5351 y(1)34 b(and)g(3\))g(whic)m(h)i(fall)e(within)h(the)g(b)s(ounds)
1659 5237 y Fl(q)p 1758 5237 91 4 v 1786 5312 a Fm(5)p
1768 5328 71 4 v 1768 5385 a(14)1879 5351 y Fo(\024)c(h)p
Ff(S)2080 5366 y Fp(z)2151 5351 y Fy(=)f(0)p Fo(j)p Fn(a)g
Fy(=)h Fo(\006)p Fy(1)p Fo(i)f(\024)2882 5312 y Fm(3)p
2835 5328 130 4 v 2835 5338 a Fx(p)p 2894 5338 71 3 v
55 x Fm(14)3009 5351 y Fy(then)k(the)h(QRNG)f(will)0
5525 y(still)j(b)s(e)g(protected)h(b)m(y)f(v)-5 b(alue)37
b(inde\014niteness.)59 b(As)37 b(discussed)i(in)e(the)g(previous)h
(section,)h(this)e(allo)m(ws)p 0 TeXcolorgray 1845 5774
a(24)p 0 TeXcolorgray eop end
%%Page: 25 25
TeXDict begin 25 24 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
472 2050 a @beginspecial 82 @llx 447 @lly 435 @urx 693
@ury 3530 @rwi @setspecial
%%BeginDocument: 2012-incomput-proofs_PRA-Figure5.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 1.pdf
%%Creator: Adobe Acrobat 10.1.4
%%For: b
%%CreationDate: 29.11.2012, 22:48:59
%%BoundingBox: 82 447 435 693
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 759 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2012-11-29T22:48:22+01:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2012-11-29T22:48:22+01:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-2.4-1.40.13 (TeX Live 2012/W32TeX) kpathsea version 6.1.0"
   pdf:Producer="pdfTeX-1.40.13"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 5 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
.797 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
94.677 270.425 mo
94.677 100.346 li
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PGUBAA+LINE10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /PGUBAA+LINE10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name LINE10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /a0 put
def
/UniqueID 5011940 def
/FontBBox {-150 -150 1020 1020} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/StdHW [40] def
/StdVW [40] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/a0 <1C60D8A8C9B5EE318DE6ABBD5CD124D4C21B5B81CC760F1BC764A8D06E8
E387CA89B8DCAB217A1A8677C09DA35A9E9CCA9509FBE8A12523F80CA93AC3D1
C4A2DA63095399D> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZED+LINE10 /PGUBAA+LINE10 findfont ct_VMDictPut
/ODKZED+LINE10*1 
[32{/.notdef}rp /a0 223{/.notdef}rp]
ODKZED+LINE10 nf
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
94.677 128.693 mo
( )sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
96.053 127.318 mo
( )sh
%ADOBeginSubsetFont: PGUBAA+LINE10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZED+LINE10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a64 <1C60D8A8C9B5EE318DE6ABBD5CD124D4C21B5BE287E02868B8AAD08F8E
F862F75719A5B4B0BDEE08C02DCD52CAFDC2940857AD05199F546754E96B08E1
AD40FF06E692E0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZED+LINE10 /Encoding get
dup 64 /a64 put
pop
%ADOEndSubsetFont
/ODKZED+LINE10*1 
[32{/.notdef}rp /a0 31{/.notdef}rp /a64 191{/.notdef}rp]
ODKZED+LINE10 nf
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
84.714 128.693 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
83.338 127.318 mo
(@)sh
94.677 157.039 mo
151.37 157.039 li
@
94.677 213.732 mo
151.37 213.732 li
@
94.677 270.425 mo
151.37 270.425 li
@
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
141.407 157.039 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
140.031 155.665 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
141.407 167.002 mo
( )sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
140.031 168.377 mo
( )sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
141.407 213.732 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
140.031 212.357 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
141.407 223.695 mo
( )sh
1 /0 /CSD get_res sepcs
1 sep
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
140.031 225.07 mo
( )sh
.65478 0 1 0 cmyk
%ADOBeginSubsetFont: RAQBAA+LINEW10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /RAQBAA+LINEW10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name LINEW10.) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 64 /a64 put
def
/UniqueID 5011941 def
/FontBBox {-220 -220 1040 1040} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/StdHW [80] def
/StdVW [80] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/a64 <1C60D8A8C9B5EE3199535FD7C9D81FE0DC91F0BE2DA9FAC5F0E1F6F230
C79DC5C52E777DBE25F9D4CD959E2967B3AC338349BC19654DF2DE5971C89885
12236905661236> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEE+LINEW10 /RAQBAA+LINEW10 findfont ct_VMDictPut
/ODKZEE+LINEW10*1 
[64{/.notdef}rp /a64 191{/.notdef}rp]
ODKZEE+LINEW10 nf
ODKZEE+LINEW10*1 [9.9626 0 0 -9.9626 0 0 ]msf
83.338 212.357 mo
(@)sh
93.301 222.319 mo
(@)sh
96.053 225.069 mo
(@)sh
82.541 201.995 mo
106.812 201.995 li
@
82.94 225.071 mo
82.94 202.394 li
@
106.414 225.071 mo
106.414 202.394 li
@
82.541 225.469 mo
106.812 225.469 li
@
.65478 0 1 0 cmyk
%ADOBeginSubsetFont: HFABAA+CMMI12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HFABAA+CMMI12 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI12.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 84 /T put
def
/UniqueID 5087386 def
/FontBBox {-31 -250 1026 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [22] def
/StdVW [65] def
/StemSnapH [22 29] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/T <1C60D8A8C9B7FE5AA1438436217DB1AEB42CC5924428C28B08E6B64184F7
70CC6A28DED8B219DF50375A1316ED6D82E1146513B99C34E5835FC9765055FD
799AC966E53ED0AAF902DB82527220427D15AAE2F7F11716DEB84C6E50119C35
F62C1E418B09A8E6FADB9741F25BF2CA0526405A2D9E7F12C39FDAB7106D79CF
B4C876F9E3563485CBD1F7A7ABF442860313FA56927AC6A8FF3C22A0CAE0EDAB
E72F36EC774131C545A3366D3F524B735434EB35C9CC4C8632A76B5D825215E8
7A089989CCE290C2D07C> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEF+CMMI12 /HFABAA+CMMI12 findfont ct_VMDictPut
/ODKZEF+CMMI12*1 
[84{/.notdef}rp /T 171{/.notdef}rp]
ODKZEF+CMMI12 nf
ODKZEF+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
106.016 240.494 mo
(T)sh
%ADOBeginSubsetFont: XJDAAA+CMR12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /XJDAAA+CMR12 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR12.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 61 /equal put
def
/UniqueID 5000794 def
/FontBBox {-34 -251 988 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [29] def
/StdVW [65] def
/StemSnapH [20 29] def
/StemSnapV [65 81] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/zero <1C60D8A8C9B752ABCA93999A026DBF99AAD8904D1DDB4E57C113FC7C4
BB860A57D51CF4E3751ED57B3101A17AA1B5671A1C015D5C75D8FEB922BD1774
20EAB3C957481DA4E4963ACF84BF9FC50697C050F334164800BFDE7711618591
B1F831B7E866F65D098B3FE084D7C62B127F713D632621D7D805D4B9DC728D9D
E8EB464A7CFE042C184593D33015AE1308E4B413209F42702D5> |-
/equal <1C60D8A8C9B6EC349A8886189F14557AE5AE1BE54B8844DBBD5FFC11
85002109161E9CDDBCF6C766068263974B75D4C50D73DF79CFBCF5B5F02880B0
97537282A41165A8E9A961F3C9F162CE7D46C9> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEG+CMR12 /XJDAAA+CMR12 findfont ct_VMDictPut
/ODKZEG+CMR12*1 
[48{/.notdef}rp /zero 12{/.notdef}rp /equal 194{/.notdef}rp]
ODKZEG+CMR12 nf
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
117.824 240.494 mo
(=0)
[12.4286 0 ]xsh
117.354 219.402 mo
128.692 219.402 li
128.692 208.064 li
117.354 208.064 li
cp
.930816 .793027 0 0 cmyk
f
%ADOBeginSubsetFont: DWTAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /DWTAAA+CMSY10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /minus put
def
/UniqueID 5096651 def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEH+CMSY10 /DWTAAA+CMSY10 findfont ct_VMDictPut
/ODKZEH+CMSY10*1 
[32{/.notdef}rp /minus 223{/.notdef}rp]
ODKZEH+CMSY10 nf
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
117.354 201.567 mo
( )sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /EDKAAA+CMMI8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI8.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 25 /pi put
def
/UniqueID 5087383 def
/FontBBox {-24 -250 1110 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/pi <1C60D8A8C9B7D98F14CA889CAB3235095661068303CBDAF93CA8878DCC3
94CF7E07B0F35CD08FC1D6A8EDB674699EE3753D9853E328C7D9D7C0BC2D7C1B
F3A1F715E9721D7C3376FB564223DDC108C85968921AAD4EABCFF64CEF67E102
D485F44E9F57195959D0CF80BF221DFC23D0BC6EE7BF69543CDCEF9CB5035C12
2F3126F71FE1691F31FA1BC7684B9D4F3C2DEE2FE56585D4014FE3FCD86E4486
74B5CB66742> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEI+CMMI8 /EDKAAA+CMMI8 findfont ct_VMDictPut
/ODKZEI+CMMI8*1 
[25{/.notdef}rp /pi 230{/.notdef}rp]
ODKZEI+CMMI8 nf
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
127.848 196.86 mo
(\031)sh
.478 lw
127.848 198.578 mo
132.997 198.578 li
@
.930816 .793027 0 0 cmyk
%ADOBeginSubsetFont: JUHBAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JUHBAA+CMR8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
def
/UniqueID 5000791 def
/FontBBox {-36 -250 1070 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A563
37D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86
BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1D
CB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7
F5FA2E61175441FDD6> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEJ+CMR8 /JUHBAA+CMR8 findfont ct_VMDictPut
/ODKZEJ+CMR8*1 
[50{/.notdef}rp /two 205{/.notdef}rp]
ODKZEJ+CMR8 nf
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
128.306 205.69 mo
(2)sh
1 /0 /CSD get_res sepcs
1 sep
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
141.407 270.425 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
140.031 269.05 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
141.407 280.388 mo
( )sh
1 /0 /CSD get_res sepcs
1 sep
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
140.031 281.763 mo
( )sh
174.047 174.047 mo
179.716 174.047 li
179.716 140.031 li
174.047 140.031 li
cp
0 .638331 1 0 cmyk
f
174.047 287.433 mo
179.716 287.433 li
179.716 253.417 li
174.047 253.417 li
cp
f
.65478 0 1 0 cmyk
ODKZEF+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
311.244 199.585 mo
(T)sh
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
323.052 199.585 mo
(=)sh
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEJ+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE5298
51B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3
286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E65
2D787177BE307207126057745DD2D6A7D78294> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEJ+CMR8 /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ODKZEJ+CMR8*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
ODKZEJ+CMR8 nf
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
336.673 194.878 mo
(1)sh
336.673 196.596 mo
340.907 196.596 li
@
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEJ+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7883CBAA92B92A60ED97CC7706D34A36348BC2B93805C
7C1833580FAA27E95855649C4EE0492E1681D62AEDB7EC0D4D44FE91FF7AD466
5FD8D6994E56FB00B47353D8538086D2C46021ADFB3F80264F6C2EF23799D21E
81ACDE63FE62C97F7BE27D7DCE3B9BAF5B096FE9F9E10574C4FE3C149B03DD0A
59DE10D784DCCBFDFC6D3C5399775DC28DB91A04691B5B8F3D1C009DFAB49BB8
18D90EA7C1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEJ+CMR8 /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ODKZEJ+CMR8*1 
[49{/.notdef}rp /one /two /three 204{/.notdef}rp]
ODKZEJ+CMR8 nf
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
336.673 203.707 mo
(3)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
287.433 212.356 mo
(@)sh
297.396 222.319 mo
(@)sh
300.147 225.069 mo
(@)sh
.797 lw
286.636 201.995 mo
310.907 201.995 li
@
287.035 225.071 mo
287.035 202.394 li
@
310.509 225.071 mo
310.509 202.394 li
@
286.636 225.469 mo
310.907 225.469 li
@
270.425 213.732 mo
327.118 213.732 li
1 /0 /CSD get_res sepcs
1 sep
@
298.772 242.079 mo
298.772 185.386 li
@
293.102 244.914 mo
304.44 244.914 li
304.44 233.576 li
293.102 233.576 li
cp
.930816 .793027 0 0 cmyk
f
.930816 .793027 0 0 cmyk
%ADOBeginSubsetFont: HFABAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEF+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/pi <1C60D8A8C9B790A837C8BB135F38798E014C9F44969346E658663169FE9
F09AB6AD6D43A05D02B49552CFB43BD1CF963FA94A5FFF26998EF3FBD48EBBAD
EC3028DCFE5FA550560FB7B76D8EE274E3FED5FC1A963F9226C95D501E4967F6
E4575886CE1CD8270C1AF97D35DF2DA45C7DD265225FCE31CE7C940FC51E423C
F6779ED84DDF9ACCFB394D9F046E31F4A8C08BA461AA9FF15B522B5FA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEF+CMMI12 /Encoding get
dup 25 /pi put
pop
%ADOEndSubsetFont
/ODKZEF+CMMI12*1 
[25{/.notdef}rp /pi 58{/.notdef}rp /T 171{/.notdef}rp]
ODKZEF+CMMI12 nf
ODKZEF+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
307.275 241.818 mo
(\031)sh
270.425 270.425 mo
327.118 270.425 li
1 /0 /CSD get_res sepcs
1 sep
@
298.772 298.772 mo
298.772 242.079 li
@
327.118 270.425 mo
383.811 270.425 li
@
355.465 298.772 mo
355.465 242.079 li
@
242.079 157.039 mo
270.425 157.039 li
@
%ADOBeginSubsetFont: DWTAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEH+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bar <1C60D8A8C9B857441457E710B30AAAC225216DDD3F0F67D37AB5F17441
25AC44330DB61243F0DBA44459146B24E9B3E94009> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEH+CMSY10 /Encoding get
dup 106 /bar put
pop
%ADOEndSubsetFont
/ODKZEH+CMSY10*1 
[32{/.notdef}rp /minus 73{/.notdef}rp /bar 149{/.notdef}rp]
ODKZEH+CMSY10 nf
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
192.72 160.028 mo
(j)sh
%ADOBeginSubsetFont: ZAAAAA+CMSS12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ZAAAAA+CMSS12 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSS12.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 83 /S put
def
/UniqueID 5000804 def
/FontBBox {-62 -251 978 758} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 444 459 655 676 694 715] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [60] def
/StdVW [76] def
/StemSnapH [54 60] def
/StemSnapV [76 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/S <1C60D8A8C9B79C5F6086E3C4FBEC481C716559BEA72FB21497ADDB9F4501
3DB39512D80512709AC68F1B49A99148949EBCE0B0633E17BF8181D0EC2AB781
1EED5E58090DE8DF3C1B08AE84FBE3AF1A51C253AFD374A17315FD30060EC522
327C928A933732C4E0283C808D1F6552C8E42DFB1938E919F5F656E1E239A5AB
196D2479F48492D28EDCE2F87B> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ODKZEK+CMSS12 /ZAAAAA+CMSS12 findfont ct_VMDictPut
/ODKZEK+CMSS12*1 
[83{/.notdef}rp /S 172{/.notdef}rp]
ODKZEK+CMSS12 nf
ODKZEK+CMSS12*1 [11.9552 0 0 -11.9552 0 0 ]msf
196.041 160.028 mo
(S)sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEI+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/z <1C60D8A8C9B7AD0A4D19D15DB7BCD4C67A86BBBB463A6C7B5D0053508151
6F36B35B3F18FD1AA63A86B0BE8FE9D311553D6D9F706509E2EA01DE8F7AB858
FE1743B87CA156C7CE0FE01542170E85CAEF07BE4775CA4D0132B75D448DD074
26E256DA5FC9CF51470B3046A4062BBFF7FACE7C0C2CA92A88D95B29C86BDF8F
AD27717F600B2D56CC3CB93998B9788F34DB5E43B1C18EF5D75717A5BE7A0BC4
5332AFE132C4E28EF47A40780EADA067C482776349DF5AF15D2537BFC1644D6F
192D753148BE4257E150B34A7BD9C9858F7D9A4360442BEDFE65> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEI+CMMI8 /Encoding get
dup 122 /z put
pop
%ADOEndSubsetFont
/ODKZEI+CMMI8*1 
[25{/.notdef}rp /pi 96{/.notdef}rp /z 133{/.notdef}rp]
ODKZEI+CMMI8 nf
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
202.545 161.821 mo
(z)sh
%ADOBeginSubsetFont: XJDAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEG+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B85D12B760F97E35CE56A4095E9F7AA1A00656E95C0DD5
2F4E15A0283B28A01742D3598E509B6264639DC3B168E3F06534E138A11F64F5
2DCAA93297CC1E84D3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEG+CMR12 /Encoding get
dup 58 /colon put
pop
%ADOEndSubsetFont
/ODKZEG+CMR12*1 
[48{/.notdef}rp /zero 9{/.notdef}rp /colon 2{/.notdef}rp /equal 194{/.notdef}rp]
ODKZEG+CMR12 nf
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
210.639 160.028 mo
(:)sh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
217.212 160.028 mo
( )sh
%ADOBeginSubsetFont: XJDAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEG+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B752AB372B1338726DAE50702AE3FC3505C230AA8B538E88
A64BC50555C15C4F9C1C8D25ACFD4CFF046EBC17B6B6CE5B6DDF472F018C84C2
D8CA302ED5402A29C0899E66EA3A4575040CA2E8AB00A92CB377A30E0A8E01C5
5A1866557B8C8E354DD627142F4AFBA8F01617> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEG+CMR12 /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ODKZEG+CMR12*1 
[48{/.notdef}rp /zero /one 8{/.notdef}rp /colon 2{/.notdef}rp /equal 194{/.notdef}rp]
ODKZEG+CMR12 nf
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
226.51 160.028 mo
(1)sh
%ADOBeginSubsetFont: DWTAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEH+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/angbracketright <1C60D8A8C9B737EC27E43BF1977FE17AC615C4D51BBC2D
65AA7CC33CFA41540C7CA133844DBE41FEF2945865DA9D891786F6515F030E01
A3952B0CA722FF9FDCF8FCFC5C74A0C99D8189EE34D2F9DB6136A2D181D0A82F
B5933291A7CEFD1590211D4B4312325A6AD8C98EB69C755FCB363B79B542A835> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEH+CMSY10 /Encoding get
dup 105 /angbracketright put
pop
%ADOEndSubsetFont
/ODKZEH+CMSY10*1 
[32{/.notdef}rp /minus 72{/.notdef}rp /angbracketright /bar 149{/.notdef}rp]
ODKZEH+CMSY10 nf
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
232.363 160.028 mo
(i)sh
412.157 327.118 mo
412.157 298.772 li
@
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
412.157 327.118 mo
( )sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
413.533 325.743 mo
( )sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
402.195 327.118 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
400.819 325.743 mo
(@)sh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
389.863 341.445 mo
(j)sh
ODKZEK+CMSS12*1 [11.9552 0 0 -11.9552 0 0 ]msf
393.184 341.445 mo
(S)sh
%ADOBeginSubsetFont: EDKAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEI+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B7C56CCD1BC9B75D21714387D3AD3ACF25872779F83EBDBCD6
CE54998B30575B69D40B2B697D333CBED0D896F89234E6F827B9F19B541AEECD
D45EC7D4F1126ACAC87C3C4D72FD40DA2D588CFB8C9AF0D6150F97A0BBCACF17
E32B0710E68246003F62B2AF95E8C00AF3FB2ACCA95B4562458782BB96AE0D72
D6A76D406E7FC05EB25A15FD9C1667627A43B16E6DD22F1CE36567E182698276
9D5C422DD7BB5E3E35F941B799D5AEBBC4B4E2730F1B5D705BCF2BBDB32026E3
1AC1304D5EC2EBCC373B5FC5716F11810C91BEE34479C921C13FD7B947EC284C
F09393A7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEI+CMMI8 /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
/ODKZEI+CMMI8*1 
[25{/.notdef}rp /pi 94{/.notdef}rp /x /.notdef /z 133{/.notdef}rp]
ODKZEI+CMMI8 nf
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
399.687 343.238 mo
(x)sh
%ADOBeginSubsetFont: XJDAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEG+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6EC3453F6145863BD3727D6A0863C71D59FC813989C24F
CD98311B732F6A8FCF177973035F5271F42F98EBFD01B1EECA8986C125D8A764
190C26002AB68C4BFE8E38ED199515C149B924611CAC04350BE9C56E03E7A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEG+CMR12 /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/ODKZEG+CMR12*1 
[43{/.notdef}rp /plus 4{/.notdef}rp /zero /one 8{/.notdef}rp /colon 2{/.notdef}rp 
/equal 194{/.notdef}rp]
ODKZEG+CMR12 nf
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
408.273 341.445 mo
(:+1)
[6.57541 9.10504 0 ]xsh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
429.803 341.445 mo
(i)sh
270.425 157.039 mo
298.771 157.039 li
@
298.772 185.386 mo
298.772 157.04 li
@
242.079 213.732 mo
270.425 213.732 li
@
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
197.37 216.721 mo
(j)sh
ODKZEK+CMSS12*1 [11.9552 0 0 -11.9552 0 0 ]msf
200.69 216.721 mo
(S)sh
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
207.194 218.514 mo
(z)sh
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
215.288 216.721 mo
(:0)
[6.57539 0 ]xsh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
227.714 216.721 mo
(i)sh
355.465 327.118 mo
355.465 298.772 li
@
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
355.465 327.118 mo
( )sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
356.84 325.743 mo
( )sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
345.502 327.118 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
344.126 325.743 mo
(@)sh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
337.722 341.445 mo
(j)sh
ODKZEK+CMSS12*1 [11.9552 0 0 -11.9552 0 0 ]msf
341.043 341.445 mo
(S)sh
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
347.546 343.238 mo
(x)sh
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
356.132 341.445 mo
(:0)
[6.57541 0 ]xsh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
368.558 341.445 mo
(i)sh
327.118 213.732 mo
355.464 213.732 li
@
355.465 242.079 mo
355.465 213.733 li
@
242.079 270.425 mo
270.425 270.425 li
@
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
192.817 273.414 mo
(j)sh
ODKZEK+CMSS12*1 [11.9552 0 0 -11.9552 0 0 ]msf
196.138 273.414 mo
(S)sh
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
202.641 275.207 mo
(z)sh
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
210.736 273.414 mo
(:+1)
[6.57539 9.10504 0 ]xsh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
232.266 273.414 mo
(i)sh
298.772 327.118 mo
298.772 298.772 li
@
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
298.772 327.118 mo
( )sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
300.147 325.743 mo
( )sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
288.809 327.118 mo
(@)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
287.433 325.743 mo
(@)sh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
276.38 341.445 mo
(j)sh
ODKZEK+CMSS12*1 [11.9552 0 0 -11.9552 0 0 ]msf
279.701 341.445 mo
(S)sh
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
286.204 343.238 mo
(x)sh
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
294.79 341.445 mo
(:)sh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
301.363 341.445 mo
( )sh
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
310.661 341.445 mo
(1)sh
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
316.514 341.445 mo
(i)sh
383.811 270.425 mo
412.157 270.425 li
@
412.157 298.772 mo
412.157 270.426 li
@
.65478 0 1 0 cmyk
ODKZEF+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
311.244 256.278 mo
(T)sh
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
323.052 256.278 mo
(=)sh
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
336.673 251.57 mo
(3)sh
.478 lw
336.673 253.289 mo
340.907 253.289 li
@
%ADOBeginSubsetFont: JUHBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ODKZEJ+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7883C47E9695598D0AF3A7007C55B549EB9B3F3F461046
52844342745D2B91FB2D0F00634244F88463533B1B57C29F84779340190813A1
C1D067290CD1A5A15C3546B4439E2525D45177EB37490815EF6B6C58818E7C9C
DA495E2BF3E7B45D1B291D529E999804ECD42D22A6077E492DD51C0EA4F3AC64
7B0CA8614C7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ODKZEJ+CMR8 /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ODKZEJ+CMR8*1 
[49{/.notdef}rp /one /two /three /four 203{/.notdef}rp]
ODKZEJ+CMR8 nf
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
336.673 260.4 mo
(4)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
287.433 269.049 mo
(@)sh
297.396 279.012 mo
(@)sh
300.147 281.762 mo
(@)sh
.797 lw
286.636 258.688 mo
310.907 258.688 li
@
287.035 281.764 mo
287.035 259.087 li
@
310.509 281.764 mo
310.509 259.087 li
@
286.636 282.162 mo
310.907 282.162 li
@
ODKZEF+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
367.937 256.278 mo
(T)sh
ODKZEG+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
379.745 256.278 mo
(=)sh
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
393.366 251.57 mo
(1)sh
.478 lw
393.366 253.289 mo
397.6 253.289 li
@
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
393.366 260.4 mo
(3)sh
ODKZED+LINE10*1 [9.9626 0 0 -9.9626 0 0 ]msf
344.126 269.049 mo
(@)sh
354.089 279.012 mo
(@)sh
356.84 281.762 mo
(@)sh
.797 lw
343.329 258.688 mo
367.6 258.688 li
@
343.728 281.764 mo
343.728 259.087 li
@
367.201 281.764 mo
367.201 259.087 li
@
343.329 282.162 mo
367.6 282.162 li
@
349.795 244.914 mo
361.133 244.914 li
361.133 233.576 li
349.795 233.576 li
cp
.930816 .793027 0 0 cmyk
f
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
363.968 241.252 mo
( )sh
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
374.462 236.545 mo
(\031)sh
.478 lw
374.462 238.263 mo
379.611 238.263 li
@
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
374.919 245.375 mo
(2)sh
293.102 188.221 mo
304.44 188.221 li
304.44 176.883 li
293.102 176.883 li
cp
f
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
307.275 184.559 mo
( )sh
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
317.769 179.852 mo
(\031)sh
317.769 181.57 mo
322.918 181.57 li
@
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
318.227 188.682 mo
(2)sh
293.102 301.606 mo
304.44 301.606 li
304.44 290.268 li
293.102 290.268 li
cp
f
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
307.275 297.945 mo
( )sh
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
317.769 293.238 mo
(\031)sh
317.769 294.956 mo
322.918 294.956 li
@
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
318.227 302.067 mo
(2)sh
349.795 301.606 mo
361.133 301.606 li
361.133 290.268 li
349.795 290.268 li
cp
f
ODKZEH+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
363.968 297.945 mo
( )sh
ODKZEI+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
374.462 293.238 mo
(\031)sh
374.462 294.956 mo
379.611 294.956 li
@
ODKZEJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
374.919 302.067 mo
(2)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/ODKZEH+CMSY10*1 uf
/ODKZEH+CMSY10 uf
/DWTAAA+CMSY10 uf
/ODKZED+LINE10*1 uf
/ODKZED+LINE10 uf
/PGUBAA+LINE10 uf
/ODKZEI+CMMI8*1 uf
/ODKZEI+CMMI8 uf
/EDKAAA+CMMI8 uf
/ODKZEK+CMSS12*1 uf
/ODKZEK+CMSS12 uf
/ZAAAAA+CMSS12 uf
/ODKZEJ+CMR8*1 uf
/ODKZEJ+CMR8 uf
/JUHBAA+CMR8 uf
/ODKZEG+CMR12*1 uf
/ODKZEG+CMR12 uf
/XJDAAA+CMR12 uf
/ODKZEE+LINEW10*1 uf
/ODKZEE+LINEW10 uf
/RAQBAA+LINEW10 uf
/ODKZEF+CMMI12*1 uf
/ODKZEF+CMMI12 uf
/HFABAA+CMMI12 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 0 2339 a FA(FIG.)26 b(5.)39 b(\(Color)26
b(online\))g(Con\014guration)f(of)h(a)f(random)g(n)m(um)m(b)s(er)f
(generator)i(with)f(a)h(preparation)f(and)g(a)h(mea-)0
2519 y(suremen)m(t)32 b(stage,)i(including)d(\014lters)h(blo)s(c)m
(king)g Fc(j)p Fb(S)1742 2533 y Fp(z)1810 2519 y FA(:)c
Fc(\000)p FA(1)p Fc(i)k FA(and)f Fc(j)p Fb(S)2300 2533
y Fp(z)2368 2519 y FA(:)d(+1)p Fc(i)p FA(.)45 b(\(F)-8
b(or)33 b(ideal)g(b)s(eam-splitters,)g(these)0 2700 y(\014lters)j(w)m
(ould)g(not)h(b)s(e)e(required.\))58 b(The)36 b(measuremen)m(t)g(stage)
i(\(righ)m(t)f(arra)m(y\))g(realises)g(a)g(unitary)f(quan)m(tum)0
2880 y(gate)28 b Fb(U)256 2894 y Fp(x)299 2880 y FA(,)g(corresp)s
(onding)d(to)i(the)g(pro)5 b(jectors)27 b(on)m(to)h(the)e
Fb(S)2020 2894 y Fp(x)2090 2880 y FA(state)i(observ)-5
b(ables)27 b(for)f(spin)f(state)j(measuremen)m(ts)0 3061
y(along)j(the)g Fk(x)p FA(-axis,)g(in)f(terms)h(of)f(generalised)i(b)s
(eam-splitters..)p 0 TeXcolorgray 0 3386 a Fy(for)g(a)g(considerable)i
(amoun)m(t)e(of)g(error)g(\(more)h(than)f(w)m(ould)h(b)s(e)g(desirable)
g(with)g(resp)s(ect)h(to)e(deviation)0 3560 y(from)g(50/50)g(bias\))h
(under)g(whic)m(h)h(v)-5 b(alue)33 b(inde\014niteness)j(is)d(still)g
(guaran)m(teed.)0 4087 y Fr(VI.)104 b(MONITORING)34 b(V)-12
b(ALUE)35 b(INDEFINITENESS)0 4429 y Fy(The)25 b(rendition)g(of)f(v)-5
b(alue)25 b(inde\014niteness)i(requires)f(a)f(quan)m(tised)h(system)g
(with)f(at)f(least)h(three)g(m)m(utually)0 4604 y(exclusiv)m(e)45
b(outcomes,)g(corresp)s(onding)e(to)f(an)f(asso)s(ciated)i(Hilb)s(ert)f
(space)h(dimension)h(equal)e(to)g(the)0 4778 y(n)m(um)m(b)s(er)34
b(of)e(these)i(outcomes|a)f(direct)g(consequence)j(of)c(the)h(Ko)s(c)m
(hen-Sp)s(ec)m(k)m(er)i(theorem.)0 5002 y(Of)40 b(course,)j(if)d(one)g
(is)h(willing)g(to)f(accept)h(ph)m(ysical)h(v)-5 b(alue)40
b(inde\014niteness)j(based)e(purely)h(on)e(formal)0 5176
y(Hilb)s(ert)22 b(space)h(mo)s(dels)g(of)e(quan)m(tum)i(mec)m(hanics)h
([5],)g(there)f(is)f(no)g(further)g(need)h(of)e(empirical)i(evidence.)0
5351 y(In)39 b(this)g(line)g(of)f(thinking,)j(Theorem)e(1,)h(and)f
(hence)g(the)g(quan)m(tum)h(v)-5 b(alue)39 b(inde\014niteness)i
(resulting)0 5525 y(from)26 b(it)h(via)f(Corollary)h(2,)g(needs)h(no)f
(more)f(empirical)i(corrob)s(oration)e(than)g(the)h(arithmetic)g(fact)f
(that,)p 0 TeXcolorgray 1845 5774 a(25)p 0 TeXcolorgray
eop end
%%Page: 26 26
TeXDict begin 26 25 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fy(in)33 b(P)m(eano)g(arithmetic)h(with)f
(standard)g(addition,)g(one)f(plus)i(one)f(equals)h(t)m(w)m(o.)0
307 y(QRNGs)46 b(whic)m(h)i(monitor)e(Bell-inequalit)m(y)i(violation)e
(sim)m(ultaneously)j(with)e(bit-generation)f(ha)m(v)m(e)0
482 y(b)s(een)g(prop)s(osed)g(in)g(the)g(literature)g([30,)f(50].)82
b(Giv)m(en)47 b(the)f(non-trivial)f(assumptions)j(used)e(in)g(the)0
656 y(pro)s(of)54 b(of)f(Theorem)j(1|in)e(particular,)60
b(the)55 b(m)m(utual)g(ph)m(ysical)h(co)s(existence)h(of)d(complemen)m
(tary)0 830 y(observ)-5 b(ables|should)39 b(our)e(QRNG)g(b)s(e)g
(monitored)h(in)f(this)h(w)m(a)m(y)g(to)s(o,)g(in)f(addition)g(to)g(v)
-5 b(alue)38 b(inde\014-)0 1005 y(niteness)d(certi\014cation?)0
1229 y(First,)49 b(w)m(e)d(stress)h(that,)i(in)c(con)m(trast)h(with)h
(our)e(prop)s(osed)h(QRNG,)f(the)g(aforemen)m(tioned)i(devices)0
1403 y(require)d(an)e(initial)h(random)f(seed)i(and)f(hence)g(op)s
(erate)g(as)f(secure)i(randomness)h Fw(exp)-5 b(ander)p
Fy(,)43 b(rather)0 1577 y(than)i Fw(gener)-5 b(ator)p
Fy(:)66 b(the)45 b(qualit)m(y)h(of)e(randomness)i(pro)s(duced)f(b)m(y)h
(suc)m(h)g(a)e(device)i(dep)s(ends)g(crucially)0 1752
y(up)s(on)33 b(the)g(qualit)m(y)g(of)g(randomness)h(of)e(the)h(seed.)0
1976 y(Secondly)-8 b(,)46 b(violation)d(of)f(Bell-inequalities)i(alone)
f(is)g(a)f(purely)h(statistical)h(phenomenon)f(and)g(only)0
2150 y(indicates)37 b(non-classical)f(correlations:)50
b(in)35 b(no)h(w)m(a)m(y)g(do)s(es)g(it)f(necessitate)j(a)d(Hilb)s
(ert-space)h(structure)0 2325 y(and)d(hence)g(it)g(cannot)f(giv)m(e)i
(the)f(certi\014cation)g(of)f(\(strong\))g(incomputabilit)m(y)j(our)d
(prop)s(osal)g(do)s(es)h(via)0 2499 y(v)-5 b(alue)33
b(inde\014niteness.)0 2723 y(Thirdly)-8 b(,)47 b(in)d(the)f(case)i
(that)e(our)g(QRNG)f(is)i(treated)g(as)f(an)g(un)m(trusted-device,)49
b(as)44 b(is)f(common)h(in)0 2897 y(cryptograph)m(y)39
b(\(due)f(to)e(the)i(users)h(inabilit)m(y)f(to)f(v)m(erify)i(the)f
(device's)h(w)m(orkings\),)h(the)e(set)g(up)g(could)0
3072 y(b)s(e)h(mo)s(di\014ed)h(to)f(test)h(suc)m(h)h(inequalities.)65
b(This)41 b(is)e(the)h(scenario)g(in)f(whic)m(h)i(monitoring)e
(inequalit)m(y)0 3246 y(violation)33 b(has)g(most)g(to)f(o\013er,)h
(since)h(violation)f(of)f(Bell-inequalities)j(can)e(b)s(e)g(deriv)m(ed)
i(from)d(Ko)s(c)m(hen-)0 3421 y(Sp)s(ec)m(k)m(er)c(t)m(yp)s(e)e
(argumen)m(ts)h([51])e(and)h(th)m(us)h(giv)m(es)g(some)f(indication)g
(of)f(non-classicalit)m(y)j(in)e(the)g(absence)0 3595
y(of)d(trust)h(in)g(the)g(device,)j(ev)m(en)f(if)d(it)h(cannot)g
(guaran)m(tee)g(incomputabilit)m(y)-8 b(.)42 b(An)24
b(ev)m(en)h(b)s(etter)f(monitoring)0 3769 y(metho)s(d|whic)m(h)29
b(migh)m(t)e(necessitate)j(a)d(revision)h(of)f(our)g(curren)m(t)h(QRNG)
f(set)h(up|ma)m(y)g(use)g(the)f(t)m(yp)s(e)0 3944 y(of)46
b(non-classical)i(outcomes)g(t)m(ypically)g(encoun)m(tered)h(in)e
(empirical)g(realisations)h(of)e(Green)m(b)s(erger-)0
4118 y(Horne-Zeilinger)23 b(t)m(yp)s(e)g(argumen)m(ts)h([52)o(,)f(53)o
(],)i(as,)g(at)d(least)h(ideally)-8 b(,)25 b(they)e(do)g(not)f(in)m(v)m
(olv)m(e)j(an)m(y)e(statistics,)0 4292 y(but)33 b(require)h(a)e
(violation)h(of)f(lo)s(cal)g(realism)i(at)e(ev)m(ery)i(triple)g(of)e
(outcomes.)0 4516 y(T)-8 b(o)32 b(summarise,)i(w)m(e)g(ha)m(v)m(e)f
(presen)m(ted)i(a)d(formal)g(conceptualisation)h(of)f
Fw(value)i(\(in-\)de\014niteness,)c Fy(and)0 4691 y(pro)m(v)m(en)36
b(that)e(there)h(alw)m(a)m(ys)h(exists)h(an)d(admissible)i(assignmen)m
(t)h(function)e(making)g(a)f Fw(single)41 b Fy(observ-)0
4865 y(able)c(v)-5 b(alue)37 b(de\014nite;)j(one)c(cannot)h(hop)s(e)g
(to)f(pro)m(v)m(e)i Fw(al)5 b(l)46 b Fy(observ)-5 b(ables)38
b(are)f(v)-5 b(alue)37 b(inde\014nite.)56 b(W)-8 b(e)37
b(also)0 5039 y(sho)m(w)m(ed)30 b(that,)f(in)g(an)f(extension)i(of)e
(the)g(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)j(theorem,)f(after)e(preparing)h
(a)f(pure)g(state)h(in)0 5214 y(three)38 b(dimensional)h(Hilb)s(ert)f
(space,)i(certain)f(precisely)h(iden)m(ti\014ed)f(observ)-5
b(ables)39 b(are)f Fw(pr)-5 b(ovably)39 b(value)0 5388
y(inde\014nite.)p 0 TeXcolorgray 1845 5774 a Fy(26)p
0 TeXcolorgray eop end
%%Page: 27 27
TeXDict begin 27 26 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 83 a Fy(W)-8 b(e)29 b(ha)m(v)m(e)h(applied)f(these)h
(results)g(to)e(a)g(prop)s(osal)h(to)f(generate)h(bit)g(sequences)j(b)m
(y)d(a)f(quan)m(tum)i(random)0 257 y(n)m(um)m(b)s(er)35
b(generator.)46 b(An)m(y)34 b(suc)m(h)h(sequence)h(is,)f(as)e(w)m(e)i
(sho)m(w)m(ed,)g(then)g(\\certi\014ed)f(b)m(y")g(quan)m(tum)h(v)-5
b(alue)0 432 y(inde\014niteness)36 b(\(in)d(the)h(sense)g(of)f(the)g
(Bell-,)g(Green)m(b)s(erger-Horne-Zeilinger-,)h(and)f(Ko)s(c)m(hen-Sp)s
(ec)m(k)m(er)0 606 y(theorems\))h(to)e(pro)s(duce)h(a)g(strongly)g
(incomputable)h(sequence)h(of)d(bits.)0 830 y(T)-8 b(o)34
b(what)h(exten)m(t)g(w)m(e)h(can)e(guaran)m(tee)h(v)-5
b(alue)35 b(inde\014niteness)i(remains)e(an)f(op)s(en)h(question.)50
b(W)-8 b(e)34 b(kno)m(w)0 1005 y(that)26 b(not)g(all)f(observ)-5
b(ables)28 b(can)e(b)s(e)g(v)-5 b(alue)27 b(inde\014nite,)i(and)d(at)g
(least)g(those)h(in)f(the)g(star-shap)s(ed)h(setup)g(of)0
1179 y(Fig.)g(1)h(can)g(b)s(e)f(guaran)m(teed)i(to)e(b)s(e,)i(but)f(ho)
m(w)g(far)f(do)s(es)i(this)f(v)-5 b(alue)28 b(inde\014niteness)j(go?)41
b(W)-8 b(e)28 b(conjecture)0 1353 y(that)36 b(this)h(is)g(as)f(far)g
(as)g(one)h(can)f(go;)i(that)e Fw(only)i(a)g(single)d
Fy(observ)-5 b(able)38 b(in)e(the)h(Hilb)s(ert)f(space)i(can)e(b)s(e)0
1528 y(assigned)41 b(the)f(v)-5 b(alue)40 b(one,)h(and)f(only)g(those)g
(orthogonal)f(to)g(said)h(observ)-5 b(able)41 b(can)e(b)s(e)h(assigned)
h(the)0 1702 y(v)-5 b(alue)39 b(0|an)m(y)f(other)g(observ)-5
b(ables)40 b(m)m(ust,)g(under)f(the)g(assumption)g(of)f(non-con)m
(textualit)m(y)i(b)s(e)e(v)-5 b(alue)0 1876 y(inde\014nite.)0
2468 y Fr(A)m(CKNO)m(WLEDGEMENTS)0 2810 y Fy(W)d(e)49
b(are)f(grateful)h(to)f(Koh)m(taro)g(T)-8 b(adaki)49
b(for)f(insigh)m(tful)h(commen)m(ts)i(whic)m(h)f(impro)m(v)m(ed)g(the)f
(pap)s(er,)0 2985 y(as)f(w)m(ell)i(as)e(the)g(anon)m(ymous)i(referees)f
(who)g(pro)m(vided)g(helpful)g(commen)m(ts.)92 b(W)-8
b(e)48 b(thank)h(Mic)m(hael)0 3159 y(Rec)m(k)43 b(for)e(the)h(co)s(de)g
(pro)s(ducing)g(the)g(generalised)h(b)s(eam-splitter)f(setup)h(for)e
(an)g(arbitrary)h(unitary)0 3333 y(transformation.)e(Abb)s(ott,)25
b(Calude)f(and)f(Sv)m(ozil)h(ha)m(v)m(e)g(b)s(een)g(supp)s(orted)f(in)g
(part)g(b)m(y)h(Marie)f(Curie)h(FP7-)0 3508 y(PEOPLE-2010-IRSES)k(Gran)
m(t)f(RANPHYS.)i(Calude's)h(con)m(tribution)f(w)m(as)f(done)h(in)f
(part)f(during)i(his)0 3682 y(ten)m(ure)c(as)e(Visiting)h(F)-8
b(ello)m(w)24 b(of)f(the)h(Isaac)g(Newton)g(Institute)h(for)e
(Mathematical)h(Sciences)i(\(June{July)0 3856 y(2012\).)41
b(Conder)29 b(has)g(b)s(een)g(supp)s(orted)h(in)e(part)h(b)m(y)g(a)f
(Univ)m(ersit)m(y)j(of)d(Auc)m(kland)i(Summer)g(Sc)m(holarship)0
4031 y(\(2012\).)74 b(Sv)m(ozil's)45 b(con)m(tribution)f(w)m(as)f(done)
h(in)f(part)g(during)g(his)h(visiting)g(honorary)f(app)s(oin)m(tmen)m
(t)0 4205 y(at)37 b(the)h(Univ)m(ersit)m(y)i(of)d(Auc)m(kland)j(\(F)-8
b(ebruary{Marc)m(h)38 b(2012\),)g(and)g(a)f(visiting)i(professorship)g
(at)e(the)0 4379 y(Univ)m(ersit)m(y)e(of)d(Cagliari)h(\(Ma)m(y{July)h
(2012\).)p 924 4597 2039 5 v 1178 4598 1529 7 v 1433
4599 1020 9 v 1688 4600 510 11 v 0 TeXcolorgray 45 4983
a FA([1])p 0 TeXcolorgray 51 w(John)23 b(S.)h(Bell,)h(\\On)f(the)g
(problem)g(of)g(hidden)e(v)-5 b(ariables)25 b(in)f(quan)m(tum)f(mec)m
(hanics,")j(Reviews)e(of)g(Mo)s(dern)191 5164 y(Ph)m(ysics)31
b Fr(38)p FA(,)g(447{452)i(\(1966\).)p 0 TeXcolorgray
45 5345 a([2])p 0 TeXcolorgray 51 w(Ernst)25 b(Sp)s(ec)m(k)m(er,)h
(\\Die)h(Logik)g(nic)m(h)m(t)f(gleic)m(hzeitig)k(en)m(tsc)m(heidbarer)c
(Aussagen,")h(Dialectica)i Fr(14)p FA(,)d(239{246)191
5525 y(\(1960\),)33 b(h)m(ttp://arxiv.org/abs/1103.453)q(7.)p
0 TeXcolorgray 1845 5774 a Fy(27)p 0 TeXcolorgray eop
end
%%Page: 28 28
TeXDict begin 28 27 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 45 83 a FA([3])p 0 TeXcolorgray
51 w(Simon)31 b(Ko)s(c)m(hen)f(and)h(Ernst)f(P)-8 b(.)31
b(Sp)s(ec)m(k)m(er,)h(\\The)f(problem)f(of)h(hidden)f(v)-5
b(ariables)32 b(in)e(quan)m(tum)h(mec)m(han-)191 264
y(ics,")j(Journal)f(of)g(Mathematics)i(and)e(Mec)m(hanics)h(\(no)m(w)g
(Indiana)e(Univ)m(ersit)m(y)i(Mathematics)i(Journal\))191
444 y Fr(17)p FA(,)31 b(59{87)i(\(1967\).)p 0 TeXcolorgray
45 625 a([4])p 0 TeXcolorgray 51 w(Whic)m(h,)j(due)d(to)i(complemen)m
(tarit)m(y)-8 b(,)37 b(ma)m(y)e(not)f(b)s(e)f(all)i(sim)m(ultaneously)g
(co-measurable)g(\(i.e.)g(formally)-8 b(,)191 805 y(comm)m(uting\).)p
0 TeXcolorgray 45 986 a([5])p 0 TeXcolorgray 51 w(John)26
b(v)m(on)g(Neumann,)g Fu(Mathematic)-5 b(al)31 b(F)-7
b(oundations)31 b(of)e(Quantum)g(Me)-5 b(chanics)34 b
FA(\(Princeton)27 b(Univ)m(ersit)m(y)191 1166 y(Press,)j(Princeton,)h
(NJ,)g(1955\).)p 0 TeXcolorgray 45 1347 a([6])p 0 TeXcolorgray
51 w(Garrett)25 b(Birkho\013)f(and)f(John)g(v)m(on)h(Neumann,)f(\\The)h
(logic)i(of)d(quan)m(tum)h(mec)m(hanics,")h(Annals)f(of)f(Math-)191
1528 y(ematics)32 b Fr(37)p FA(,)f(823{843)j(\(1936\).)p
0 TeXcolorgray 45 1708 a([7])p 0 TeXcolorgray 51 w(Simon)27
b(Ko)s(c)m(hen)h(and)f(Ernst)g(P)-8 b(.)29 b(Sp)s(ec)m(k)m(er,)f
(\\Logical)i(structures)e(arising)g(in)f(quan)m(tum)h(theory)-8
b(,")29 b(in)e Fu(Sym-)191 1889 y(p)-5 b(osium)28 b(on)e(the)h(The)-5
b(ory)27 b(of)g(Mo)-5 b(dels,)28 b(Pr)-5 b(o)g(c)g(e)g(e)g(dings)28
b(of)e(the)h(1963)g(International)i(Symp)-5 b(osium)28
b(at)e(Berkeley)191 2069 y FA(\(North)31 b(Holland,)g(Amsterdam,)g
(1965\))h(pp.)e(177{189.)p 0 TeXcolorgray 45 2250 a([8])p
0 TeXcolorgray 51 w(Simon)41 b(Ko)s(c)m(hen)g(and)g(Ernst)g(P)-8
b(.)42 b(Sp)s(ec)m(k)m(er,)g(\\The)f(calculus)h(of)g(partial)g(prop)s
(ositional)g(functions,")g(in)191 2430 y Fu(Pr)-5 b(o)g(c)g(e)g(e)g
(dings)49 b(of)d(the)h(1964)h(International)h(Congr)-5
b(ess)47 b(for)g(L)-5 b(o)g(gic,)50 b(Metho)-5 b(dolo)g(gy)49
b(and)e(Philosophy)i(of)191 2611 y(Scienc)-5 b(e,)32
b(Jerusalem)38 b FA(\(North)31 b(Holland,)g(Amsterdam,)g(1965\))h(pp.)e
(45{57.)p 0 TeXcolorgray 45 2792 a([9])p 0 TeXcolorgray
51 w(Y)-8 b(uji)31 b(Hasega)m(w)m(a,)i(Rudolf)c(Loidl,)i(Gerald)g
(Badurek,)f(Matthias)i(Baron,)61 b(and)30 b(Helm)m(ut)h(Rauc)m(h,)f
(\\Quan-)191 2972 y(tum)23 b(con)m(textualit)m(y)j(in)c(a)h
(single-neutron)g(optical)i(exp)s(erimen)m(t,")e(Ph)m(ysical)h(Review)g
(Letters)f Fr(97)p FA(,)h(230401)191 3153 y(\(2006\).)p
0 TeXcolorgray 0 3333 a([10])p 0 TeXcolorgray 51 w(H.)38
b(Bartosik,)j(J.)d(Klepp,)h(C.)e(Sc)m(hmitzer,)k(S.)c(Sp)s(onar,)h(A.)g
(Cab)s(ello,)j(H.)d(Rauc)m(h,)77 b(and)37 b(Y.)h(Hasega)m(w)m(a,)191
3514 y(\\Exp)s(erimen)m(tal)44 b(test)g(of)f(quan)m(tum)g(con)m
(textualit)m(y)j(in)d(neutron)g(in)m(terferometry)-8
b(,")45 b(Ph)m(ysical)f(Review)191 3694 y(Letters)31
b Fr(103)p FA(,)h(040403)h(\(2009\),)g(arXiv:0904.4576.)p
0 TeXcolorgray 0 3875 a([11])p 0 TeXcolorgray 51 w(G.)j(Kirc)m(hmair,)g
(F.)g(Z\177)-45 b(ahringer,)36 b(R.)f(Gerritsma,)i(M.)f(Kleinmann,)g
(O.)f(G)s(\177)-48 b(uhne,)36 b(A.)f(Cab)s(ello,)i(R.)e(Blatt,)191
4056 y(and)23 b(C.)g(F.)h(Ro)s(os,)g(\\State-indep)s(enden)m(t)g(exp)s
(erimen)m(tal)g(test)g(of)f(quan)m(tum)g(con)m(textualit)m(y)-8
b(,")28 b(Nature)23 b Fr(460)p FA(,)191 4236 y(494{497)34
b(\(2009\),)f(arXiv:0904.1655.)p 0 TeXcolorgray 0 4417
a([12])p 0 TeXcolorgray 51 w(Elias)54 b(Amselem,)61 b(Magn)m(us)54
b(R)-11 b(\027)-57 b(admark,)59 b(Mohamed)54 b(Bourennane,)112
b(and)53 b(Ad\023)-45 b(an)53 b(Cab)s(ello,)i(\\State-)191
4597 y(indep)s(enden)m(t)d(quan)m(tum)g(con)m(textualit)m(y)k(with)c
(single)h(photons,")g(Ph)m(ysical)h(Review)f(Letters)g
Fr(103)p FA(,)191 4778 y(160405)33 b(\(2009\).)p 0 TeXcolorgray
0 4958 a([13])p 0 TeXcolorgray 51 w(Ad\023)-45 b(an)31
b(Cab)s(ello,)h(\\Exp)s(erimen)m(tally)g(testable)h(state-indep)s
(enden)m(t)e(quan)m(tum)g(con)m(textualit)m(y)-8 b(,")35
b(Ph)m(ysical)191 5139 y(Review)c(Letters)g Fr(101)p
FA(,)h(210401)h(\(2008\).)p 0 TeXcolorgray 0 5320 a([14])p
0 TeXcolorgray 51 w(Itamar)g(Pito)m(wsky)-8 b(,)34 b(\\Resolution)g(of)
f(the)g(Einstein-Po)s(dolsky-Rosen)g(and)f(Bell)h(parado)m(xes,")h(Ph)m
(ysical)191 5500 y(Review)d(Letters)g Fr(48)p FA(,)g(1299{1302)k
(\(1982\).)p 0 TeXcolorgray 1845 5774 a Fy(28)p 0 TeXcolorgray
eop end
%%Page: 29 29
TeXDict begin 29 28 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 83 a FA([15])p 0 TeXcolorgray
51 w(Note)34 b(that)f(there)f(exist)h(mo)s(dels)f(of)g(complemen)m
(tarit)m(y)j(suc)m(h)d(as)g(automaton)h(logic)h(or)f(generalised)g(urn)
191 264 y(mo)s(dels)d(whic)m(h)g(are)h(v)-5 b(alue)31
b(de\014nite)f([54)q(].)p 0 TeXcolorgray 0 444 a([16])p
0 TeXcolorgray 51 w(In)g(the)g(Bell-t)m(yp)s(e)j(cases)e(all)g(observ)
-5 b(ables,)31 b(and)f(in)g(the)g(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)h(case)
h(\\man)m(y")f(observ)-5 b(ables.)p 0 TeXcolorgray 0
625 a([17])p 0 TeXcolorgray 51 w(Neal)32 b(Zierler)f(and)f(Mic)m(hael)j
(Sc)m(hlessinger,)f(\\Bo)s(olean)g(em)m(b)s(eddings)e(of)h(orthomo)s
(dular)f(sets)h(and)g(quan-)191 805 y(tum)f(logic,")j(Duk)m(e)e
(Mathematical)i(Journal)d Fr(32)p FA(,)h(251{262)j(\(1965\).)p
0 TeXcolorgray 0 986 a([18])p 0 TeXcolorgray 51 w(Gudrun)28
b(Kalm)m(bac)m(h,)k Fu(Me)-5 b(asur)g(es)33 b(and)h(Hilb)-5
b(ert)33 b(L)-5 b(attic)g(es)39 b FA(\(W)-8 b(orld)31
b(Scien)m(ti\014c,)h(Singap)s(ore,)e(1986\).)p 0 TeXcolorgray
0 1166 a([19])p 0 TeXcolorgray 51 w(V\023)-45 b(acla)m(v)26
b(Alda,)f(\\On)f(0-1)h(measures)e(for)h(pro)5 b(jectors)25
b(I,")f(Aplik)-5 b(ace)25 b(matematiky)h(\(Applications)f(of)f(Math-)
191 1347 y(ematics\))32 b Fr(25)p FA(,)f(373{374)j(\(1980\).)p
0 TeXcolorgray 0 1528 a([20])p 0 TeXcolorgray 51 w(V\023)-45
b(acla)m(v)48 b(Alda,)d(\\On)g(0-1)i(measures)e(for)g(pro)5
b(jectors)45 b(I)s(I,")g(Aplik)-5 b(ace)47 b(matematiky)g
(\(Applications)f(of)191 1708 y(Mathematics\))33 b Fr(26)p
FA(,)e(57{58)i(\(1981\).)p 0 TeXcolorgray 0 1889 a([21])p
0 TeXcolorgray 51 w(P)m(a)m(v)m(el)43 b(Pt\023)-45 b(ak)40
b(and)g(Sylvia)g(Pulmanno)m(v\023)-45 b(a,)40 b Fu(Orthomo)-5
b(dular)45 b(Structur)-5 b(es)43 b(as)f(Quantum)g(L)-5
b(o)g(gics)48 b FA(\(Klu)m(w)m(er)191 2069 y(Academic)32
b(Publishers,)d(Dordrec)m(h)m(t,)j(1991\).)p 0 TeXcolorgray
0 2250 a([22])p 0 TeXcolorgray 51 w(Karl)43 b(Sv)m(ozil)g(and)f(Josef)h
(Tk)-5 b(adlec,)43 b(\\Greec)m(hie)i(diagrams,)h(nonexistence)d(of)g
(measures)f(in)g(quan)m(tum)191 2430 y(logics)36 b(and)d(Ko)s(c)m
(hen{Sp)s(ec)m(k)m(er)i(t)m(yp)s(e)f(constructions,")h(Journal)e(of)i
(Mathematical)h(Ph)m(ysics)e Fr(37)p FA(,)h(5380{)191
2611 y(5401)d(\(1996\).)p 0 TeXcolorgray 0 2792 a([23])p
0 TeXcolorgray 51 w(Avshalom)i(C.)g(Elitzur,)h(Sandu)d(P)m(op)s(escu,)
68 b(and)33 b(Daniel)i(Rohrlic)m(h,)f(\\Quan)m(tum)f(nonlo)s(calit)m(y)
j(for)d(eac)m(h)191 2972 y(pair)d(in)g(an)h(ensem)m(ble,")g(Ph)m(ysics)
g(Letters)g(A)f Fr(162)p FA(,)i(25{28)g(\(1992\).)p 0
TeXcolorgray 0 3153 a([24])p 0 TeXcolorgray 51 w(Karl)82
b(Sv)m(ozil,)i(\\Ho)m(w)g(m)m(uc)m(h)e(con)m(textualit)m(y?")k(Natural)
c(Computing)h Fr(11)p FA(,)g(261{265)j(\(2012\),)191
3333 y(arXiv:1103.3980.)p 0 TeXcolorgray 0 3514 a([25])p
0 TeXcolorgray 51 w(Ernst)30 b(Sp)s(ec)m(k)m(er,)61 b(\(1999\),)33
b(priv)-5 b(ate)31 b(comm)m(unication)h(to)f(K.)f(Sv)m(ozil.)p
0 TeXcolorgray 0 3694 a([26])p 0 TeXcolorgray 51 w(Alb)s(ert)j
(Einstein,)h(Boris)g(P)m(o)s(dolsky)-8 b(,)68 b(and)32
b(Nathan)i(Rosen,)f(\\Can)h(quan)m(tum-mec)m(hanical)g(description)191
3875 y(of)d(ph)m(ysical)g(realit)m(y)h(b)s(e)e(considered)g(complete?")
i(Ph)m(ysical)f(Review)i Fr(47)p FA(,)e(777{780)i(\(1935\).)p
0 TeXcolorgray 0 4056 a([27])p 0 TeXcolorgray 51 w(An)21
b(elemen)m(t)i(of)e(ph)m(ysical)h(realit)m(y)h(corresp)s(onds)c(to)j
(the)g(notion)f(of)g(a)h(de\014nite)f(v)-5 b(alue,)24
b(p)s(ossibly)c(con)m(textual,)191 4236 y(as)31 b(outlined)f(in)g(this)
h(pap)s(er.)p 0 TeXcolorgray 0 4417 a([28])p 0 TeXcolorgray
51 w(Asher)43 b(P)m(eres,)h(\\Generalized)h(Ko)s(c)m(hen-Sp)s(ec)m(k)m
(er)e(theorem,")h(F)-8 b(oundations)44 b(of)f(Ph)m(ysics)g
Fr(26)p FA(,)h(807{812)191 4597 y(\(1996\),)33 b(arXiv:quan)m
(t-ph/9510018.)p 0 TeXcolorgray 0 4778 a([29])p 0 TeXcolorgray
51 w(Osung)i(Kw)m(on,)i(Y)-8 b(oung-W)g(o)s(ok)38 b(Cho,)73
b(and)36 b(Y)-8 b(o)s(on-Ho)37 b(Kim,)f(\\Quan)m(tum)f(random)h(n)m(um)
m(b)s(er)e(generator)191 4958 y(using)c(photon-n)m(um)m(b)s(er)f(path)h
(en)m(tanglemen)m(t,")k(Applied)c(Optics)g Fr(48)p FA(,)h(1774{1778)j
(\(2009\).)p 0 TeXcolorgray 0 5139 a([30])p 0 TeXcolorgray
51 w(S.)45 b(Pironio,)50 b(A.)c(Ac)-10 b(\023)-35 b(\020n,)50
b(S.)45 b(Massar,)50 b(A.)c(Bo)m(y)m(er)i(de)d(la)h(Giro)s(da)m(y,)k
(D.)d(N.)e(Matsuk)m(evic)m(h,)52 b(P)-8 b(.)46 b(Maunz,)191
5320 y(S.)25 b(Olmsc)m(henk,)i(D.)f(Ha)m(y)m(es,)i(L.)e(Luo,)g(T.)f(A.)
h(Manning,)52 b(and)25 b(C.)g(Monro)s(e,)h(\\Random)f(n)m(um)m(b)s(ers)
f(certi\014ed)191 5500 y(b)m(y)30 b(Bell's)i(theorem,")g(Nature)f
Fr(464)p FA(,)g(1021{1024)j(\(2010\).)p 0 TeXcolorgray
1845 5774 a Fy(29)p 0 TeXcolorgray eop end
%%Page: 30 30
TeXDict begin 30 29 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 83 a FA([31])p 0 TeXcolorgray
51 w(Andr)m(\023)-43 b(e)42 b(Stefano)m(v,)j(Nicolas)e(Gisin,)i
(Olivier)d(Guinnard,)h(Lauren)m(t)f(Guinnard,)84 b(and)41
b(Hugo)h(Zbinden,)191 264 y(\\Optical)28 b(quan)m(tum)e(random)f(n)m
(um)m(b)s(er)g(generator,")j(Journal)e(of)g(Mo)s(dern)g(Optics)g
Fr(47)p FA(,)h(595{598)j(\(2000\).)p 0 TeXcolorgray 0
444 a([32])p 0 TeXcolorgray 51 w(Karl)25 b(Sv)m(ozil,)h(\\Three)e
(criteria)i(for)e(quan)m(tum)g(random-n)m(um)m(b)s(er)e(generators)k
(based)e(on)g(b)s(eam)g(splitters,")191 625 y(Ph)m(ysical)32
b(Review)f(A)f Fr(79)p FA(,)h(054306)i(\(2009\),)g(arXiv:quan)m
(t-ph/0903.2744.)p 0 TeXcolorgray 0 805 a([33])p 0 TeXcolorgray
51 w(Mic)m(hael)h(A.)d(W)-8 b(a)m(yne,)34 b(Ev)-5 b(an)31
b(R.)g(Je\013rey)-8 b(,)33 b(Gleb)f(M.)g(Akselro)s(d,)62
b(and)31 b(P)m(aul)h(G.)g(Kwiat,)g(\\Photon)g(arriv)-5
b(al)191 986 y(time)31 b(quan)m(tum)f(random)g(n)m(um)m(b)s(er)f
(generation,")j(Journal)e(of)h(Mo)s(dern)e(Optics)i Fr(56)p
FA(,)g(516{516)i(\(2009\).)p 0 TeXcolorgray 0 1166 a([34])p
0 TeXcolorgray 51 w(M.)27 b(Stip)m(\024)-43 b(cevi)m(\023)g(c)30
b(and)25 b(B.)i(Medv)m(ed)g(Rogina,)h(\\Quan)m(tum)e(random)g(n)m(um)m
(b)s(er)f(generator)j(based)e(on)g(photonic)191 1347
y(emission)31 b(in)f(semiconductors,")h(Review)g(of)g(Scien)m(ti\014c)g
(Instrumen)m(ts)e Fr(78)p FA(,)j(045104)h(\(2007\).)p
0 TeXcolorgray 0 1528 a([35])p 0 TeXcolorgray 51 w(Hai-Qiang)40
b(Ma,)h(Y)-8 b(uejian)38 b(Xie,)80 b(and)37 b(Ling-An)h(W)-8
b(u,)39 b(\\Random)f(n)m(um)m(b)s(er)f(generation)i(based)f(on)g(the)
191 1708 y(time)31 b(of)g(arriv)-5 b(al)31 b(of)f(single)h(photons,")g
(Applied)f(Optics)g Fr(44)p FA(,)h(7760{7763)k(\(2005\).)p
0 TeXcolorgray 0 1889 a([36])p 0 TeXcolorgray 51 w(Cristian)70
b(Calude,)g Fu(Information)i(and)e(R)-5 b(andomness|A)n(n)71
b(A)n(lgorithmic)f(Persp)-5 b(e)g(ctive)p FA(,)71 b(2nd)e(ed.)191
2069 y(\(Springer,)30 b(Berlin,)h(2002\).)p 0 TeXcolorgray
0 2250 a([37])p 0 TeXcolorgray 199 2227 a(\023)191 2250
y(Emile)f(Borel,)g(\\Les)g(probabilit)m(\023)-43 b(es)30
b(d)m(\023)-43 b(enom)m(brables)30 b(et)f(leurs)g(applications)h
(arithm)m(\023)-43 b(etiques,")31 b(Rendicon)m(ti)191
2430 y(del)g(Circolo)g(Matematico)j(di)c(P)m(alermo)h(\(1884)i(-)d
(1940\))j Fr(27)p FA(,)e(247{271)i(\(1909\).)p 0 TeXcolorgray
0 2611 a([38])p 0 TeXcolorgray 51 w(Alastair)44 b(A.)f(Abb)s(ott)f(and)
g(Cristian)h(S.)f(Calude,)88 b(\\V)-8 b(on)44 b(Neumann)e
(normalisation)h(of)g(a)g(quan)m(tum)191 2792 y(random)30
b(n)m(um)m(b)s(er)f(generator,")j(Computabilit)m(y)g
Fr(1)p FA(,)f(59{83)i(\(2012\).)p 0 TeXcolorgray 0 2972
a([39])p 0 TeXcolorgray 51 w(Zeey)m(a)f(Merali,)g(\\A)f(truth)e(test)j
(for)e(randomness,")g(Nature)g(News)61 b(\(2010\),)33
b(10.1038/news.2010.181)q(.)p 0 TeXcolorgray 0 3153 a([40])p
0 TeXcolorgray 51 w(ID)39 b(Quan)m(tique)f(SA,)g Fu(QUANTIS.)g(Quantum)
i(numb)-5 b(er)40 b(gener)-5 b(ator)50 b FA(\(idQuan)m(tique,)39
b(Genev)-5 b(a,)41 b(Switzer-)191 3333 y(land,)31 b(2001-2009\).)p
0 TeXcolorgray 0 3514 a([41])p 0 TeXcolorgray 51 w(ANU)188
b(Quan)m(tum)e(Optics,)i Fu(ANU.)175 b(Quantum)i(r)-5
b(andom)179 b(numb)-5 b(er)178 b(gener)-5 b(ator)191
3694 y FA(\(ANU)175 b(Quan)m(tum)f(Optics,)g(Australian)h(National)h
(Univ)m(ersit)m(y)-8 b(,)177 b(2012\))f(uRL)191 3875
y Fa(http://photonics.anu.edu.)o(au/q)o(opt)o(ics/)o(Rese)o(arc)o(h/qr)
o(ng.p)o(hp)97 b FA(accessed)104 b(on)f(July)g(9th,)191
4056 y(2012.)p 0 TeXcolorgray 0 4236 a([42])p 0 TeXcolorgray
51 w(Cristian)41 b(S.)g(Calude)g(and)f(Karl)h(Sv)m(ozil,)i(\\Quan)m
(tum)d(randomness)g(and)h(v)-5 b(alue)41 b(inde\014niteness,")g(Ad-)191
4417 y(v)-5 b(anced)31 b(Science)g(Letters)g Fr(1)p FA(,)g(165{168)i
(\(2008\),)g(arXiv:quan)m(t-ph/0611029.)p 0 TeXcolorgray
0 4597 a([43])p 0 TeXcolorgray 51 w(M.)e(Rec)m(k,)h(An)m(ton)f
(Zeilinger,)g(H.)g(J.)f(Bernstein,)61 b(and)30 b(P)-8
b(.)31 b(Bertani,)h(\\Exp)s(erimen)m(tal)f(realization)h(of)f(an)m(y)
191 4778 y(discrete)g(unitary)f(op)s(erator,")i(Ph)m(ysical)f(Review)g
(Letters)g Fr(73)p FA(,)g(58{61)i(\(1994\).)p 0 TeXcolorgray
0 4958 a([44])p 0 TeXcolorgray 51 w(Marek)42 b(Zuk)m(o)m(wski,)j(An)m
(ton)c(Zeilinger,)87 b(and)40 b(Mic)m(hael)k(A.)d(Horne,)h
(\\Realizable)i(higher-dimensional)191 5139 y(t)m(w)m(o-particle)36
b(en)m(tanglemen)m(ts)g(via)e(m)m(ultip)s(ort)f(b)s(eam)g(splitters,")h
(Ph)m(ysical)g(Review)g(A)f Fr(55)p FA(,)h(2564{2579)191
5320 y(\(1997\).)p 0 TeXcolorgray 1845 5774 a Fy(30)p
0 TeXcolorgray eop end
%%Page: 31 31
TeXDict begin 31 30 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 83 a FA([45])p 0 TeXcolorgray
51 w(Karl)40 b(Sv)m(ozil,)h(\\Noncon)m(textualit)m(y)i(in)c(m)m
(ultipartite)i(en)m(tanglemen)m(t,")i(J.)c(Ph)m(ys.)g(A:)h(Math.)h
(Gen.)f Fr(38)p FA(,)191 264 y(5781{5798)35 b(\(2005\),)e(quan)m
(t-ph/0401113.)p 0 TeXcolorgray 0 444 a([46])p 0 TeXcolorgray
51 w(F.)43 b(D.)h(Murnaghan,)e Fu(The)i(Unitary)h(and)f(R)-5
b(otation)47 b(Gr)-5 b(oups)52 b FA(\(Spartan)42 b(Bo)s(oks,)h(W)-8
b(ashington,)48 b(D.C.,)191 625 y(1962\).)p 0 TeXcolorgray
0 805 a([47])p 0 TeXcolorgray 51 w(A.)27 b(Zeilinger,)h(\\General)g
(prop)s(erties)f(of)g(lossless)g(b)s(eam)g(splitters)g(in)g(in)m
(terferometry)-8 b(,")28 b(American)g(Jour-)191 986 y(nal)j(of)f(Ph)m
(ysics)h Fr(49)p FA(,)g(882{883)i(\(1981\).)p 0 TeXcolorgray
0 1166 a([48])p 0 TeXcolorgray 51 w(R.)26 b(A.)f(Camp)s(os,)h(B.)g(E.)f
(A.)g(Saleh,)52 b(and)25 b(M.)g(C.)g(T)-8 b(eic)m(h,)27
b(\\Quan)m(tum-mec)m(hanical)g(lossless)f(b)s(eam)f(splitter:)191
1347 y Fk(S)5 b(U)10 b FA(\(2\))32 b(symmetry)e(and)f(photon)i
(statistics,")i(Ph)m(ysical)e(Review)g(A)f Fr(40)p FA(,)h(1371{1384)k
(\(1989\).)p 0 TeXcolorgray 0 1528 a([49])p 0 TeXcolorgray
51 w(Daniel)g(M.)f(Green)m(b)s(erger,)h(Mik)m(e)g(A.)e(Horne,)68
b(and)33 b(An)m(ton)h(Zeilinger,)h(\\Multiparticle)g(in)m(terferometry)
191 1708 y(and)30 b(the)h(sup)s(erp)s(osition)d(principle,")j(Ph)m
(ysics)g(T)-8 b(o)s(da)m(y)32 b Fr(46)p FA(,)f(22{29)h(\(1993\).)p
0 TeXcolorgray 0 1889 a([50])p 0 TeXcolorgray 51 w(Umesh)f(V)-8
b(azirani)32 b(and)f(Thomas)f(Vidic)m(k,)i(\\Certi\014able)g(quan)m
(tum)f(dice,")h(Philosophical)g(T)-8 b(ransactions)191
2069 y(of)41 b(the)h(Ro)m(y)m(al)h(So)s(ciet)m(y)f(A:)g(Mathematical,)
47 b(Ph)m(ysical)42 b(and)e(Engineering)h(Sciences)h
Fr(370)p FA(,)g(3432{3448)191 2250 y(\(2012\),)33 b(arXiv:1111.6054.)p
0 TeXcolorgray 0 2430 a([51])p 0 TeXcolorgray 51 w(Suc)m(h)h
(violations)j(are)e(often)g(referred)e(to)j(as)f(\\pro)s(ofs)f(of)h
(the)f(Ko)s(c)m(hen-Sp)s(ec)m(k)m(er)h(theorem,")i(or)e(\\pro)s(ofs)191
2611 y(of)c(quan)m(tum)f(con)m(textualit)m(y"[9)t({12)q(,)h(55)q(].)p
0 TeXcolorgray 0 2792 a([52])p 0 TeXcolorgray 51 w(Dik)f(Bou)m
(wmeester,)h(Jian-W)-8 b(ei)30 b(P)m(an,)g(Matthew)g(Daniell,)h(Harald)
f(W)-8 b(einfurter,)59 b(and)28 b(An)m(ton)h(Zeilinger,)191
2972 y(\\Observ)-5 b(ation)50 b(of)g(three-photon)g(green)m(b)s
(erger-horne-zeilinger)i(en)m(tanglemen)m(t,")g(Ph)m(ysical)f(Review)
191 3153 y(Letters)31 b Fr(82)p FA(,)g(1345{1349)k(\(1999\).)p
0 TeXcolorgray 0 3333 a([53])p 0 TeXcolorgray 51 w(Jian-W)-8
b(ei)38 b(P)m(an,)g(D.)f(Bou)m(wmeester,)i(M.)e(Daniell,)j(H.)c(W)-8
b(einfurter,)75 b(and)35 b(A.)i(Zeilinger,)g(\\Exp)s(erimen-)191
3514 y(tal)d(test)f(of)g(quan)m(tum)f(nonlo)s(calit)m(y)i(in)e
(three-photon)h(Green)m(b)s(erger-Horne-Zeilinger)h(en)m(tanglemen)m
(t,")191 3694 y(Nature)d Fr(403)p FA(,)g(515{519)j(\(2000\).)p
0 TeXcolorgray 0 3875 a([54])p 0 TeXcolorgray 51 w(Karl)i(Sv)m(ozil,)i
(\\Logical)g(equiv)-5 b(alence)38 b(b)s(et)m(w)m(een)f(generalized)g
(urn)e(mo)s(dels)h(and)f(\014nite)h(automata,")j(In-)191
4056 y(ternational)32 b(Journal)e(of)g(Theoretical)j(Ph)m(ysics)d
Fr(44)p FA(,)h(745{754)j(\(2005\),)f(quan)m(t-ph/0209136.)p
0 TeXcolorgray 0 4236 a([55])p 0 TeXcolorgray 51 w(Radek)26
b(Lapkiewicz,)i(P)m(eizhe)g(Li,)f(Christoph)d(Sc)m(hae\013,)k(Nathan)e
(K.)g(Langford,)h(Sv)m(en)e(Ramelo)m(w,)k(Marcin)191
4417 y(Wie)-5 b(\023)-41 b(sniak,)92 b(and)43 b(An)m(ton)h(Zeilinger,)g
(\\Exp)s(erimen)m(tal)g(non-classicalit)m(y)i(of)d(an)h(indivisible)f
(quan)m(tum)191 4597 y(system,")31 b(Nature)g Fr(474)p
FA(,)h(490{493)h(\(2011\).)p 0 TeXcolorgray 1845 5774
a Fy(31)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
