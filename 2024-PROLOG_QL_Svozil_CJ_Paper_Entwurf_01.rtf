{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19680\viewh13840\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 Entwurf\
Stand: 10.09.2024
\f1\b \

\f0\b0 \
Christian Jendreiko, Karl Svozil\
\

\f1\b Unlocking the generative potential of quantum structures / partition logics using generative logic 
\f0\b0 \
\

\f1\b Abstract:
\f0\b0 \
\
(\'85)\
\
The paper is divided into two parts: In part one we consider our motivation and we describe 
\f2 what Partition Logics 
\f0 are and what the concept of generative logic is.\
In the second part we describe how the application of generative logic on partition logics results in interesting aesthetic output using a concrete example.\
\

\f1\b Key words:
\f0\b0 \
partition logics, logic programming, quantum structures, quantum music, quantum melodies, generative logic, complementarity,\
generative art, generative design, generative grammars\
\
\

\f1\b 1. Basics\

\f0\b0 \

\f1\b 1.1 Reason Why / Motivation:
\f0\b0 \
\
The motivation behind this interdisciplinary project is the idea that mathematical structures can serve as structuring entities in order to generate interesting aesthetic objects. A well known example are Fractals.
\f2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab560\pardirnatural\partightenfactor0
\cf0 \
In this project we use Quantum structures that are represented in the form of partition logics as structuring entities for the generation of aesthetically interesting perceptual offerings.\
In order to do so we apply Generative logic on partiton logics.\

\f0 The application of Generative Logic on Quantum logical structures  in order to generate aesthetic output serves 2 objectives:\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 on the one hand it explores in how far Generative Logic could be helpful to make quantum structures better understandable through \
visualization or sonification.\
On the other hand the project explores the generative potential of quantum structures in order to generate interesting aesthic \
output.\
\
But what are partition logics and what is the concept of generative logic?\
In the next two chapters we will provide the reader with detailed descriptions.\
\
\
 \

\f1\b 1.2 Partition logics:\

\f0\b0 \
(\'85)\
\
\
we use a certain class of partition logics that represent quantum structures.\
\
\

\f1\b 1.3 The key ideas of Generative Logic 
\f0\b0 \
\
Generative Logic (GL) is a conceptual framework for the application of the logic computer language Prolog* in the domain of art & design as a generative tool. It is beeing developed by one of the authors at the HSD.\
\
Generative Logic is driven by 4 key ideas: \
\
-GL puts its focus on the generative power of Prolog. \uc0\u8232 \
-GL interprets a Prolog System not as a language but as a logic AI that performs automated reasoning and comes equipped with a language that can be used by programmers and users to communicate with that AI in order to generate interesting aesthetic output. \uc0\u8232 \
-GL tries to foster the application of Prolog in the domain of art & design as a powerful generative tool. \uc0\u8232 \
-GL understands logic AI as a white box, human-friendly, and trustworthy alternative/complement to black box subsymbolic AI.\
\
According to the concept of Generative Logic, programming in Prolog means interacting with a logic AI. \
Interacting with Prolog means providing the logic AI with information about a problem that is true, and then asking the inference engine to draw conclusions about these initial statements of truth. Interaction with the inference engine happens in a formal language.\
The inference engine then draws conclusions by performing controlled logical inferences based on the resolution principle discovered by J. Alan Robinson and further developed for practical use within a Prolog system by Robert Kowalski and Alain Colmerauer.\
If there are variables involved in the information given by the user to the inference engine, then it is part of the proof-procedure that the inference engine binds the free variables to the corresponding values that it finds in the database. These bindings are given back by the system as output. This behavior, known as \'93Grounding Substitution\'94 [3], is the key feature that makes Prolog a powerful generative AI.
\f1\b \

\f0\b0 \
*Prolog, born around 1972, expresses a program as a set of Horn clauses. Computation is then performed by applying logical reasoning to that set of clauses. The approach was eventually described as "Algorithm=Logic+Control". \

\f1\b \
\
1.3. The method of generative logic.
\f0\b0 \
\
How does the researcher proceed?\
\
Considering the conceptual point of departure described above, the researcher can proceed as follows:\
To generate output, the researcher proceeds in 3 steps:\
\
Step 1:\
In step 1 the researcher feed the inference engine with a representation of the partition logic interpreting it \
as a compound / composition of logic variables.\
 \'93Variables allow us to state relationships among objects without naming specific objects.\'94 [4] Therefore, each variable can be understood as an empty cell, a blank space, that is reserved exclusively for a certain kind of element that can be placed in this cell. In other words: each variable designates a certain class of elements that can be bound by the inference engine to this variable.\
The composition/arrangement/configuration of variables represents the spatial relations between a set of different classes of values in a plane. \
The values are possible elements of the electronic mosaic that is about to be generated.\
The description of the partition logic within the Prolog language takes place within the DCG formalism of logic grammars. In Prolog this formalism is called DCG.\
The abbreviation DCG stands for Definite Clause Grammars. This is a notation form in Prolog that was developed specifically for describing language grammars. DCGs can be used to describe character sequences abstractly and create them concretely. The alphabet used for this is divided into non-terminals and terminals; the basic syntactical construct used to form the individual character sequences has the form head \'97> body.\
 (1)\
\
Using DCGs the NonTerminals are representing the variables and the Terminals represent the values.\
\
 \
 \uc0\u8232 Step 2
\f1\b :
\f0\b0 \
\
In step 2, the researcher constructs the database: He decides what kind of elements will be part of the database, defines classes of elements, chooses which element shall belong to which class, and defines names for the predicates that designate class-membership of the elements having them as single arguments. \
\
Step 3:\
\
In step 3, the researcher develops a query strategy, thereby understanding the prompting of queries or compounds of queries as an important part of the process of composing an aesthetic object.\
\
\
Anm. (1) \
siehe dazu z.B. die Erl\'e4uterungen von Ulrich Neumerkel, in: Ulrich Neumerkel, Logikprogrammierung und Constraints Teil I, Skript, \
Technische Universit\'e4t Wien, 2017, S. 39-42:\
"Zur kompakten Beschreibung komplex strukturierter Listen gibt es in Prolog einen eigenen Formalismus. Durch eine Grammatik, auch DCG genannt (engl, definite clause grammar), werden Listen von Termen beschrieben." (Neumerkel, ebd. S.39)\
Eine solche Grammatik setzt sich aus einer Reihe von Regeln zusammen. "Eine Grammatikregel wird mittels des Pfeils \'97 \'bb (im Programmtext wie \'97 >) angegeben."(ebd) \
\'84Grammatikregeln beschreiben eine Folge (Liste) von Termen. Das Komma wird \'82und danach\'92 gelesen.\'93 (ebd. S.40)\
\'84DCGs und \'e4hnliche Formalismen werden in Prolog zur Realisierung von Grammatiken f\'fcr nat\'fcrliche Sprachen und Computersprachen verwendet.\'93 (ebd. S.41)\
\
\
\
\

\f1\b 2. From a quantum structure to an aesthetic object: A concrete example.\
\
2.1 The representation of a V-logic in form of a partition logic represented as a logical grammar.\
\

\f0\b0 In the project the representation of a so-called V-logic encoded as partition logic is used to provide the structure for creating the character sequence of the non-terminals.  \
\
A  V-logic can be represented in different ways.\
One possible representation is the representation as  a Greechie hypergraph.\
A Greechie hypergraph consists of two contexts with 3 nodes each.\
Because one of these nodes belongs to both contexts, the hypergraph consists of 5 nodes in total.\
The nodes are named a, b, c, d, e.\
The node c belongs to both contexts.\
\
The graph can be represented as follows:\
\
context 1:\
a\'96b\'96c\
\
context 2:\
c\'96d\'96e\
\
The two contexts as a combined Greechie hypergraph:\
\
a\'96b\'96c\'96d\'96e\
\
This graph can be used to describe the measurement results of a prototypical quantum physics experiment, for example a Stern-Gerlach experiment.\
In this experiment, the orientation of the angular momentum of a particle, the so-called spin, is measured along an axis.\
In one measurement, 3 measurement results are possible: spin up, spin down, no detectable result.\
(see Karl Svozil, Quantum Logic, 1998, p. 34)\
\
The two contexts of the Greechie graph describe two different measurements within a series of measurements.\
The graph can be assigned a total of 5 states, in which truth values \uc0\u8203 \u8203 are assigned to the nodes.\
This is done according to the rule that in each context, only exactly one node out of 3 nodes can be assigned the value true, while the other two nodes can be assigned the value false.\
\
This fact can be represented in form of a partition logic.\
In a partition logic each node is assigned two sets of states:\
The first set is the set of those assignments in which the respective node is assigned the value true.\
The second set is the set of all assignments in which the respective node is assigned the value false.\
\
This results in the following partion logic:\
\
a = \{s1,s2\}, \{s3,s4,s5\}.\
b = \{s3,s4\}, \{s1,s2,s5\}.\
c = \{s5\}, \{s1,s2,s3,s4\}.\
d = \{s2,s4\}, \{s1,s3,s5\}.\
e = \{s1, s3\}, \{s2,s4,s5\}.\
\
Karl Svozil and I determined and noted this list of occupancy on September 11, 2023, in Vienna.\
\
\

\f1\b 2.2 Transfering the partition logic into a Prolog program
\f0\b0 \
\
The transfer of this partition logic into a Prolog program using the DCG notation is now very simple.
\f1\b \
\

\f0\b0 All the researcher has to do is to apply the  method of Generative  Logic as described in 1.3.\
\

\f1\b 2.2.1 Step 1:
\f0\b0 \
\
Applying  step 1,  the symbols / characters of the partition logic are translated into non-terminals.\
They are divided into two sets: The 5 nodes a,b,c,d,e become members of a set, we want to call set 1. \
The symbols of the partitions of the set of all states \{s1,s2,s3,s4,s5\} (s stands for state) become members of a set, we want to call set 2.\
\
In addition to these two sets of Non-Terminals, we need two  further sets of nonterminals, that are singleton sets: \
One singleton set with the nonterminal br and the other singleton set with the nonterminal n.\
The nonterminal br represents a separator between the two sets true and false of each partition.\
This non-terminal describes a separator that serves to optically separate the states.\
And the second  non-terminal n denotes a line break. \
It is an important design element to enable not only a one-dimensional line arrangement but also a two-dimensional arrangement in which each node has its own line and these lines can be arranged one below the other.\
\
Having defined these 4 sets of nonterminals, we are ready to construct the complete Non-Terminal structure.\
\
To do this, the Non-Terminal structure is given a name. The individual non-terminals that are members of set 1 are assigned to this name as a sequence.\
In the prototype  program shown here, the non-terminal structure is named v-logic.\
And the sequence of nonterminals associated with that name simply maps the hypergraph a\'96b\'96c\'96d\'96e:\
\
v_logic \'97> a,b,c,d,e\
\
Next, to each member of set 1 are assigned the members of set 2 as a sequence, that represent the states in which the node represented by the member of set 1  is true followed by the nonterminal br, followed by  the members of set 2 that represent the states in which the node represented by the member of set 1 is assigned the value false, followed by the nonterminal n:\
\
Partition-Logic / v-Logic / Quantum Quadrat # 1:\
\
a --> s1,s2, br, s3,s4,s5,n. \
b --> s3,s4,br, s1,s2, s5,n. \
c --> s5, br, s1,s2,s3,s4,n. \
d --> s2,s4,br, s1,s3,s5,n. \
e --> s1,s3,br, s2,s4,s5.\
\
\
Having this piece of code, Step 1 is accomplished. The composition of logic variables represented by the NonTerminals that are members of the four sets is established. \
Each of the non-terminals from set 2 can now be assigned a terminal, i.e. any symbol that ultimately appears on the screen. \
\
We are ready for step 2 of the method: Constructing the database. 
\f1\b \
\
2.2.2 Step 2:
\f0\b0 \
\
As a proof of concept, within this project two different databases were developed  that did serve as symbolic domains.\
One domain was developed for the Visualization of the Quantum structure.\
The other domain was developed for the Sonification of the quantum structure.\
\
(\'85)\
\
Both domains can be combined with  the basic program that encodes the partition logic.\
\
This opens up a wide field of design options. A deeper reflection on this topic  will be found in 2.2.\
\
In addition to the assignments of terminals to the nonterminals of set 1 and 2, the two non-terminals of the singleton sets \
are also assigned each one to a terminal: \
\
The  separator:\
br --> [\'95].\
\
And the NonTerminal that is assigned to the terminal next_line:\
n --> ['\\n'].\
\
\
This creates the core program.\
\
Having the core program we will move on to step 3 of the method: Developing a query strategy.\
\

\f1\b 2.2.3 Step 3:
\f0\b0 \

\f1\b \

\f0\b0 In addition to this core program, there is another block of code that is necessary to output the realization described in the DCGs, but which plays no role in the design of the realization itself, apart from the placement of the realization on the screen in terms of the distance from the top edge of the output window and the distance of the realization from the word \'93false\'94, which always appears when the program is running in non-determination mode, i.e. all possible solutions are output. The non-determination mode is activated as soon as the format/2 function is used:\
\
output :- nl,nl,nl,\
phrase(v_logic, Ls), format("~s", [Ls]),\
nl,nl,nl,nl.\
\
\
This code block can be understood in procedural terms as follows:\
\
There is an output when the program produces three blank lines on the screen (nl,nl,nl) and ( , ) the inference machine replaces the non-terminals in the blank space structure v-logic with terminals and encodes this now filled blank space structure as a list and passes it on to the function format/2 (phrase(v_logic, Ls)\
and ( ,)\
the function format/2 outputs the padded space structure v-logic encoded as a list as a file type string (format("~s", [Ls])\
and ( ,)\
the program then generates 4 blank lines (nl,nl,nl,nl).\
\
If the program is now started by entering output in the query window, the following result appears:\
\
\

\f1\b 2.2.4 A complete program:
\f0\b0 \
\
(\'85)\
\
\

\f1\b 2.3 Exploring the generative potential of partition logics
\f0\b0 \
\
Once a structure is encoded as s logic grammar, the grammar-representation of the partition logic can be mapped to any kind of symbolic domain we want, across all media boundaries.\
\
Via this way we can  generate  visual, textual or sonic patterns that do represent one and the same quantum structure. \
All that has to be done is to change the set of values that are mapped to the nonterminal structure.\
\
In other words: Re-coding a partition logic as a sequence of nonterminals does open the gates into transmedia design.\
\
Interesting point: The inference engine generates a version of the described object; the structure of the object remains invariant under the substitu- tions of its variables. It is possible to generate a multitude of variations using one single structure by mapping different values to each variable. \
\
You create variety when elements are changed\
\
Happy Accidents\
\
(\'85)\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab560\pardirnatural\partightenfactor0

\f3\b \cf0 3. Outlook:
\f2\b0 \
\
The results show, that Partition logics offer a strong aesthetic potential as structuring entities  that needs to be systematically explored.
\f0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
The Proof of concept does show also how easily it is possible to realise Qunatum Visualization or Quantum Sonification with the method of generative logic.\
\
It is just a starting point. There is so much to explore.\
\
The selection of the  according to which the Non-terminal structure is designed is at the discretion of the designer.\
This opens up a second, broad field of design options.\
\
(\'85)\
\
////////////\
\
\
\
\
}