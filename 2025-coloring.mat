(* house/pentagon/pentagram hypergraph 2-valued  states *)

contexts =
{ {   1 , 2,  3  }  ,
 {  3,  4,  5 }  ,
 {  5,  6,  7 }  ,
 {  7,  8,  9 }  ,
 {  9, 10, 1 }
}

Print ["number of elements"];

numberofelements = Length[ Union[Flatten[ contexts ]]]

Print ["number of dimensions"];

dimension = Length[contexts[[1]]]

Print ["number of contexts"];

numberofcontexts = Length[ contexts ]



colors = {0, 0, 1}; (* The list of colors *)


colorconfigurations = {};    (* Start with an empty list to store the results *)

contexttwm = {};    (* Start with an empty list to store the results *)

(* Use n loops to create triplets *)
numLoops = 10; (* Specify the number of nested loops *)

ranges = Table[{Symbol["i" <> ToString[k]], 1, Length[colors]}, {k, 1,   numLoops }];

Do[
  cconfigaux={colors[[i1]] , colors[[i2]] , colors[[i3]] ,
             colors[[i4]], colors[[i5]], colors[[i6]], colors[[i7]], colors[[i8]], colors[[i9]], colors[[i10]]
};
contextc = Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, numberofcontexts}, {k, 1, 3}];
If[Union[{Sort[contextc[[1]]],
           Sort[contextc[[2]]],
           Sort[contextc[[3]]],
           Sort[contextc[[4]]],Sort[contextc[[5]]]
           }] == {{0, 0, 1}},
  (* Print[contextc]; *)
  AppendTo[colorconfigurations, cconfigaux] ;
  AppendTo[contexttwm, contextc /. {2 -> 0, 3 -> 0}]] ,
   Evaluate[Sequence @@ ranges]
]

Union[colorconfigurations] (* Display the result *)

Union[contexttwm](* Display the result *)


(* house/pentagon/pentagram hypergraph *)

contexts =
{ (*{   1 , 2,  3  }  , *)
 {  3,  4,  5 }  ,
 {  5,  6,  7 }  ,
 {  7,  8,  9 }  ,
 {  9, 10, 1 }
}

Print ["number of elements"];

numberofelements = Length[ Union[Flatten[ contexts ]]]

Print ["number of dimensions"];

dimension = Length[contexts[[1]]]

Print ["number of contexts"];

numberofcontexts = Length[ contexts ]



colors = {1, 2, 3}; (* The list of colors *)


colorconfigurations = {};    (* Start with an empty list to store the results *)

contexttwm = {};    (* Start with an empty list to store the results *)

(* Use n loops to create triplets *)
numLoops = 7; (* Specify the number of nested loops *)

ranges = Table[{Symbol["i" <> ToString[k]], 1, Length[colors]}, {k, 4, 4 + numLoops - 1}];

Do[
  cconfigaux={1 , 2 , 3 ,
             colors[[i4]], colors[[i5]], colors[[i6]], colors[[i7]], colors[[i8]], colors[[i9]], colors[[i10]]
};
contextc = Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, numberofcontexts}, {k, 1, 3}];
If[Union[{Sort[contextc[[1]]],
           Sort[contextc[[2]]],
           Sort[contextc[[3]]],
           Sort[contextc[[4]]]
           }] == {{1, 2, 3}},
  Print[contextc];
  AppendTo[colorconfigurations, cconfigaux] ;
  AppendTo[contexttwm, contextc /. {2 -> 0, 3 -> 0}]] ,
   Evaluate[Sequence @@ ranges]
]

colorconfigurations(* Display the result *)

Union[contexttwm](* Display the result *)

(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)



(* Yu-Oh hypergraph *)

contexts =
{ (*{   1 , 2,  3  }  , *)
 {  3,  4,  5 }  ,
 {  5,  6,  7 }  ,
 {  7,  8,  9 }  ,
 {  9, 10, 11 }  ,
 { 11, 12, 13 }  ,
 { 13, 14, 15 }  ,
 { 15, 16, 17 }  ,
 { 17, 18,  1 }  ,
 {  1, 11, 22 }  ,
 {  5, 13, 20 }  ,
 {  7, 17, 24 }  ,
 {  3, 19, 25 }  ,
 {  9, 21, 25 }  ,
 { 15, 23, 25 }  ,
 {  4, 10, 16 }
}

Print ["number of elements"];

numberofelements = Length[ Union[Flatten[ contexts ]]]

Print ["number of dimensions"];

dimension = Length[contexts[[1]]]

Print ["number of contexts"];

numberofcontexts = Length[ contexts ]



colors = {1, 2, 3}; (* The list of colors *)


colorconfigurations = {};    (* Start with an empty list to store the results *)

contexttwm = {};    (* Start with an empty list to store the results *)

(* Use n loops to create triplets *)
numLoops = 22; (* Specify the number of nested loops *)

ranges = Table[{Symbol["i" <> ToString[k]], 1, Length[colors]}, {k, 4, 4 + numLoops - 1}];

Do[
  cconfigaux={1 , 2 , 3 ,
             colors[[i4]], colors[[i5]], colors[[i6]], colors[[i7]], colors[[i8]], colors[[i9]], colors[[i10]], colors[[i11]],
             colors[[i12]], colors[[i13]], colors[[i14]], colors[[i15]], colors[[i16]], colors[[i17]], colors[[i18]], colors[[i19]],
             colors[[i20]], colors[[i21]], colors[[i22]], colors[[i23]], colors[[i24]], colors[[i25]]
};
contextc = Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, numberofcontexts}, {k, 1, 3}];
If[Union[{Sort[contextc[[1]]],
           Sort[contextc[[2]]],
           Sort[contextc[[3]]],
           Sort[contextc[[4]]],
           Sort[contextc[[5]]],
           Sort[contextc[[6]]],
           Sort[contextc[[7]]],
           Sort[contextc[[8]]],
           Sort[contextc[[9]]],
           Sort[contextc[[10]]],
           Sort[contextc[[11]]],
           Sort[contextc[[12]]],
           Sort[contextc[[13]]],
           Sort[contextc[[14]]],
           Sort[contextc[[15]]]
           }] == {{1, 2, 3}},
  Print[contextc];
  AppendTo[colorconfigurations, cconfigaux] ;
  AppendTo[contexttwm, contextc /. {2 -> 0, 3 -> 0}]] ,
   Evaluate[Sequence @@ ranges]
]

colorconfigurations(* Display the result *)

Union[contexttwm](* Display the result *)

(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)

(* G32 hypergraph *)

contexts =
{ (*{   1 , 2,  3  }  , *)
 { 3 , 4 , 5  }  ,
 { 5 , 6 , 7  }  ,
 { 7 , 8 , 9  }  ,
 { 9 ,10 ,11  }  ,
 {11 ,12 , 1  }  ,
 { 4 ,10 ,13  }  ,
 { 6 ,12 ,14  }  ,
 { 8 , 2 ,15  }  ,
 {13 ,14 ,15  }}

Print ["number of elements"];

numberofelements = Length[ Union[Flatten[ contexts ]]]

Print ["number of dimensions"];

dimension = Length[contexts[[1]]]

Print ["number of contexts"];

numberofcontexts = Length[ contexts ]



colors = {1, 2, 3}; (* The list of colors *)


colorconfigurations = {};    (* Start with an empty list to store the results *)

contexttwm = {};    (* Start with an empty list to store the results *)

(* Use n loops to create triplets *)
numLoops = 12; (* Specify the number of nested loops *)

ranges = Table[{Symbol["i" <> ToString[k]], 1, Length[colors]}, {k, 4, 4 + numLoops - 1}];

Do[
  cconfigaux={1 , 2 , 3 ,
             colors[[i4]], colors[[i5]], colors[[i6]], colors[[i7]], colors[[i8]], colors[[i9]], colors[[i10]], colors[[i11]],
             colors[[i12]], colors[[i13]], colors[[i14]], colors[[i15]]};
contextc = Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, numberofcontexts}, {k, 1, 3}];
(*If[i4 == 2,   Print[contextc]], *)
 If[Union[{Sort[contextc[[1]]],
           Sort[contextc[[2]]],
           Sort[contextc[[3]]],
           Sort[contextc[[4]]],
           Sort[contextc[[5]]],
           Sort[contextc[[6]]],
           Sort[contextc[[7]]],
           Sort[contextc[[8]]],
           Sort[contextc[[9]]]
           }] == {{1, 2, 3}},
  Print[contextc];
  AppendTo[colorconfigurations, cconfigaux] ;
  AppendTo[contexttwm, contextc /. {2 -> 0, 3 -> 0}]] ,
   Evaluate[Sequence @@ ranges]
]

colorconfigurations(* Display the result *)

Union[contexttwm](* Display the result *)

(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
(* Escher hypergraph *)

contexts =
{ (*{   1 , 2,  3  }  , *)
 {   3 , 4,  5  }  ,
 {   5 , 6,  7  }  ,
 {   7 , 8,  9  }  ,
 {   9 ,10, 11  }  ,
 {  11 ,12, 13  }  ,
 {  13 ,14, 15  }  ,
 {  15 ,16, 17  }  ,
 {  17 ,18,  1  }  ,
 {   4 ,16, 10  }  ,
 {   2 , 8, 14  }}

Print ["number of elements"];

numberofelements = Length[ Union[Flatten[ contexts ]]]

Print ["number of dimensions"];

dimension = Length[contexts[[1]]]

Print ["number of contexts"];

numberofcontexts = Length[ contexts ]



colors = {1, 2, 3}; (* The list of colors *)


colorconfigurations = {};    (* Start with an empty list to store the results *)

contexttwm = {};    (* Start with an empty list to store the results *)

(* Use n loops to create triplets *)
numLoops = 15; (* Specify the number of nested loops *)

ranges = Table[{Symbol["i" <> ToString[k]], 1, Length[colors]}, {k, 4, 4 + numLoops - 1}];

Do[
  cconfigaux={1 , 2 , 3 ,
             colors[[i4]], colors[[i5]], colors[[i6]], colors[[i7]], colors[[i8]], colors[[i9]], colors[[i10]], colors[[i11]],
             colors[[i12]], colors[[i13]], colors[[i14]], colors[[i15]], colors[[i16]], colors[[i17]], colors[[i18]]};
contextc = Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, numberofcontexts}, {k, 1, 3}];
(*If[i4 == 2,   Print[contextc]], *)
 If[Union[{Sort[contextc[[1]]],
           Sort[contextc[[2]]],
           Sort[contextc[[3]]],
           Sort[contextc[[4]]],
           Sort[contextc[[5]]],
           Sort[contextc[[6]]],
           Sort[contextc[[7]]],
           Sort[contextc[[8]]],
           Sort[contextc[[9]]],
           Sort[contextc[[10]]]
           }] == {{1, 2, 3}},
  Print[contextc];
  AppendTo[colorconfigurations, cconfigaux] ;
  AppendTo[contexttwm, contextc /. {2 -> 0, 3 -> 0}]] ,
   Evaluate[Sequence @@ ranges]
]

colorconfigurations(* Display the result *)

Union[contexttwm](* Display the result *)

(*

{{3,1,2},{2,1,3},{3,1,2},{2,3,1},{1,3,2},{2,3,1},{1,2,3},{3,2,1},{1,2,3},{2,1,3}}
{{3,2,1},{1,2,3},{3,1,2},{2,1,3},{3,1,2},{2,3,1},{1,3,2},{2,3,1},{2,3,1},{2,1,3}}
{{3,2,1},{1,3,2},{2,3,1},{1,3,2},{2,1,3},{3,1,2},{2,1,3},{3,2,1},{2,1,3},{2,3,1}}

{
{1, 2, 3, 1, 2, 1, 3, 1, 2, 3, 1, 3, 2, 3, 1, 2, 3, 2},
{1, 2, 3, 2, 1, 2, 3, 1, 2, 1, 3, 1, 2, 3, 1, 3, 2, 3},
{1, 2, 3, 2, 1, 3, 2, 3, 1, 3, 2, 1, 3, 1, 2, 1, 3, 2}
}


2  1  3                1    3  2
1  3  2                1    3  2
1  2  3                1    2  3


{
{{0, 0, 1}, {1, 0, 0}, {0, 0, 1}, {1, 0, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 0, 1}, {0, 1, 0}, {0, 0, 1}},
{{0, 0, 1}, {1, 0, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 0, 1}, {1, 0, 0}, {0, 0, 1}, {0, 0, 1}, {0, 1, 0}},
{{0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 0, 1}, {1, 0, 0}, {0, 0, 1}, {1, 0, 0}, {0, 0, 1}, {1, 0, 0}, {0, 1, 0}}
}

*)

(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)

contexts =
{
(* {   1 , 2 , 3 }   , *)
 {   4 , 5 , 6 }   ,
 {   6 , 7 , 8 }   ,
 {   8 , 9 , 10 }   ,
 {   10 ,11 , 1 }
}

Print ["number of elements"];

numberofelements = Length[ Union[Flatten[ contexts ]]]

Print ["number of dimensions"];

dimension = Length[contexts[[1]]]

Print ["number of contexts"];

numberofcontexts = Length[ contexts ]



colors = {1, 2, 3}; (* The list of colors *)


colorconfigurations = {};    (* Start with an empty list to store the results *)

(* Use n loops to create triplets *)
Do[
  cconfigaux={1 , 2 , 3 ,
             colors[[i4]], colors[[i5]], colors[[i6]], colors[[i7]], colors[[i8]], colors[[i9]], colors[[i10]], colors[[i11]]};
(*
If[i4 == 2,
  Print[Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, 5 - 1}, {k, 1, 3}]]];
*)
contextc = Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, 5 - 1}, {k, 1, 3}];
(*If[i4 == 2,   Print[contextc]], *)
 If[Union[{Sort[contextc[[1]]], Sort[contextc[[2]]],
    Sort[contextc[[3]]], Sort[contextc[[4]]]}] == {{1, 2, 3}},
  Print[contextc]; AppendTo[colorconfigurations, cconfigaux]] ,
  {i4, 1, Length[colors]},
  {i5, 1, Length[colors]},
  {i6, 1, Length[colors]},
  {i7, 1, Length[colors]},
  {i8, 1, Length[colors]},
  {i9, 1, Length[colors]},
  {i10, 1, Length[colors]},
  {i11, 1, Length[colors]}
];

colorconfigurations(* Display the result *)


(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
contexts =
{
(* {   1 , 2 , 3 }   , *)
 {   4 , 5 , 6 }   ,
 {   6 , 7 , 8 }   ,
 {   8 , 9 , 10 }   ,
 {   10 ,11 , 1 }
}

Print ["number of elements"];

numberofelements = Length[ Union[Flatten[ contexts ]]]

Print ["number of dimensions"];

dimension = Length[contexts[[1]]]

Print ["number of contexts"];

numberofcontexts = Length[ contexts ]



colors = {1, 2, 3}; (* The list of colors *)


colorconfigurations = {};    (* Start with an empty list to store the results *)

contexttwm = {};    (* Start with an empty list to store the results *)

(* Use n loops to create triplets *)
numLoops = 8; (* Specify the number of nested loops *)

ranges = Table[{Symbol["i" <> ToString[k]], 1, Length[colors]}, {k, 4, 4 + numLoops - 1}];

Do[
  cconfigaux={1 , 2 , 3 ,
             colors[[i4]], colors[[i5]], colors[[i6]], colors[[i7]], colors[[i8]], colors[[i9]], colors[[i10]], colors[[i11]]};
(*
If[i4 == 2,
  Print[Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, 5 - 1}, {k, 1, 3}]]];
*)
contextc = Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, 5 - 1}, {k, 1, 3}];
(*If[i4 == 2,   Print[contextc]], *)
 If[Union[{Sort[contextc[[1]]], Sort[contextc[[2]]],
    Sort[contextc[[3]]], Sort[contextc[[4]]]}] == {{1, 2, 3}},
  Print[contextc];
  AppendTo[colorconfigurations, cconfigaux] ;
  AppendTo[contexttwm, contextc /. {2 -> 0, 3 -> 0}]] ,
   Evaluate[Sequence @@ ranges]
]

colorconfigurations(* Display the result *)

Union[contexttwm](* Display the result *)

(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)

contexts =
{
(* {   1 , 2 , 3 }   , *)
 {   4 , 5 , 6 }   ,
 {   6 , 7 , 8 }   ,
 {   8 , 9 , 10 }   ,
 {   10 ,11 , 1 }
}

Print ["number of elements"];

numberofelements = Length[ Union[Flatten[ contexts ]]]

Print ["number of dimensions"];

dimension = Length[contexts[[1]]]

Print ["number of contexts"];

numberofcontexts = Length[ contexts ]



colors = {1, 2, 3}; (* The list of colors *)


colorconfigurations = {};    (* Start with an empty list to store the results *)

(* Use n loops to create triplets *)
Do[
  cconfigaux={1 , 2 , 3 ,
             colors[[i4]], colors[[i5]], colors[[i6]], colors[[i7]], colors[[i8]], colors[[i9]], colors[[i10]], colors[[i11]]};
(*
If[i4 == 2,
  Print[Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, 5 - 1}, {k, 1, 3}]]];
*)
contextc = Table[ cconfigaux[[contexts[[j, k]]]], {j, 1, 5 - 1}, {k, 1, 3}];
(*If[i4 == 2,   Print[contextc]], *)
 If[Union[{Sort[contextc[[1]]], Sort[contextc[[2]]],
    Sort[contextc[[3]]], Sort[contextc[[4]]]}] == {{1, 2, 3}},
  Print[contextc]; AppendTo[colorconfigurations, cconfigaux]] ,
  {i4, 1, Length[colors]},
  {i5, 1, Length[colors]},
  {i6, 1, Length[colors]},
  {i7, 1, Length[colors]},
  {i8, 1, Length[colors]},
  {i9, 1, Length[colors]},
  {i10, 1, Length[colors]},
  {i11, 1, Length[colors]}
];

colorconfigurations(* Display the result *)


(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)
(*******************************************)

(*

general coloring of (hyper)graphs with an arbitrary number of 3-element contexts

no plausibility checks

2024-05-08 Karl Svozil started conceptualization & programming


escher ={{   1 , 2,  3  }  ,
 {   3 , 4,  5  }  ,
 {   5 , 6,  7  }  ,
 {   7 , 8,  9  }  ,
 {   9 ,10, 11  }  ,
 {  11 ,12, 13  }  ,
 {  13 ,14, 15  }  ,
 {  15 ,16, 17  }  ,
 {  17 ,18,  1  }  ,
 {   4 ,16, 10  }  ,
 {   2 , 8, 14  }}

*)

contexts =
{
 {   1 , 2 , 3 }   ,
 {   4 , 5 , 6 }   ,
 {   7 , 8 , 9 }   ,
 {   2 , 5 , 8 }   ,
 {   9 ,10 ,23 }   ,
 {   4 ,11 ,24 }   ,
 {   3 ,12 ,25 }   ,
 {   1 ,13 ,20 }   ,
 {   6 ,13 ,22 }   ,
 {   7 ,13 ,21 }   ,
 {   3 ,11 ,14 }   ,
 {   7 ,11 ,15 }   ,
 {   9 ,12 ,16 }   ,
 {   6 ,12 ,17 }   ,
 {   4 ,10 ,18 }   ,
 {   1 ,10 ,19 }
}

Print ["number of elements"];

numberofelements = Length[ Union[Flatten[ contexts ]]]

Print ["number of dimensions"];

dimension = Length[contexts[[1]]]

Print ["number of contexts"];

numberofcontexts = Length[ contexts ]


colors = Table[i,{i,1,dimension}];

allcolorconfigurations = Tuples[ colors,  numberofelements ];

allcoloringswithrepetitions =   Table[allcolorconfigurations[[ i, contexts[[j, k]] ]], {i, 1,   Length[allcolorconfigurations]}, {j, 1, numberofcontexts}, {k, 1, dimension}];


alllegalcolorings = {};

auxdim = Table[ dimension , {j,1, numberofcontexts}];

Do[coldim =
   Table[Length[Union[allcoloringswithrepetitions[[i, j]]]], {j, 1,  numberofcontexts}];
   If[coldim == auxdim, AppendTo[alllegalcolorings,  allcoloringswithrepetitions[[i]]] ], {i, 1, Length[allcoloringswithrepetitions]}];

Print[alllegalcolorings]

alllegalcolorconfigurations = {};

Do[coldim =
   Table[Length[Union[allcoloringswithrepetitions[[i, j]]]], {j, 1, numberofcontexts}];
   If[coldim == auxdim,  AppendTo[alllegalcolorconfigurations,   allcolorconfigurations[[i]]] ], {i, 1,   Length[allcoloringswithrepetitions]}   ];

Print[alllegalcolorconfigurations]

colorreassignment = {1, 0, 0};

twovaluedmeasures =
 Union[Table[
   colorreassignment[[alllegalcolorings[[i, j, k]]]]
            , {i, 1,  Length[alllegalcolorconfigurations]}, {j, 1,  numberofcontexts}, {k, 1, dimension}]]


twovaluedmeasurescolorconfigurations =
 Union[Table[
   colorreassignment[[alllegalcolorconfigurations[[i, k]]]]
            , {i, 1,  Length[alllegalcolorconfigurations]},  {k, 1, numberofelements}]]

colorreassignment = {-1, 0, 1};

threevaluedmeasures =
 Union[Table[
   colorreassignment[[alllegalcolorings[[i, j, k]]]]
            , {i, 1,  Length[alllegalcolorconfigurations]}, {j, 1,  numberofcontexts}, {k, 1, dimension}]]

threevaluedmeasurescolorconfigurations =
 Union[Table[
   colorreassignment[[alllegalcolorconfigurations[[i, k]]]]
            , {i, 1,  Length[alllegalcolorconfigurations]},  {k, 1, numberofelements}]]


(**********************************************************************************************************)
(**********************************************************************************************************)
(**********************************************************************************************************)
(**********************************************************************************************************)
(**********************************************************************************************************)
(**********************************************************************************************************)
(****** DEEPSEEK R1 ****************************************************************************************************)

(* Yu-Oh hypergraph *)
contexts = {
    {3, 4, 5}, {5, 6, 7}, {7, 8, 9}, {9, 10, 11}, {11, 12, 13},
    {13, 14, 15}, {15, 16, 17}, {17, 18, 1}, {1, 11, 22}, {5, 13, 20},
    {7, 17, 24}, {3, 19, 25}, {9, 21, 25}, {15, 23, 25}, {4, 10, 16}
};

Print["Number of elements: ", Length[Union[Flatten[contexts]]]];
Print["Number of dimensions: ", Length[contexts[[1]]]];
Print["Number of contexts: ", Length[contexts]];

colors = {1, 2, 3}; (* The list of colors *)

(* Function to check if a configuration is valid *)
isValidConfiguration[config_] :=
  And @@ (Sort[config[[#]]] == {1, 2, 3} & /@ contexts);

(* Recursive function to build configurations *)
generateValidConfigurations[config_, index_] :=
  If[index > 25,
    If[isValidConfiguration[config], {config}, {}],
    Join @@ Table[
      generateValidConfigurations[ReplacePart[config, index -> color], index + 1],
      {color, colors}
    ]
  ];

(* Initialize the configuration with default values (e.g., 0) *)
initialConfig = ConstantArray[0, 25];

(* Generate all valid configurations using Sow/Reap for efficiency *)
validConfigurations = generateValidConfigurations[initialConfig, 1];

(* Display the valid configurations *)
Print["Number of valid configurations: ", Length[validConfigurations]];
Print["Valid color configurations:"];
Print[validConfigurations];

(* Convert valid configurations to contexttwm format *)
contexttwm = validConfigurations /. {2 -> 0, 3 -> 0};

(* Display the unique contexttwm configurations *)
Print["Unique contexttwm configurations:"];
Print[Union[contexttwm]];

(**********************************************************************************************************)
(**********************************************************************************************************)
(**********************************************************************************************************)
(**********************************************************************************************************)
(**********************************************************************************************************)
(**********************************************************************************************************)
(****** DEEPSEEK R1 ****************************************************************************************************)

(* Escher hypergraph *)
contexts = {
    {   3 , 4,  5  }  ,
 {   5 , 6,  7  }  ,
 {   7 , 8,  9  }  ,
 {   9 ,10, 11  }  ,
 {  11 ,12, 13  }  ,
 {  13 ,14, 15  }  ,
 {  15 ,16, 17  }  ,
 {  17 ,18,  1  }  ,
 {   4 ,16, 10  }  ,
 {   2 , 8, 14  }
};

Print["Number of elements: ", Length[Union[Flatten[contexts]]]];
Print["Number of dimensions: ", Length[contexts[[1]]]];
Print["Number of contexts: ", Length[contexts]];

colors = {1, 2, 3}; (* The list of colors *)

(* Function to check if a configuration is valid *)
isValidConfiguration[config_] :=
  And @@ (Sort[config[[#]]] == {1, 2, 3} & /@ contexts);

(* Recursive function to build configurations *)
generateValidConfigurations[config_, index_] :=
  If[index > 25,
    If[isValidConfiguration[config], {config}, {}],
    Join @@ Table[
      generateValidConfigurations[ReplacePart[config, index -> color], index + 1],
      {color, colors}
    ]
  ];

(* Initialize the configuration with default values (e.g., 0) *)
initialConfig = ConstantArray[0, 25];

(* Generate all valid configurations using Sow/Reap for efficiency *)
validConfigurations = generateValidConfigurations[initialConfig, 1];

(* Display the valid configurations *)
Print["Number of valid configurations: ", Length[validConfigurations]];
Print["Valid color configurations:"];
Print[validConfigurations];

(* Convert valid configurations to contexttwm format *)
contexttwm = validConfigurations /. {2 -> 0, 3 -> 0};

(* Display the unique contexttwm configurations *)
Print["Unique contexttwm configurations:"];
Print[Union[contexttwm]];
